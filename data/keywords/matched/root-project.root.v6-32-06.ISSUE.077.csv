id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/11972:338,deployability,updat,updated,338,"[DF] Remove unused variable in `RRootDS.cxx`; Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11972
https://github.com/root-project/root/pull/11972:19,modifiability,variab,variable,19,"[DF] Remove unused variable in `RRootDS.cxx`; Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11972
https://github.com/root-project/root/pull/11972:254,modifiability,variab,variable,254,"[DF] Remove unused variable in `RRootDS.cxx`; Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11972
https://github.com/root-project/root/pull/11972:308,safety,test,tested,308,"[DF] Remove unused variable in `RRootDS.cxx`; Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11972
https://github.com/root-project/root/pull/11972:338,safety,updat,updated,338,"[DF] Remove unused variable in `RRootDS.cxx`; Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11972
https://github.com/root-project/root/pull/11972:338,security,updat,updated,338,"[DF] Remove unused variable in `RRootDS.cxx`; Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11972
https://github.com/root-project/root/pull/11972:308,testability,test,tested,308,"[DF] Remove unused variable in `RRootDS.cxx`; Fixes https://github.com/root-project/root/issues/11971. leftover from https://github.com/root-project/root/commit/b1257ba27a7139e0c927693fded3b243b3f94b33. # This Pull request:. ## Changes or fixes:. Unused variable, found by HenryDayHall. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11972
https://github.com/root-project/root/pull/11973:646,deployability,log,logical,646,"[ntuple] Add support for stored field projections; Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11973
https://github.com/root-project/root/pull/11973:210,energy efficiency,current,currently,210,"[ntuple] Add support for stored field projections; Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11973
https://github.com/root-project/root/pull/11973:646,safety,log,logical,646,"[ntuple] Add support for stored field projections; Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11973
https://github.com/root-project/root/pull/11973:646,security,log,logical,646,"[ntuple] Add support for stored field projections; Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11973
https://github.com/root-project/root/pull/11973:646,testability,log,logical,646,"[ntuple] Add support for stored field projections; Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11973
https://github.com/root-project/root/pull/11973:13,usability,support,support,13,"[ntuple] Add support for stored field projections; Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11973
https://github.com/root-project/root/pull/11973:220,usability,support,support,220,"[ntuple] Add support for stored field projections; Projected fields are fields that use existing columns to create alternative type representations of the data. Projected fields are linked to alias columns. We currently support a limited set of projections, namely only for leafs, collections, and records with a matching structure. The first application is for importing leaf count branches. The branches are physically stored in untyped collections and the projected as RVecs to their original names. E.g., _collection0.jet_pt [`float`] --> jet_pt [`RVec<float>`]. On the descriptor level, the PR introduces the separation between physical and logical column IDs. A follow-up PR will take care of projecting a collection offset column to the the count leaf branch (e.g., `njets`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11973
https://github.com/root-project/root/issues/11974:31,energy efficiency,current,currently,31,Document TROOT::SetBatch; It's currently completely undocumented: https://root.cern/doc/master/classTROOT.html#a78c012ca4694a4e0694735e48866be8d but we use it in several tutorials so users ask what it does.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11974
https://github.com/root-project/root/issues/11974:201,reliability,doe,does,201,Document TROOT::SetBatch; It's currently completely undocumented: https://root.cern/doc/master/classTROOT.html#a78c012ca4694a4e0694735e48866be8d but we use it in several tutorials so users ask what it does.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11974
https://github.com/root-project/root/issues/11974:41,safety,compl,completely,41,Document TROOT::SetBatch; It's currently completely undocumented: https://root.cern/doc/master/classTROOT.html#a78c012ca4694a4e0694735e48866be8d but we use it in several tutorials so users ask what it does.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11974
https://github.com/root-project/root/issues/11974:41,security,compl,completely,41,Document TROOT::SetBatch; It's currently completely undocumented: https://root.cern/doc/master/classTROOT.html#a78c012ca4694a4e0694735e48866be8d but we use it in several tutorials so users ask what it does.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11974
https://github.com/root-project/root/issues/11974:0,usability,Document,Document,0,Document TROOT::SetBatch; It's currently completely undocumented: https://root.cern/doc/master/classTROOT.html#a78c012ca4694a4e0694735e48866be8d but we use it in several tutorials so users ask what it does.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11974
https://github.com/root-project/root/issues/11974:52,usability,undo,undocumented,52,Document TROOT::SetBatch; It's currently completely undocumented: https://root.cern/doc/master/classTROOT.html#a78c012ca4694a4e0694735e48866be8d but we use it in several tutorials so users ask what it does.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11974
https://github.com/root-project/root/issues/11974:183,usability,user,users,183,Document TROOT::SetBatch; It's currently completely undocumented: https://root.cern/doc/master/classTROOT.html#a78c012ca4694a4e0694735e48866be8d but we use it in several tutorials so users ask what it does.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11974
https://github.com/root-project/root/issues/11977:714,availability,error,error,714,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:940,availability,failur,failures,940,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1157,availability,echo,echo,1157,"e). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1213,availability,echo,echo,1213,"l=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3161,availability,Operat,Operating,3161,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3236,availability,down,download,3236,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:804,deployability,build,build,804,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:940,deployability,fail,failures,940,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1346,deployability,version,version,1346,"nce ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1354,deployability,VERSION,VERSION,1354,"ue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1622,deployability,log,logon,1622,"er the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1632,deployability,log,logoff,1632,"cess is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-use",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1923,deployability,version,version,1923,"y some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1945,deployability,version,version,1945," ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2415,deployability,version,version,2415,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2429,deployability,Version,Version,2429,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2666,deployability,version,version,2666,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2789,deployability,Version,Version,2789,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2911,deployability,Version,Version,2911,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3033,deployability,Version,Version,3033,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3149,deployability,version,version,3149,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3218,deployability,instal,install,3218,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1346,integrability,version,version,1346,"nce ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1354,integrability,VERSION,VERSION,1354,"ue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1499,integrability,batch,batch,1499,"t status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1862,integrability,configur,configure,1862," status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1923,integrability,version,version,1923,"y some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1945,integrability,version,version,1945," ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2415,integrability,version,version,2415,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2429,integrability,Version,Version,2429,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2666,integrability,version,version,2666,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2789,integrability,Version,Version,2789,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2911,integrability,Version,Version,2911,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3033,integrability,Version,Version,3033,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3149,integrability,version,version,3149,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1649,interoperability,specif,specified,1649,"or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2073,interoperability,specif,specified,2073,"status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:771,modifiability,pac,package,771,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:779,modifiability,maintain,maintainer,779,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:895,modifiability,design decis,design decision,895,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1346,modifiability,version,version,1346,"nce ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1354,modifiability,VERSION,VERSION,1354,"ue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1862,modifiability,configur,configure,1862," status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1923,modifiability,version,version,1923,"y some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1945,modifiability,version,version,1945," ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2415,modifiability,version,version,2415,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2429,modifiability,Version,Version,2429,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2666,modifiability,version,version,2666,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2789,modifiability,Version,Version,2789,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2911,modifiability,Version,Version,2911,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3033,modifiability,Version,Version,3033,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3149,modifiability,version,version,3149,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:714,performance,error,error,714,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:940,performance,failur,failures,940,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1499,performance,batch,batch,1499,"t status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1708,performance,multi-thread,multi-threading,1708,"ror. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:724,reliability,doe,doesn,724,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:915,reliability,doe,does,915,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:940,reliability,fail,failures,940,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:714,safety,error,error,714,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:779,safety,maintain,maintainer,779,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:794,safety,test,tests,794,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1539,safety,except,exceptions,1539," [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1622,safety,log,logon,1622,"er the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1632,safety,log,logoff,1632,"cess is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-use",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1688,safety,safe,safety,1688,"ero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2114,safety,valid,valid,2114,"rn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1622,security,log,logon,1622,"er the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1632,security,log,logoff,1632,"cess is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-use",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1862,security,configur,configure,1862," status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2648,security,sandbox,sandbox,2648,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:794,testability,test,tests,794,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1622,testability,log,logon,1622,"er the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1632,testability,log,logoff,1632,"cess is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-use",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3290,testability,context,context,3290,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:3319,testability,context,context,3319,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:13,usability,statu,status,13,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:31,usability,help,help,31,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:429,usability,clear,clear,429,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:477,usability,behavi,behavior,477,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:504,usability,statu,status,504,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:522,usability,help,help,522,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:551,usability,statu,status,551,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:610,usability,indicat,indicates,610,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:714,usability,error,error,714,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:823,usability,help,help,823,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:868,usability,statu,status,868,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:884,usability,behavi,behavior,884,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:963,usability,behavi,behavior,963,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:981,usability,clear,clear,981,"Nonzero exit status of `root --help` ; - [X] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Displa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1056,usability,help,help,1056,"uplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Displ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1078,usability,statu,status,1078," search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specifie",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1151,usability,help,help,1151,"3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1168,usability,statu,status,1168,"ira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1207,usability,help,help,1207,"es/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1224,usability,statu,status,1224,"D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Exe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1336,usability,HELP,HELP,1336,"t, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The exit status of `root --help` is 1, not 0. The [exit status](https://en.wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1566,usability,command,command,1566,"wikipedia.org/wiki/Exit_status) usually indicates whether the process is successful or not. Zero means success, and non-zero values suggests an error. It doesn't affect any of the functionality, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1756,usability,command,command,1756,"ity, but a package maintainer who tests the build with `root --help` would be surprised by the nonzero exit status. Is this behavior a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-sourc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:1891,usability,help,help,1891,"a design decision, or does it imply some check failures? ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `root --help` exits with exit status 0. ### To Reproduce. 1. In a Bourn-like shell, run. ```sh. root --help; echo ""Exit status: $?"". ```. ```console. $ root --help; echo ""Exit status: $?"". usage: root. [-b B]. [-x X]. [-e E]. [-n N]. [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LX",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2277,usability,statu,status,2277,". [-t T]. [-q Q]. [-l L]. [-a A]. [-config CONFIG]. [-h HELP]. [--version VERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### A",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/issues/11977:2632,usability,user,user,2632,"ERSION]. [--notebook NOTEBOOK]. [--web WEB]. [--web=<browser> WEB=<BROWSER>]. [dir]. [file:data.root]. [file1.C...fileN.C]. OPTIONS:. -b Run in batch mode without graphics. -x Exit on exceptions. -e Execute the command passed between single quotes. -n Do not execute logon and logoff macros as specified in .rootrc. -t Enable thread-safety and implicit multi-threading (IMT). -q Exit after processing command line macro files. -l Do not show the ROOT banner. -a Show the ROOT splash screen. -config print ./configure options. -h, -?, --help Show summary of options. --version Show the ROOT version. --notebook Execute ROOT notebook. --web Display graphics in a default web browser. --web=<browser> Display graphics in specified web browser. [dir] if dir is a valid directory cd to it before executing. [file:data.root] Open the ROOT file data.root. [file1.C...fileN.C] Execute the the ROOT macro file1.C ... fileN.C. Exit status: 1. ```. ### Setup. This issue is reproducible on my laptop (x86_64 NixOS), LXPLUS7 LXPLUS8 and LXPLUS9. My laptop:. ```. $ root --version. ROOT Version: 6.26/08. Built for linuxx8664gcc on Jan 01 1980, 00:00:00. From @. $ nix-info -m. - system: `""x86_64-linux""`. - host os: `Linux 5.15.80, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`. - multi-user?: `yes`. - sandbox: `yes`. - version: `nix-env (Nix) 2.11.0`. - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`. ```. LXPLUS7:. ```. ROOT Version: 6.24/08. Built for linuxx8664gcc on Sep 29 2022, 13:04:57. From tags/v6-24-08@v6-24-08. ```. LXPLUS8:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. LXPLUS9:. ```. ROOT Version: 6.26/10. Built for linuxx8664gcc on Nov 16 2022, 10:42:54. From tags/v6-26-10@v6-26-10. ```. <!--. 1. ROOT version. 2. Operating system. 4. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11977
https://github.com/root-project/root/pull/11978:224,deployability,updat,updated,224,Return 0 when calling root --help; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11977. by @ShamrockLee . As well as a typo. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11978
https://github.com/root-project/root/pull/11978:194,safety,test,tested,194,Return 0 when calling root --help; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11977. by @ShamrockLee . As well as a typo. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11978
https://github.com/root-project/root/pull/11978:224,safety,updat,updated,224,Return 0 when calling root --help; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11977. by @ShamrockLee . As well as a typo. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11978
https://github.com/root-project/root/pull/11978:224,security,updat,updated,224,Return 0 when calling root --help; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11977. by @ShamrockLee . As well as a typo. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11978
https://github.com/root-project/root/pull/11978:194,testability,test,tested,194,Return 0 when calling root --help; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11977. by @ShamrockLee . As well as a typo. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11978
https://github.com/root-project/root/pull/11978:29,usability,help,help,29,Return 0 when calling root --help; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/11977. by @ShamrockLee . As well as a typo. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11978
https://github.com/root-project/root/pull/11979:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 2; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11969. 2. https://github.com/root-project/root/pull/11962. 3. https://github.com/root-project/root/pull/11970. 4. https://github.com/root-project/root/pull/11966. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11979
https://github.com/root-project/root/pull/11979:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 2; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11969. 2. https://github.com/root-project/root/pull/11962. 3. https://github.com/root-project/root/pull/11970. 4. https://github.com/root-project/root/pull/11966. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11979
https://github.com/root-project/root/pull/11979:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 2; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11969. 2. https://github.com/root-project/root/pull/11962. 3. https://github.com/root-project/root/pull/11970. 4. https://github.com/root-project/root/pull/11966. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11979
https://github.com/root-project/root/pull/11979:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 2; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11969. 2. https://github.com/root-project/root/pull/11962. 3. https://github.com/root-project/root/pull/11970. 4. https://github.com/root-project/root/pull/11966. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11979
https://github.com/root-project/root/pull/11979:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 2; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11969. 2. https://github.com/root-project/root/pull/11962. 3. https://github.com/root-project/root/pull/11970. 4. https://github.com/root-project/root/pull/11966. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11979
https://github.com/root-project/root/pull/11979:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 2; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11969. 2. https://github.com/root-project/root/pull/11962. 3. https://github.com/root-project/root/pull/11970. 4. https://github.com/root-project/root/pull/11966. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11979
https://github.com/root-project/root/pull/11981:100,energy efficiency,adapt,adaptor,100,"[RF] Remove `RooGenFunction` and `RooMultiGenFunction`; The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11981
https://github.com/root-project/root/pull/11981:100,integrability,adapt,adaptor,100,"[RF] Remove `RooGenFunction` and `RooMultiGenFunction`; The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11981
https://github.com/root-project/root/pull/11981:277,integrability,interfac,interfaces,277,"[RF] Remove `RooGenFunction` and `RooMultiGenFunction`; The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11981
https://github.com/root-project/root/pull/11981:100,interoperability,adapt,adaptor,100,"[RF] Remove `RooGenFunction` and `RooMultiGenFunction`; The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11981
https://github.com/root-project/root/pull/11981:277,interoperability,interfac,interfaces,277,"[RF] Remove `RooGenFunction` and `RooMultiGenFunction`; The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11981
https://github.com/root-project/root/pull/11981:100,modifiability,adapt,adaptor,100,"[RF] Remove `RooGenFunction` and `RooMultiGenFunction`; The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11981
https://github.com/root-project/root/pull/11981:277,modifiability,interfac,interfaces,277,"[RF] Remove `RooGenFunction` and `RooMultiGenFunction`; The `RooGenFunction` was only a lightweight adaptor that exports a RooAbsReal as a `ROOT::Math::IGenFunction`. The same can be easily achieved with the generic `ROOT::Math::Functor1D`, so in the spirit of not duplicating interfaces, the `RooGenFunction` is removed. The same goes for the `RooMultiGenFunction`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11981
https://github.com/root-project/root/pull/11982:39,modifiability,variab,variables,39,"[math] Do correctly the setting of fix variables in TLinearMinimizer; This PR fixes a problem in fixing the parameter when using the linear fitter. . This simple examples shows the problem (the fixed parameter is always the first one) instead of the second one. ```. {. auto h1 = new TH1D(""h1"",""h1"",20,0,10);. h1->FillRandom(""pol0"");. auto f1 = new TF1(""f1"",""pol1"");. f1->FixParameter(1,0);. h1->Fit(f1,"""");. }. ```. the bug is caused by `TLinearMinimizer::SetVariable` returning false instead of true. . The PR fixes also the counting of the total number of free parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11982
https://github.com/root-project/root/pull/11982:108,modifiability,paramet,parameter,108,"[math] Do correctly the setting of fix variables in TLinearMinimizer; This PR fixes a problem in fixing the parameter when using the linear fitter. . This simple examples shows the problem (the fixed parameter is always the first one) instead of the second one. ```. {. auto h1 = new TH1D(""h1"",""h1"",20,0,10);. h1->FillRandom(""pol0"");. auto f1 = new TF1(""f1"",""pol1"");. f1->FixParameter(1,0);. h1->Fit(f1,"""");. }. ```. the bug is caused by `TLinearMinimizer::SetVariable` returning false instead of true. . The PR fixes also the counting of the total number of free parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11982
https://github.com/root-project/root/pull/11982:200,modifiability,paramet,parameter,200,"[math] Do correctly the setting of fix variables in TLinearMinimizer; This PR fixes a problem in fixing the parameter when using the linear fitter. . This simple examples shows the problem (the fixed parameter is always the first one) instead of the second one. ```. {. auto h1 = new TH1D(""h1"",""h1"",20,0,10);. h1->FillRandom(""pol0"");. auto f1 = new TF1(""f1"",""pol1"");. f1->FixParameter(1,0);. h1->Fit(f1,"""");. }. ```. the bug is caused by `TLinearMinimizer::SetVariable` returning false instead of true. . The PR fixes also the counting of the total number of free parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11982
https://github.com/root-project/root/pull/11982:564,modifiability,paramet,parameters,564,"[math] Do correctly the setting of fix variables in TLinearMinimizer; This PR fixes a problem in fixing the parameter when using the linear fitter. . This simple examples shows the problem (the fixed parameter is always the first one) instead of the second one. ```. {. auto h1 = new TH1D(""h1"",""h1"",20,0,10);. h1->FillRandom(""pol0"");. auto f1 = new TF1(""f1"",""pol1"");. f1->FixParameter(1,0);. h1->Fit(f1,"""");. }. ```. the bug is caused by `TLinearMinimizer::SetVariable` returning false instead of true. . The PR fixes also the counting of the total number of free parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11982
https://github.com/root-project/root/pull/11982:155,testability,simpl,simple,155,"[math] Do correctly the setting of fix variables in TLinearMinimizer; This PR fixes a problem in fixing the parameter when using the linear fitter. . This simple examples shows the problem (the fixed parameter is always the first one) instead of the second one. ```. {. auto h1 = new TH1D(""h1"",""h1"",20,0,10);. h1->FillRandom(""pol0"");. auto f1 = new TF1(""f1"",""pol1"");. f1->FixParameter(1,0);. h1->Fit(f1,"""");. }. ```. the bug is caused by `TLinearMinimizer::SetVariable` returning false instead of true. . The PR fixes also the counting of the total number of free parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11982
https://github.com/root-project/root/pull/11982:155,usability,simpl,simple,155,"[math] Do correctly the setting of fix variables in TLinearMinimizer; This PR fixes a problem in fixing the parameter when using the linear fitter. . This simple examples shows the problem (the fixed parameter is always the first one) instead of the second one. ```. {. auto h1 = new TH1D(""h1"",""h1"",20,0,10);. h1->FillRandom(""pol0"");. auto f1 = new TF1(""f1"",""pol1"");. f1->FixParameter(1,0);. h1->Fit(f1,"""");. }. ```. the bug is caused by `TLinearMinimizer::SetVariable` returning false instead of true. . The PR fixes also the counting of the total number of free parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11982
https://github.com/root-project/root/pull/11983:232,availability,redund,redundant,232,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:232,deployability,redundan,redundant,232,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:385,integrability,interfac,interfaces,385,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:29,interoperability,Bind,Binding,29,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:65,interoperability,Bind,Binding,65,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:110,interoperability,bind,bindFunction,110,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:139,interoperability,bind,bindPdf,139,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:385,interoperability,interfac,interfaces,385,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:29,modifiability,Bind,Binding,29,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:65,modifiability,Bind,Binding,65,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:110,modifiability,bind,bindFunction,110,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:139,modifiability,bind,bindPdf,139,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:385,modifiability,interfac,interfaces,385,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:232,reliability,redundan,redundant,232,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:232,safety,redund,redundant,232,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:366,safety,avoid,avoiding,366,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11983:400,usability,user,user,400,[RF] Deprecate `RooCFunction*Binding` classes; The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11983
https://github.com/root-project/root/pull/11984:141,availability,Error,Errors,141,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:565,availability,error,errors,565,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:79,deployability,build,build,79,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:153,deployability,build,build,153,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:159,deployability,log,log,159,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:473,deployability,build,builds,473,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:643,deployability,updat,updated,643,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:279,interoperability,conflict,conflicting,279,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:98,modifiability,paramet,parameters,98,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:301,modifiability,paramet,parameter,301,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:581,modifiability,scenario,scenarios,581,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:141,performance,Error,Errors,141,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:565,performance,error,errors,565,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:439,reliability,doe,doesn,439,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:5,safety,Prevent,Prevent,5,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:13,safety,accid,accidental,13,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:141,safety,Error,Errors,141,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:159,safety,log,log,159,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:545,safety,prevent,prevent,545,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:565,safety,error,errors,565,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:613,safety,test,tested,613,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:643,safety,updat,updated,643,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:5,security,Preven,Prevent,5,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:159,security,log,log,159,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:545,security,preven,prevent,545,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:643,security,updat,updated,643,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:159,testability,log,log,159,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:613,testability,test,tested,613,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:141,usability,Error,Errors,141,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11984:565,usability,error,errors,565,"[RF] Prevent accidental casting from `double` to `int` in xroofit; On the Snap build of ROOT, the parameters were assumed to be int, double. Errors from build log, running Ubuntu 20.04 GCC9 C++17. ```. /root/parts/root/src/roofit/xroofit/src/xRooNode.cxx:5778:105: note: deduced conflicting types for parameter ‘const _Tp’ (‘int’ and ‘double’). 5778 | : (h->GetBinContent(1) + std::max(abs(h->GetBinContent(1) * 0.1), 50.)));. ```. . This doesn't appear to occur in normal builds, but the guard code seems trivial enough to include and this may prevent compilation errors in other scenarios. ## Checklist:. - [Y] tested changes locally. - [Y] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11984
https://github.com/root-project/root/pull/11985:20,availability,error,error,20,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:399,availability,error,error,399,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:586,energy efficiency,model,model,586,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:244,modifiability,paramet,parameter,244,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:324,modifiability,paramet,parameter,324,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:20,performance,error,error,20,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:399,performance,error,error,399,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:596,reliability,doe,doesn,596,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:20,safety,error,error,20,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:71,safety,test,test,71,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:133,safety,test,test,133,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:345,safety,accid,accidentally,345,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:399,safety,error,error,399,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:478,safety,test,test,478,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:628,safety,test,test,628,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:586,security,model,model,586,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:71,testability,test,test,71,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:133,testability,test,test,133,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:478,testability,test,test,478,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:628,testability,test,test,628,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:20,usability,error,error,20,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:205,usability,clear,clearly,205,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11985:399,usability,error,error,399,"[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test; In the `rf205` tutorial and the associated stressRooFit test, the `bkg` RooAddPdf was created using the `sig1frac`, while it is clearly the idea to use the `bkg1frac` parameter. This is fixed in this commit, also fixing the name of the `bkg1frac` parameter, which was accidentally set to `sig1frac` (probably a copy-paste error). However, to not change the output of the tutorial and the stressRooFit test, the value of `bkg1frac` was set to the same value as `sig1frac`, such that this commit only fixes the model but doesn't change the tutorial and test output.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11985
https://github.com/root-project/root/pull/11986:250,safety,avoid,avoid,250,"[RF] Use `std::abs` all the way in RooFit; As noted in d0088608, using `abs()` without `std::` can be very dangerous because there might be no overload for floating point numbers. To make sure that no bugs associated to this can happen, I suggest to avoid using `abs()` without `std::` all the way in RooFit. Also, to go with modern C++ all the way, the occurences of `fabs()` and `std::fabs()` are also replaced with `std::abs()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11986
https://github.com/root-project/root/issues/11987:22,deployability,fail,fails,22,"New importer tutorial fails to run a second time; https://github.com/root-project/root/pull/11825 added a new importer tutorial, `tutorials/v7/ntuple/ntpl008_import.C`. As far as I can tell, this tutorial fails to run a second time:. ```. Processing /home/jhahnfel/ROOT/src/tutorials/v7/ntuple/ntpl008_import.C... terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. At:. ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::Import() [/home/jhahnfel/ROOT/src/tree/ntupleutil/v7/src/RNTupleImporter.cxx:293]. ```. This is a bit annoying for incremental `ctest` runs, can this be improved? Can we delete the imported file `ntpl008_import.root` at the end of the tutorial, or even better, at the start?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11987
https://github.com/root-project/root/issues/11987:205,deployability,fail,fails,205,"New importer tutorial fails to run a second time; https://github.com/root-project/root/pull/11825 added a new importer tutorial, `tutorials/v7/ntuple/ntpl008_import.C`. As far as I can tell, this tutorial fails to run a second time:. ```. Processing /home/jhahnfel/ROOT/src/tutorials/v7/ntuple/ntpl008_import.C... terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. At:. ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::Import() [/home/jhahnfel/ROOT/src/tree/ntupleutil/v7/src/RNTupleImporter.cxx:293]. ```. This is a bit annoying for incremental `ctest` runs, can this be improved? Can we delete the imported file `ntpl008_import.root` at the end of the tutorial, or even better, at the start?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11987
https://github.com/root-project/root/issues/11987:408,integrability,Event,Events,408,"New importer tutorial fails to run a second time; https://github.com/root-project/root/pull/11825 added a new importer tutorial, `tutorials/v7/ntuple/ntpl008_import.C`. As far as I can tell, this tutorial fails to run a second time:. ```. Processing /home/jhahnfel/ROOT/src/tutorials/v7/ntuple/ntpl008_import.C... terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. At:. ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::Import() [/home/jhahnfel/ROOT/src/tree/ntupleutil/v7/src/RNTupleImporter.cxx:293]. ```. This is a bit annoying for incremental `ctest` runs, can this be improved? Can we delete the imported file `ntpl008_import.root` at the end of the tutorial, or even better, at the start?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11987
https://github.com/root-project/root/issues/11987:44,performance,time,time,44,"New importer tutorial fails to run a second time; https://github.com/root-project/root/pull/11825 added a new importer tutorial, `tutorials/v7/ntuple/ntpl008_import.C`. As far as I can tell, this tutorial fails to run a second time:. ```. Processing /home/jhahnfel/ROOT/src/tutorials/v7/ntuple/ntpl008_import.C... terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. At:. ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::Import() [/home/jhahnfel/ROOT/src/tree/ntupleutil/v7/src/RNTupleImporter.cxx:293]. ```. This is a bit annoying for incremental `ctest` runs, can this be improved? Can we delete the imported file `ntpl008_import.root` at the end of the tutorial, or even better, at the start?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11987
https://github.com/root-project/root/issues/11987:227,performance,time,time,227,"New importer tutorial fails to run a second time; https://github.com/root-project/root/pull/11825 added a new importer tutorial, `tutorials/v7/ntuple/ntpl008_import.C`. As far as I can tell, this tutorial fails to run a second time:. ```. Processing /home/jhahnfel/ROOT/src/tutorials/v7/ntuple/ntpl008_import.C... terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. At:. ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::Import() [/home/jhahnfel/ROOT/src/tree/ntupleutil/v7/src/RNTupleImporter.cxx:293]. ```. This is a bit annoying for incremental `ctest` runs, can this be improved? Can we delete the imported file `ntpl008_import.root` at the end of the tutorial, or even better, at the start?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11987
https://github.com/root-project/root/issues/11987:22,reliability,fail,fails,22,"New importer tutorial fails to run a second time; https://github.com/root-project/root/pull/11825 added a new importer tutorial, `tutorials/v7/ntuple/ntpl008_import.C`. As far as I can tell, this tutorial fails to run a second time:. ```. Processing /home/jhahnfel/ROOT/src/tutorials/v7/ntuple/ntpl008_import.C... terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. At:. ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::Import() [/home/jhahnfel/ROOT/src/tree/ntupleutil/v7/src/RNTupleImporter.cxx:293]. ```. This is a bit annoying for incremental `ctest` runs, can this be improved? Can we delete the imported file `ntpl008_import.root` at the end of the tutorial, or even better, at the start?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11987
https://github.com/root-project/root/issues/11987:205,reliability,fail,fails,205,"New importer tutorial fails to run a second time; https://github.com/root-project/root/pull/11825 added a new importer tutorial, `tutorials/v7/ntuple/ntpl008_import.C`. As far as I can tell, this tutorial fails to run a second time:. ```. Processing /home/jhahnfel/ROOT/src/tutorials/v7/ntuple/ntpl008_import.C... terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. At:. ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::Import() [/home/jhahnfel/ROOT/src/tree/ntupleutil/v7/src/RNTupleImporter.cxx:293]. ```. This is a bit annoying for incremental `ctest` runs, can this be improved? Can we delete the imported file `ntpl008_import.root` at the end of the tutorial, or even better, at the start?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11987
https://github.com/root-project/root/pull/11988:5,safety,Compl,Completely,5,"[RF] Completely implement `Offset(""bin"")` feature for fits to RooDataHist; More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11988
https://github.com/root-project/root/pull/11988:5,security,Compl,Completely,5,"[RF] Completely implement `Offset(""bin"")` feature for fits to RooDataHist; More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11988
https://github.com/root-project/root/pull/11989:139,deployability,fail,fail,139,[ntuple] Fix tutorial `ntpl008_import.C`; RNTupleImporter appends keys to the output file; make sure a second run of the tutorial does not fail with. ```. terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. ```. by removing the output file. This PR fixes #11987.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11989
https://github.com/root-project/root/pull/11989:249,integrability,Event,Events,249,[ntuple] Fix tutorial `ntpl008_import.C`; RNTupleImporter appends keys to the output file; make sure a second run of the tutorial does not fail with. ```. terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. ```. by removing the output file. This PR fixes #11987.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11989
https://github.com/root-project/root/pull/11989:130,reliability,doe,does,130,[ntuple] Fix tutorial `ntpl008_import.C`; RNTupleImporter appends keys to the output file; make sure a second run of the tutorial does not fail with. ```. terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. ```. by removing the output file. This PR fixes #11987.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11989
https://github.com/root-project/root/pull/11989:139,reliability,fail,fail,139,[ntuple] Fix tutorial `ntpl008_import.C`; RNTupleImporter appends keys to the output file; make sure a second run of the tutorial does not fail with. ```. terminate called after throwing an instance of 'ROOT::Experimental::RException'. what(): Key 'Events' already exists in file ntpl008_import.root. ```. by removing the output file. This PR fixes #11987.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11989
https://github.com/root-project/root/pull/11990:248,deployability,build,build,248,"[RF] Remove RooFormula code for gcc <= 4.8; The code behind `#ifndef ROOFORMULA_HAVE_STD_REGEX` in `RooFormula.cxx` can be removed, because gcc 4.8 is effectively not supported anymore since the switch to switch to C++14 as the minimum standard to build ROOT. At this point, `std::regex` probably also works with visual studio, so the `#ifndef _MSC_VER` check can probably be removed in the same go. Not having separate codes for different compilers means there is less room for bugs, like #11992.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11990
https://github.com/root-project/root/pull/11990:236,interoperability,standard,standard,236,"[RF] Remove RooFormula code for gcc <= 4.8; The code behind `#ifndef ROOFORMULA_HAVE_STD_REGEX` in `RooFormula.cxx` can be removed, because gcc 4.8 is effectively not supported anymore since the switch to switch to C++14 as the minimum standard to build ROOT. At this point, `std::regex` probably also works with visual studio, so the `#ifndef _MSC_VER` check can probably be removed in the same go. Not having separate codes for different compilers means there is less room for bugs, like #11992.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11990
https://github.com/root-project/root/pull/11990:151,usability,effectiv,effectively,151,"[RF] Remove RooFormula code for gcc <= 4.8; The code behind `#ifndef ROOFORMULA_HAVE_STD_REGEX` in `RooFormula.cxx` can be removed, because gcc 4.8 is effectively not supported anymore since the switch to switch to C++14 as the minimum standard to build ROOT. At this point, `std::regex` probably also works with visual studio, so the `#ifndef _MSC_VER` check can probably be removed in the same go. Not having separate codes for different compilers means there is less room for bugs, like #11992.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11990
https://github.com/root-project/root/pull/11990:167,usability,support,supported,167,"[RF] Remove RooFormula code for gcc <= 4.8; The code behind `#ifndef ROOFORMULA_HAVE_STD_REGEX` in `RooFormula.cxx` can be removed, because gcc 4.8 is effectively not supported anymore since the switch to switch to C++14 as the minimum standard to build ROOT. At this point, `std::regex` probably also works with visual studio, so the `#ifndef _MSC_VER` check can probably be removed in the same go. Not having separate codes for different compilers means there is less room for bugs, like #11992.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11990
https://github.com/root-project/root/pull/11990:228,usability,minim,minimum,228,"[RF] Remove RooFormula code for gcc <= 4.8; The code behind `#ifndef ROOFORMULA_HAVE_STD_REGEX` in `RooFormula.cxx` can be removed, because gcc 4.8 is effectively not supported anymore since the switch to switch to C++14 as the minimum standard to build ROOT. At this point, `std::regex` probably also works with visual studio, so the `#ifndef _MSC_VER` check can probably be removed in the same go. Not having separate codes for different compilers means there is less room for bugs, like #11992.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11990
https://github.com/root-project/root/pull/11990:313,usability,visual,visual,313,"[RF] Remove RooFormula code for gcc <= 4.8; The code behind `#ifndef ROOFORMULA_HAVE_STD_REGEX` in `RooFormula.cxx` can be removed, because gcc 4.8 is effectively not supported anymore since the switch to switch to C++14 as the minimum standard to build ROOT. At this point, `std::regex` probably also works with visual studio, so the `#ifndef _MSC_VER` check can probably be removed in the same go. Not having separate codes for different compilers means there is less room for bugs, like #11992.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11990
https://github.com/root-project/root/pull/11991:95,availability,slo,slow,95,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:188,deployability,build,build,188,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:202,deployability,build,build,202,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:442,deployability,updat,updated,442,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:223,performance,time,time,223,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:95,reliability,slo,slow,95,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:228,reliability,doe,does,228,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:412,safety,test,tested,412,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:442,safety,updat,updated,442,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:442,security,updat,updated,442,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:21,testability,assert,assertions,21,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:59,testability,verif,verifyPreservedAnalysis,59,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:129,testability,assert,assertions,129,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:335,testability,assert,asserts,335,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/pull/11991:412,testability,test,tested,412,"[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:; `verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11991
https://github.com/root-project/root/issues/11992:1790,availability,Operat,Operating,1790,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1865,availability,down,download,1865,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:845,deployability,contain,containing,845,"[RF] RooFormulaVar is too eager in variable name substitution; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1647,deployability,build,build,1647,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1778,deployability,version,version,1778,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1847,deployability,instal,install,1847,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:49,integrability,sub,substitution,49,"[RF] RooFormulaVar is too eager in variable name substitution; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1778,integrability,version,version,1778,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:35,modifiability,variab,variable,35,"[RF] RooFormulaVar is too eager in variable name substitution; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:727,modifiability,paramet,parameter,727,"[RF] RooFormulaVar is too eager in variable name substitution; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1293,modifiability,variab,variables,1293,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1778,modifiability,version,version,1778,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1601,safety,input,input,1601,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1952,testability,context,context,1952,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1981,testability,context,context,1981,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:453,usability,clear,clear,453,"[RF] RooFormulaVar is too eager in variable name substitution; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:501,usability,behavi,behavior,501,"[RF] RooFormulaVar is too eager in variable name substitution; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1204,usability,behavi,behavior,1204,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1222,usability,clear,clear,1222,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1456,usability,behavi,behavior,1456,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/issues/11992:1601,usability,input,input,1601,"ect/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. When passing a argument to a formula based RooFit function (e.g. `RooFormulaVar` or `RooGenericPdf`), RooFit will search for all occurrences of the object name in the formula and replace them with an ordinal parameter (needed for the underling `TFormula`). However, when the argument is a `RooConst` the name is just a string containing the value and this can break if there are numeric literals inside the formula. For example. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. becomes inside the `TFormula`. ```. x[0].7*x[0]. ```. because the name 2 of the `RooConst` matched the 2 of the numeric literal. This of course breaks during formula compilation. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The variables do not replace numeric literals no matter the name. Possibly `RooConst`s should be matched only by index? ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```. RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.)). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. HEAD of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->. `RooFormulaVar f(""f"", ""2.7*@0"", RooFit::RooConst(2.7))` creates `x[0]*x[0]`, which is mostly fine but may break if servers are redirected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11992
https://github.com/root-project/root/pull/11993:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 3; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11984. 2. https://github.com/root-project/root/pull/11986. 3. https://github.com/root-project/root/pull/11841. 4. https://github.com/root-project/root/pull/11985. 5. https://github.com/root-project/root/pull/11988. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11993
https://github.com/root-project/root/pull/11993:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 3; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11984. 2. https://github.com/root-project/root/pull/11986. 3. https://github.com/root-project/root/pull/11841. 4. https://github.com/root-project/root/pull/11985. 5. https://github.com/root-project/root/pull/11988. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11993
https://github.com/root-project/root/pull/11993:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 3; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11984. 2. https://github.com/root-project/root/pull/11986. 3. https://github.com/root-project/root/pull/11841. 4. https://github.com/root-project/root/pull/11985. 5. https://github.com/root-project/root/pull/11988. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11993
https://github.com/root-project/root/pull/11993:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 3; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11984. 2. https://github.com/root-project/root/pull/11986. 3. https://github.com/root-project/root/pull/11841. 4. https://github.com/root-project/root/pull/11985. 5. https://github.com/root-project/root/pull/11988. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11993
https://github.com/root-project/root/pull/11993:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 3; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11984. 2. https://github.com/root-project/root/pull/11986. 3. https://github.com/root-project/root/pull/11841. 4. https://github.com/root-project/root/pull/11985. 5. https://github.com/root-project/root/pull/11988. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11993
https://github.com/root-project/root/pull/11993:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 3; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11984. 2. https://github.com/root-project/root/pull/11986. 3. https://github.com/root-project/root/pull/11841. 4. https://github.com/root-project/root/pull/11985. 5. https://github.com/root-project/root/pull/11988. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11993
https://github.com/root-project/root/pull/11994:257,deployability,build,build,257,"[DF] Remove deprecated functions marked for removal in v6.30; This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. . ```. .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]. .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]. ```. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11994
https://github.com/root-project/root/pull/11994:375,deployability,build,build,375,"[DF] Remove deprecated functions marked for removal in v6.30; This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. . ```. .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]. .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]. ```. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11994
https://github.com/root-project/root/pull/11994:547,deployability,updat,updated,547,"[DF] Remove deprecated functions marked for removal in v6.30; This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. . ```. .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]. .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]. ```. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11994
https://github.com/root-project/root/pull/11994:517,safety,test,tested,517,"[DF] Remove deprecated functions marked for removal in v6.30; This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. . ```. .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]. .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]. ```. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11994
https://github.com/root-project/root/pull/11994:547,safety,updat,updated,547,"[DF] Remove deprecated functions marked for removal in v6.30; This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. . ```. .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]. .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]. ```. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11994
https://github.com/root-project/root/pull/11994:547,security,updat,updated,547,"[DF] Remove deprecated functions marked for removal in v6.30; This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. . ```. .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]. .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]. ```. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11994
https://github.com/root-project/root/pull/11994:517,testability,test,tested,517,"[DF] Remove deprecated functions marked for removal in v6.30; This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. . ```. .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]. .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]. ```. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11994
https://github.com/root-project/root/pull/11995:44,safety,test,tests,44,[RF] More improvements to `roofitcore` unit tests; More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11995
https://github.com/root-project/root/pull/11995:39,testability,unit,unit,39,[RF] More improvements to `roofitcore` unit tests; More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11995
https://github.com/root-project/root/pull/11995:44,testability,test,tests,44,[RF] More improvements to `roofitcore` unit tests; More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11995
https://github.com/root-project/root/pull/11996:181,energy efficiency,current,currently,181,"[ntuple] Add inspector utility class; This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. - [x] Add unit tests. - [x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11996
https://github.com/root-project/root/pull/11996:115,modifiability,pac,package,115,"[ntuple] Add inspector utility class; This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. - [x] Add unit tests. - [x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11996
https://github.com/root-project/root/pull/11996:465,safety,test,tests,465,"[ntuple] Add inspector utility class; This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. - [x] Add unit tests. - [x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11996
https://github.com/root-project/root/pull/11996:460,testability,unit,unit,460,"[ntuple] Add inspector utility class; This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. - [x] Add unit tests. - [x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11996
https://github.com/root-project/root/pull/11996:465,testability,test,tests,465,"[ntuple] Add inspector utility class; This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. - [x] Add unit tests. - [x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11996
https://github.com/root-project/root/pull/11996:407,usability,visual,visualize,407,"[ntuple] Add inspector utility class; This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. - [x] Add unit tests. - [x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11996
https://github.com/root-project/root/pull/11996:488,usability,document,documentation,488,"[ntuple] Add inspector utility class; This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. - [x] Add unit tests. - [x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11996
https://github.com/root-project/root/pull/11997:198,availability,sla,slab,198,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:62,deployability,manag,manager,62,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:62,energy efficiency,manag,manager,62,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:203,energy efficiency,alloc,allocation,203,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:419,interoperability,plug,plugins,419,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:55,performance,memor,memory,55,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:106,performance,memor,memory,106,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:193,reliability,doe,does,193,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:198,reliability,sla,slab,198,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:62,safety,manag,manager,62,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:88,safety,avoid,avoid,88,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:265,safety,except,exception,265,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:23,usability,support,support,23,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:48,usability,custom,custom,48,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:55,usability,memor,memory,55,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:106,usability,memor,memory,106,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:284,usability,support,support,284,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11997:326,usability,support,support,326,"[cling] Add back basic support for JITLink; The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is. needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11997
https://github.com/root-project/root/pull/11998:74,safety,review,reviewer,74,Set jblomer as code owner for ntupleutil; This should set me as a default reviewer for changes in tree/ntupleutil,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11998
https://github.com/root-project/root/pull/11998:74,testability,review,reviewer,74,Set jblomer as code owner for ntupleutil; This should set me as a default reviewer for changes in tree/ntupleutil,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11998
https://github.com/root-project/root/pull/11999:148,availability,toler,tolerances,148,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:426,availability,consist,consistently,426,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:761,availability,redund,redundant,761,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:761,deployability,redundan,redundant,761,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:443,energy efficiency,predict,predictably,443,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:643,integrability,interfac,interface,643,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:204,interoperability,specif,specific,204,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:557,interoperability,compatib,compatibility,557,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:643,interoperability,interfac,interface,643,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:643,modifiability,interfac,interface,643,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:148,reliability,toleran,tolerances,148,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:761,reliability,redundan,redundant,761,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:443,safety,predict,predictably,443,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:761,safety,redund,redundant,761,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:806,testability,simpl,simply,806,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:426,usability,consist,consistently,426,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:531,usability,document,documented,531,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:586,usability,custom,custom,586,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/11999:806,usability,simpl,simply,806,"[RF] Make margin in `RooAbsRealLValue::inRange()` zero by default ; The different overloads of `RooAbsRealLValue::inRange()` implemented. different tolerances when checking if a value `x` falls inside a. specific range. Some overloads checked if the interval. `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload. checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit. suggests to leave out these epsilon margins that were never documented. For backwards compatibility, one can set a custom relative or absolute. epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were. removed. They were mathematically redundant, since in RooFit, +/-. infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:. ```C++. RooRealVar x{""x"", ""x"", 1e-6, 2e-6};. RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;. std::cout << y.inRange(0.0, nullptr) << std::endl;. // both checks will return true without this PR! ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11999
https://github.com/root-project/root/pull/12001:489,deployability,updat,updated,489,[RF] Added offsetting to `RooAbsPdf::fitTo`; # This Pull request:. ## Changes or fixes:. Adds offsetting named argument to `RooAbsPdf::fitTo()` as requested in #11856. I have decided to use the naming convention for the named argument options that was already present in `RooAbsPdf::CreateNLL()` to avoid confusion and for the potential case that the other named argument options in the latter will also be added to `RooAbsPdf::fitTo()`. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12001
https://github.com/root-project/root/pull/12001:299,safety,avoid,avoid,299,[RF] Added offsetting to `RooAbsPdf::fitTo`; # This Pull request:. ## Changes or fixes:. Adds offsetting named argument to `RooAbsPdf::fitTo()` as requested in #11856. I have decided to use the naming convention for the named argument options that was already present in `RooAbsPdf::CreateNLL()` to avoid confusion and for the potential case that the other named argument options in the latter will also be added to `RooAbsPdf::fitTo()`. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12001
https://github.com/root-project/root/pull/12001:459,safety,test,tested,459,[RF] Added offsetting to `RooAbsPdf::fitTo`; # This Pull request:. ## Changes or fixes:. Adds offsetting named argument to `RooAbsPdf::fitTo()` as requested in #11856. I have decided to use the naming convention for the named argument options that was already present in `RooAbsPdf::CreateNLL()` to avoid confusion and for the potential case that the other named argument options in the latter will also be added to `RooAbsPdf::fitTo()`. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12001
https://github.com/root-project/root/pull/12001:489,safety,updat,updated,489,[RF] Added offsetting to `RooAbsPdf::fitTo`; # This Pull request:. ## Changes or fixes:. Adds offsetting named argument to `RooAbsPdf::fitTo()` as requested in #11856. I have decided to use the naming convention for the named argument options that was already present in `RooAbsPdf::CreateNLL()` to avoid confusion and for the potential case that the other named argument options in the latter will also be added to `RooAbsPdf::fitTo()`. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12001
https://github.com/root-project/root/pull/12001:489,security,updat,updated,489,[RF] Added offsetting to `RooAbsPdf::fitTo`; # This Pull request:. ## Changes or fixes:. Adds offsetting named argument to `RooAbsPdf::fitTo()` as requested in #11856. I have decided to use the naming convention for the named argument options that was already present in `RooAbsPdf::CreateNLL()` to avoid confusion and for the potential case that the other named argument options in the latter will also be added to `RooAbsPdf::fitTo()`. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12001
https://github.com/root-project/root/pull/12001:459,testability,test,tested,459,[RF] Added offsetting to `RooAbsPdf::fitTo`; # This Pull request:. ## Changes or fixes:. Adds offsetting named argument to `RooAbsPdf::fitTo()` as requested in #11856. I have decided to use the naming convention for the named argument options that was already present in `RooAbsPdf::CreateNLL()` to avoid confusion and for the potential case that the other named argument options in the latter will also be added to `RooAbsPdf::fitTo()`. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12001
https://github.com/root-project/root/pull/12002:14,deployability,depend,depending,14,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:14,integrability,depend,depending,14,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:27,interoperability,xml,xml,27,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:36,interoperability,xml,xml,36,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:123,interoperability,xml,xml,123,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:14,modifiability,depend,depending,14,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:8,safety,test,tests,8,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:14,safety,depend,depending,14,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:70,safety,test,tests,70,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:8,testability,test,tests,8,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:14,testability,depend,depending,14,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/pull/12002:70,testability,test,tests,70,Disable tests depending on xml when xml is not found; Disable several tests who are using `hist2workspace` (which requires xml) when `ROOT_xml_FOUND` is not set,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12002
https://github.com/root-project/root/issues/12003:586,availability,error,error,586,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:36,deployability,modul,modules,36,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:56,deployability,build,build,56,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:87,deployability,upgrad,upgrade,87,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:448,deployability,fail,fail,448,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:467,deployability,modul,module,467,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:740,deployability,modul,modules,740,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:680,energy efficiency,alloc,allocator,680,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:36,modifiability,modul,modules,36,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:87,modifiability,upgrad,upgrade,87,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:467,modifiability,modul,module,467,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:740,modifiability,modul,modules,740,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:586,performance,error,error,586,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:448,reliability,fail,fail,448,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:36,safety,modul,modules,36,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:115,safety,test,tests,115,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:236,safety,compl,complex,236,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:312,safety,compl,complex,312,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:467,safety,modul,module,467,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:586,safety,error,error,586,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:740,safety,modul,modules,740,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:236,security,compl,complex,236,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:312,security,compl,complex,312,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:115,testability,test,tests,115,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:530,usability,Command,CommandLineTools,530,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:586,usability,error,error,586,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12003:893,usability,Command,CommandLineTools,893,"""different definitions in different modules"" with C++17 build on macOS; Since the LLVM upgrade, the following four tests:. ```. projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend. projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex. projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex. projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names. ```. fail with. ```. In module 'std' imported from input_line_1:1:. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^. /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class. struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,. ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12003
https://github.com/root-project/root/issues/12006:1569,availability,error,error,1569,"roottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1590,availability,operat,operator,1590," -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanS",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1758,availability,toler,toleranceCompare,1758,"pythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2047,availability,error,error,2047,"est.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2068,availability,operat,operator,2068,"cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2235,availability,toler,toleranceCompare,2235,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2524,availability,error,error,2524,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2545,availability,operat,operator,2545,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2717,availability,toler,toleranceCompare,2717,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:3039,availability,Operat,Operating,3039,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:3114,availability,down,download,3114,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:984,deployability,build,build,984,"current master doesn't compile; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. ```. cmake ../src -DCMAKE_BUILD_TYPE=RelWithDebInfo -Droofit=on -Dmysql=off -Dpgsql=off -Droostats=on -Dfortran=off -Dhistfactory=on -Dtmva=on -Dminuit2=on -Droottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:3027,deployability,version,version,3027,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:3096,deployability,instal,install,3096,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:0,energy efficiency,current,current,0,"current master doesn't compile; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. ```. cmake ../src -DCMAKE_BUILD_TYPE=RelWithDebInfo -Droofit=on -Dmysql=off -Dpgsql=off -Droostats=on -Dfortran=off -Dhistfactory=on -Dtmva=on -Dminuit2=on -Droottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1780,integrability,Batch,Batch,1780,"hia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2257,integrability,Batch,Batch,2257,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2767,integrability,batch,batch,2767,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:3027,integrability,version,version,3027,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2744,interoperability,standard,standard,2744,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2784,modifiability,scal,scalar,2784,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:3027,modifiability,version,version,3027,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1569,performance,error,error,1569,"roottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1780,performance,Batch,Batch,1780,"hia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2047,performance,error,error,2047,"est.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2257,performance,Batch,Batch,2257,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2524,performance,error,error,2524,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2767,performance,batch,batch,2767,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:15,reliability,doe,doesn,15,"current master doesn't compile; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. ```. cmake ../src -DCMAKE_BUILD_TYPE=RelWithDebInfo -Droofit=on -Dmysql=off -Dpgsql=off -Droostats=on -Dfortran=off -Dhistfactory=on -Dtmva=on -Dminuit2=on -Droottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1758,reliability,toleran,toleranceCompare,1758,"pythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2235,reliability,toleran,toleranceCompare,2235,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2717,reliability,toleran,toleranceCompare,2717,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1569,safety,error,error,1569,"roottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2047,safety,error,error,2047,"est.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2524,safety,error,error,2524,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:1569,usability,error,error,1569,"roottest=on -Droot7=on -Dtesting=on -Dbuiltin_llvm=on -Dbuiltin_tbb=off -Dbuiltin_nlohmannjson=on -DCMAKE_CXX_STANDARD=17 -DPYTHON_EXECUTABLE=$(which python) -Dfail-on-missing=on -Doracle=off -Dpythia6=off -Dpythia8=off -Dgfal=off -Dvdt=off -Ddavix=off -Droofit_multiprocess=ON -Droofit_hs3_yml=ON -DCMAKE_PREFIX_PATH=/home/cburgard/Physics/root/zmq . ```. ```. In file included from /home/cburgard/Physics/root/build/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2047,usability,error,error,2047,"est.h:67,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12006:2524,usability,error,error,2524,"Tests.h:22,. from /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:17:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx: In member function ‘void PDFTest::compareFixedValues(double&, bool, bool, bool, unsigned int)’:. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:355:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 355 | EXPECT_GT(sumDiffs/outputsScalar.size(), -toleranceCompare) << ""Batch outputs biased towards negative."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:356:21: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 356 | EXPECT_LT(sumDiffs/outputsScalar.size(), toleranceCompare) << ""Batch outputs biased towards positive."";. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. /home/cburgard/Physics/root/src/roottest/root/roofitstats/vectorisedPDFs/VectorisedPDFTests.cxx:357:25: error: no match for ‘operator/’ (operand types are ‘ROOT::Math::KahanSum<>’ and ‘std::vector<double>::size_type’ {aka ‘long unsigned int’}). 357 | EXPECT_LT(sqrt(sumVars/outputsScalar.size()), toleranceCompare) << ""High standard deviation for batch results vs scalar."";. | ~~~~~~~^~~~~~~~~~~~~~~~~~~~~. | | |. | ROOT::Math::KahanSum<> std::vector<double>::size_type {aka long unsigned int}. ```. ### Setup. commit 92c90e8deff323fd2eab700e384dd3944b754471. gcc (GCC) 12.2.0. 6.1.3-arch1-1. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12006
https://github.com/root-project/root/issues/12007:0,availability,Failur,Failure,0,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:285,availability,error,errors,285,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:317,availability,Error,Error,317,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:542,availability,Error,Error,542,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:770,availability,Error,Error,770,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:997,availability,Error,Error,997,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1219,availability,Error,Error,1219,"into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1437,availability,Error,Error,1437,"h 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1658,availability,Error,Error,1658,"ranch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1878,availability,Error,Error,1878,"ng the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3602,availability,error,error,3602,"it GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3746,availability,Error,Error,3746,"ell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4117,availability,Error,Error,4117,"E_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4889,availability,Error,Error,4889,"tion. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6315,availability,Error,Error,6315," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:0,deployability,Fail,Failure,0,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:126,deployability,updat,updating,126,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4905,deployability,Fail,Failed,4905,"st char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:5109,deployability,Build,Building,5109," {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasz",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:5551,deployability,version,version,5551," Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6636,deployability,version,version,6636," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6695,deployability,version,versions,6695," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:5551,integrability,version,version,5551," Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6636,integrability,version,version,6636," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6695,integrability,version,versions,6695," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:5447,interoperability,standard,standard,5447,"1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Lik",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:5464,interoperability,mismatch,mismatch,5464,"arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowM",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:5534,interoperability,standard,standard,5534,"vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:212,modifiability,variab,variables,212,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:2361,modifiability,variab,variables,2361,"xDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:2581,modifiability,variab,variables,2581,"yn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creatin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:5551,modifiability,version,version,5551," Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6636,modifiability,version,version,6636," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6695,modifiability,version,versions,6695," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:0,performance,Failur,Failure,0,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:285,performance,error,errors,285,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:317,performance,Error,Error,317,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:542,performance,Error,Error,542,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:770,performance,Error,Error,770,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:997,performance,Error,Error,997,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1219,performance,Error,Error,1219,"into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1437,performance,Error,Error,1437,"h 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1658,performance,Error,Error,1658,"ranch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1878,performance,Error,Error,1878,"ng the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3549,performance,memor,memory,3549,":. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3602,performance,error,error,3602,"it GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3746,performance,Error,Error,3746,"ell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4117,performance,Error,Error,4117,"E_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4889,performance,Error,Error,4889,"tion. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6315,performance,Error,Error,6315," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:0,reliability,Fail,Failure,0,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3273,reliability,pra,pragma,3273,"ehavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4905,reliability,Fail,Failed,4905,"st char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:126,safety,updat,updating,126,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:285,safety,error,errors,285,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:317,safety,Error,Error,317,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:542,safety,Error,Error,542,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:770,safety,Error,Error,770,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:997,safety,Error,Error,997,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1219,safety,Error,Error,1219,"into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1437,safety,Error,Error,1437,"h 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1658,safety,Error,Error,1658,"ranch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1878,safety,Error,Error,1878,"ng the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:2225,safety,compl,completely,2225,"BranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:2394,safety,compl,complicated,2394,"ssing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3602,safety,error,error,3602,"it GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3746,safety,Error,Error,3746,"ell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4117,safety,Error,Error,4117,"E_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4889,safety,Error,Error,4889,"tion. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6315,safety,Error,Error,6315," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:126,security,updat,updating,126,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:2225,security,compl,completely,2225,"BranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:2394,security,compl,complicated,2394,"ssing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6736,testability,context,context,6736," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:285,usability,error,errors,285,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:317,usability,Error,Error,317,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:542,usability,Error,Error,542,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:770,usability,Error,Error,770,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:997,usability,Error,Error,997,"Failure to write std::vector<std::array<T, N> > into a tree/branch; - [x] Checked for duplicates. ### Describe the bug. While updating ATLAS's EDM, we tried to introduce some `std::vector<std::array<float, 3> >` variables into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the bran",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1219,usability,Error,Error,1219,"into our output files. But was met with the following types of errors:. ```. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1437,usability,Error,Error,1437,"h 'ITkStripOverlapSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1658,usability,Error,Error,1658,"ranch 'ITkStripOverlapSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:1878,usability,Error,Error,1878,"ng the branch 'ITkStripOverlapSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripOverlapSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:2275,usability,behavi,behavior,2275," the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.bottomStripDirection' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.stripCenterDistance' [Likely missing ShowMember]. RAWtoALL 12:36:50 Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'ITkStripSpacePointsAuxDyn.topStripCenter' [Likely missing ShowMember]. ```. You can find the details in https://gitlab.cern.ch/atlas/athena/-/merge_requests/59648, but the problem is luckily fairly easy to reproduce in a completely ""standalone"" way as well. ### Expected behavior. We would like to be able to write and read `std::vector<std::array<T, N> >` variables (and ideally even more complicated combinations of `std::vector` and `std::array` types) using `TTree` branches. ### To Reproduce. I wrote the following small example:. - `Makefile`:. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3549,usability,memor,memory,3549,":. ```makefile. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3562,usability,Help,Helper,3562,"e. # Set up all variables for the implicit GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a fe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3602,usability,error,error,3602,"it GNU Make rules to work. CXX:=$(shell root-config --cxx). CXXFLAGS:=$(shell root-config --cflags). LD:=$(shell root-config --ld). LDLIBS:=$(shell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:3746,usability,Error,Error,3746,"ell root-config --libs). LINK.o = $(LINK.cc). # Set up all explicit targets. all: arrayWrite. arrayWrite: arrayWrite.o Dictionary.o. Dictionary.cpp: LinkDef.h. 	rootcint -f $@ LinkDef.h. clean:. 	rm -f Dictionary*. 	rm -f *.o. 	rm -f arrayWrite. distclean: clean. 	rm -f *~. 	rm -f arrays.root. ```. - `LinkDef.h`:. ```c++. #ifndef ARRAYWRITE_LINKDEF_H. #define ARRAYWRITE_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j <",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4117,usability,Error,Error,4117,"E_LINKDEF_H. #include <array>. #include <vector>. struct INSTANTIATE_TYPES {. std::array<float, 3> arr1;. std::vector<std::array<float, 3> > vec1;. };. #pragma link C++ class std::vector<std::array<float, 3> >+;. #endif // ARRAYWRITE_LINKDEF_H. ```. - `arrayWrite.cpp`:. ```c++. // ROOT include(s). #include <TFile.h>. #include <TError.h>. #include <TTree.h>. // System include(s). #include <array>. #include <vector>. #include <memory>. /// Helper macro for creating a branch with error checking. #define MAKE_BRANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building an",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4629,usability,clear,clear,4629,"RANCH(NAME, OBJ)					\. do {								\. TBranch* br = otree->Branch(NAME, &OBJ);			\. if (br == nullptr ) {					\. Error(APPNAME, ""Could not create branch \""%s\"""", NAME);	\. return 1;							\. }								\. } while(false). int main() {. // The name of the application. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:4889,usability,Error,Error,4889,"tion. static const char* APPNAME = ""arrayWrite"";. // Open the output file. static const char* FILENAME = ""arrays.root"";. std::unique_ptr<TFile> ofile(TFile::Open(FILENAME, ""RECREATE""));. if ((!ofile) || ofile->IsZombie()) {. Error(APPNAME, ""Could not open output file \""%s\"""", FILENAME);. return 1;. }. Info(APPNAME, ""Opened output file \""%s\"""", FILENAME);. {. // Create a TTree in the output file. auto otree = std::make_unique<TTree>(""arrays"", ""Tree with arrays"");. otree->SetDirectory(ofile.get());. // Add vectors of arrays to it. std::array<float, 3> arr1;. MAKE_BRANCH(""arr1"", arr1);. std::vector<std::array<float, 3> > vec1;. MAKE_BRANCH(""vec1"", vec1);. // Fill a few entries into the tree. for (Int_t i = 0; i < 10; ++i) {. vec1.clear();. arr1 = {static_cast<float>(i),. static_cast<float>(i + 1),. static_cast<float>(i + 2)};. for (Int_t j = 0; j < i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/issues/12007:6315,usability,Error,Error,6315," i; ++j) {. vec1.push_back({static_cast<float>(j),. static_cast<float>(j + 1),. static_cast<float>(j + 2)});. }. if (otree->Fill() <= 0) {. Error(APPNAME, ""Failed to record entry %i"", i);. return 1;. }. }. // Make sure that the tree is saved. otree->AutoSave();. }. Info(APPNAME, ""Finished writing \""%s\"""", FILENAME);. // Return gracefully. return 0;. }. ```. Building and running this example gets me:. ```. [bash][celeborn]:arrayWrite > make. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o arrayWrite.o arrayWrite.cpp. rootcint -f Dictionary.cpp LinkDef.h. Warning in cling::IncrementalParser::CheckABICompatibility():. Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20220324'. Extraction of runtime standard library version was: '20220421'. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include -c -o Dictionary.o Dictionary.cpp. c++ -pthread -std=c++17 -m64 -I/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/include arrayWrite.o Dictionary.o -L/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lROOTVecOps -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -lROOTDataFrame -Wl,-rpath,/home/krasznaa/software/root/6.26.06/x86_64-ubuntu2204-gcc11-opt/lib -pthread -lm -ldl -rdynamic -o arrayWrite. [bash][celeborn]:arrayWrite > ./arrayWrite . Info in <arrayWrite>: Opened output file ""arrays.root"". Error in <TBranchElement::InitializeOffsets>: Could not find the real data member '_M_elems[3]' when constructing the branch 'vec1' [Likely missing ShowMember]. Info in <arrayWrite>: Finished writing ""arrays.root"". [bash][celeborn]:arrayWrite >. ```. ### Setup. Tried it with ROOT 6.26/06 and 6.24/06. With both the ""LCG version"" on `x86_64-centos7-gcc11-opt` and with hand-built versions on Ubuntu 22.04. ### Additional context. N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12007
https://github.com/root-project/root/pull/12008:100,usability,support,supports,100,[ntuple] Add cardinality field; The cardinality field presents an offset column as vector sizes. It supports reading only. It is used in the importer to project the offset columns of untyped collections stemming from leaf count arrays to their count leaf names.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12008
https://github.com/root-project/root/pull/12009:98,deployability,fail,fails,98,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12009:126,deployability,version,version,126,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12009:126,integrability,version,version,126,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12009:44,interoperability,bind,binding,44,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12009:44,modifiability,bind,binding,44,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12009:126,modifiability,version,version,126,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12009:98,reliability,fail,fails,98,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12009:9,safety,Avoid,Avoid,9,[ntuple] Avoid lambda capture of structured binding; Apparently this is ill-formed with C++17 and fails to compile with Clang version 14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12009
https://github.com/root-project/root/pull/12010:564,availability,redund,redundant,564,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:118,deployability,integr,integral,118,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:205,deployability,integr,integral,205,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:297,deployability,integr,integrals,297,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:451,deployability,integr,integral,451,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:564,deployability,redundan,redundant,564,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:634,deployability,integr,integrated,634,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1066,deployability,integr,integrals,1066,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:118,integrability,integr,integral,118,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:205,integrability,integr,integral,205,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:297,integrability,integr,integrals,297,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:451,integrability,integr,integral,451,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:634,integrability,integr,integrated,634,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1066,integrability,integr,integrals,1066,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:118,interoperability,integr,integral,118,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:205,interoperability,integr,integral,205,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:297,interoperability,integr,integrals,297,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:417,interoperability,specif,specify,417,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:451,interoperability,integr,integral,451,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:634,interoperability,integr,integrated,634,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1066,interoperability,integr,integrals,1066,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:118,modifiability,integr,integral,118,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:205,modifiability,integr,integral,205,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:297,modifiability,integr,integrals,297,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:451,modifiability,integr,integral,451,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:634,modifiability,integr,integrated,634,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1066,modifiability,integr,integrals,1066,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:916,performance,perform,performance,916,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:118,reliability,integr,integral,118,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:205,reliability,integr,integral,205,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:297,reliability,integr,integrals,297,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:451,reliability,integr,integral,451,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:564,reliability,redundan,redundant,564,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:634,reliability,integr,integrated,634,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1066,reliability,integr,integrals,1066,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:564,safety,redund,redundant,564,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1018,safety,test,test,1018,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:118,security,integr,integral,118,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:205,security,integr,integral,205,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:297,security,integr,integrals,297,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:451,security,integr,integral,451,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:634,security,integr,integrated,634,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1066,security,integr,integrals,1066,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:118,testability,integr,integral,118,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:205,testability,integr,integral,205,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:297,testability,integr,integrals,297,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:451,testability,integr,integral,451,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:634,testability,integr,integrated,634,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:928,testability,regress,regression,928,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1012,testability,unit,unit,1012,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1018,testability,test,test,1018,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1066,testability,integr,integrals,1066,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:1254,testability,regress,regression,1254,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:376,usability,cancel,cancel,376,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12010:916,usability,perform,performance,916,"[RF] Explicitly set empty normalization set in `RooGenProdProj`; The idea of the RooGenProdProj is that we divide two integral objects. each created with this makeIntgral() function to get the normalized. integral of a product. Therefore, we don't need to normalize the. numerater and denominator integrals themselves. Doing the normalization. would be expensive and it would cancel out anyway. However, if we don't. specify an explicit normalization integral in createIntegral(), the. last-used normalization set might be used to normalize the pdf,. resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed. to an empty set in this case. Note that in RooFit, a nullptr. normalization set and an empty normalization set is not equivalent. The. former implies taking the last-used normalization set, and the latter. means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit. test is implemented to make sure no new numeric integrals pop up in the. reproducer code to that issue. Unfortunately, this change means that there will be again warnings about. missing `RooAddPdf` normalization sets, but this is not a regression. because these warnings only got fixed in the 6.28 development cycle in. https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12010
https://github.com/root-project/root/pull/12011:16,deployability,integr,integrals,16,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:145,deployability,integr,integrated,145,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:173,deployability,depend,depend,173,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:198,deployability,integr,integrates,198,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:289,deployability,integr,integration,289,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:406,deployability,integr,integrals,406,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:481,deployability,depend,depend,481,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:509,deployability,integr,integrals,509,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:794,deployability,integr,integrals,794,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:828,deployability,Integr,Integrate,828,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:971,deployability,version,version,971,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1326,deployability,updat,updated,1326,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1442,deployability,updat,updated,1442,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1575,deployability,integr,integrate,1575,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1221,energy efficiency,model,model,1221,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:16,integrability,integr,integrals,16,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:145,integrability,integr,integrated,145,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:173,integrability,depend,depend,173,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:198,integrability,integr,integrates,198,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:289,integrability,integr,integration,289,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:312,integrability,sub,subrange,312,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:406,integrability,integr,integrals,406,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:446,integrability,sub,subrange,446,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:481,integrability,depend,depend,481,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:509,integrability,integr,integrals,509,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:794,integrability,integr,integrals,794,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:828,integrability,Integr,Integrate,828,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:971,integrability,version,version,971,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1575,integrability,integr,integrate,1575,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:16,interoperability,integr,integrals,16,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:145,interoperability,integr,integrated,145,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:198,interoperability,integr,integrates,198,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:289,interoperability,integr,integration,289,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:406,interoperability,integr,integrals,406,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:509,interoperability,integr,integrals,509,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:794,interoperability,integr,integrals,794,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:828,interoperability,Integr,Integrate,828,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1575,interoperability,integr,integrate,1575,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:16,modifiability,integr,integrals,16,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:42,modifiability,variab,variables,42,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:118,modifiability,variab,variables,118,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:145,modifiability,integr,integrated,145,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:173,modifiability,depend,depend,173,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:198,modifiability,integr,integrates,198,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:245,modifiability,variab,variable,245,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:289,modifiability,integr,integration,289,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:328,modifiability,variab,variable,328,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:406,modifiability,integr,integrals,406,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:481,modifiability,depend,depend,481,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:509,modifiability,integr,integrals,509,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:794,modifiability,integr,integrals,794,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:828,modifiability,Integr,Integrate,828,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:971,modifiability,version,version,971,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1142,modifiability,paramet,parameter,1142,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1227,modifiability,paramet,parameter,1227,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1575,modifiability,integr,integrate,1575,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:16,reliability,integr,integrals,16,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:145,reliability,integr,integrated,145,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:165,reliability,doe,doesn,165,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:198,reliability,integr,integrates,198,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:289,reliability,integr,integration,289,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:406,reliability,integr,integrals,406,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:473,reliability,doe,doesn,473,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:509,reliability,integr,integrals,509,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:568,reliability,doe,does,568,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:794,reliability,integr,integrals,794,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:828,reliability,Integr,Integrate,828,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1544,reliability,doe,does,1544,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1575,reliability,integr,integrate,1575,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:173,safety,depend,depend,173,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:481,safety,depend,depend,481,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:872,safety,compl,completely,872,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1326,safety,updat,updated,1326,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1442,safety,updat,updated,1442,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1517,safety,test,test,1517,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:16,security,integr,integrals,16,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:145,security,integr,integrated,145,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:198,security,integr,integrates,198,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:289,security,integr,integration,289,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:406,security,integr,integrals,406,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:509,security,integr,integrals,509,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:794,security,integr,integrals,794,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:828,security,Integr,Integrate,828,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:872,security,compl,completely,872,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1221,security,model,model,1221,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1326,security,updat,updated,1326,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1442,security,updat,updated,1442,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1575,security,integr,integrate,1575,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:16,testability,integr,integrals,16,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:145,testability,integr,integrated,145,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:173,testability,depend,depend,173,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:198,testability,integr,integrates,198,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:289,testability,integr,integration,289,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:406,testability,integr,integrals,406,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:481,testability,depend,depend,481,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:509,testability,integr,integrals,509,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:794,testability,integr,integrals,794,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:828,testability,Integr,Integrate,828,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1512,testability,unit,unit,1512,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1517,testability,test,test,1517,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/pull/12011:1575,testability,integr,integrate,1575,"[RF] Fix ranged integrals with factorized variables; The `RooRealIntegral` class is smart enough to figure out which. variables the function the integrated function doesn't depend on and. trivially integrates them itself by multiplying with the variable. definition range. However, if the integration range is a subrange of the variable range,. this was not considered. This resulted in wrong results. for integrals. like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend. on x. These kind of integrals can occur in the projections that the. RooAddPdf does, so it's important that they work, and fixing this. partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which. also used these kind of integrals. Without this fix, the `Integrate()`. feature for `chi2FitTo()` was completely broken, which can be seen in. the output of the `rf609` tutorial with any previous ROOT version. The. tutorial looks okay by chance, because the function is dominted by the. quadratic term in `x` that is constant in the fit. But if one makes this. a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set. constant to begin with, to sweep the bug under the rug. Now, the. tutorials are updated to have the quadratic coefficient floating too. And also `stressRooFit`, since the reference file has to be updated. anyway. To demonstrate that things work correctly now, a new unit test was. implemented that does the closure check of the `integrate()` feature of. the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12011
https://github.com/root-project/root/issues/12012:1164,availability,mainten,maintenance,1164,"I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:. ```. float* data_ [[rootio::size(""size_"")]];. float* transient_ [[rootio::transient]];. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:586,integrability,inject,injected,586,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:42,interoperability,specif,specify,42,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:428,interoperability,XML,XML,428,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:538,interoperability,XML,XML,538,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:1094,interoperability,xml,xml,1094,"n https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:. ```. float* data_ [[rootio::size(""size_"")",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:147,performance,I/O,I/O,147,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:896,reliability,doe,does,896,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:1164,reliability,mainten,maintenance,1164,"I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:. ```. float* data_ [[rootio::size(""size_"")]];. float* transient_ [[rootio::transient]];. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:1585,safety,avoid,avoid,1585,"I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:. ```. float* data_ [[rootio::size(""size_"")]];. float* transient_ [[rootio::transient]];. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:586,security,inject,injected,586,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:2004,testability,simpl,simplification,2004,"I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:. ```. float* data_ [[rootio::size(""size_"")]];. float* transient_ [[rootio::transient]];. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:13,usability,support,support,13,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:242,usability,support,support,242,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:852,usability,behavi,behavior,852,"Add official support of C++ annotation to specify ROOT IO attribute for data members.; As seen in https://github.com/cms-sw/cmssw/pull/40435, ROOT I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/issues/12012:2004,usability,simpl,simplification,2004,"I/O annotation can be moved from the comments to using `C++ attributes` (in particular because support for the comment is implemented internally through the same mechanics). To quote the referred pull request:. The way dictionary information are propagated from the `C++` code or `XML` dictionaries to reflex and cling is rather roundabout:. - a. - `<field name=""data_"" comment=""!""/>` tags `XML` dictionaries are parsed by `genreflex` and injected into the `LLVM AST` of the corresponding `C++` code as comments `//!`;. - `C++` comments like `//!` or `//[size_]` are converted by `genreflex/rootcling` into `LLVM AST` annotations; cling parses the `LLVM` annotations and uses them to generate the desired behavior in the dictionaries. This approach does not work well with macro-generated data members:. - macros cannot generate comments, so `//!` or `//[size_]` cannot be used directly;. - macros cannot easily be used to generate the `class_def.xml` file, requiring manual intervention for their implementation and maintenance. However, it turns out that dictionaries can bypass the comments and use LLVM annotations directly within the C++ code. So. ```. private:. int size_;. float* data_; //[size_]. float* transient_; //! ```. can be also expressed as. ```. private:. int size_;. float* data_ [[clang::annotate(""[size_]"")]];. float* transient_ [[clang::annotate(""!"")]];. ```. and annotations can be generated by macros. In order to avoid spurious warnings when compiling the header, we should offer a (set of) macro(s), eg:. - `ROOT_IO_TRANSIENT` can be used to annotate transient data members, like `//! - `ROO_IO_SIZE(SIZE)` can be used to annotate dynamic arrays, like `//[SIZE]`. or. - `ROOT_IO_ANNOTATE` that can be used with `ROOT_IO_ANNOATE(""!"")` and `ROOT_IO_ANNOTATE(""[size]"")`. The advantage of the earlier case would be to (possibly) allow simplification of the internal parsing, by using:. ```. float* data_ [[rootio::size(""size_"")]];. float* transient_ [[rootio::transient]];. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12012
https://github.com/root-project/root/pull/12013:160,energy efficiency,current,currently,160,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12013:23,interoperability,skeleton,skeleton,23,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12013:96,modifiability,pac,package,96,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12013:441,safety,test,tests,441,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12013:436,testability,unit,unit,436,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12013:441,testability,test,tests,441,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12013:384,usability,visual,visualize,384,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12013:463,usability,document,documentation,463,"[ntuple] Add Inspector skeleton; This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests. -[x] Add usage documentation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12013
https://github.com/root-project/root/pull/12014:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 4; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11995. 2. https://github.com/root-project/root/pull/11999. 3. https://github.com/root-project/root/pull/12000. 4. https://github.com/root-project/root/pull/12010. 5. https://github.com/root-project/root/pull/12011. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12014
https://github.com/root-project/root/pull/12014:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 4; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11995. 2. https://github.com/root-project/root/pull/11999. 3. https://github.com/root-project/root/pull/12000. 4. https://github.com/root-project/root/pull/12010. 5. https://github.com/root-project/root/pull/12011. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12014
https://github.com/root-project/root/pull/12014:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 4; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11995. 2. https://github.com/root-project/root/pull/11999. 3. https://github.com/root-project/root/pull/12000. 4. https://github.com/root-project/root/pull/12010. 5. https://github.com/root-project/root/pull/12011. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12014
https://github.com/root-project/root/pull/12014:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 4; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11995. 2. https://github.com/root-project/root/pull/11999. 3. https://github.com/root-project/root/pull/12000. 4. https://github.com/root-project/root/pull/12010. 5. https://github.com/root-project/root/pull/12011. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12014
https://github.com/root-project/root/pull/12014:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 4; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11995. 2. https://github.com/root-project/root/pull/11999. 3. https://github.com/root-project/root/pull/12000. 4. https://github.com/root-project/root/pull/12010. 5. https://github.com/root-project/root/pull/12011. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12014
https://github.com/root-project/root/pull/12014:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 4; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11995. 2. https://github.com/root-project/root/pull/11999. 3. https://github.com/root-project/root/pull/12000. 4. https://github.com/root-project/root/pull/12010. 5. https://github.com/root-project/root/pull/12011. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12014
https://github.com/root-project/root/pull/12016:227,availability,error,errors,227,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:238,deployability,log,logged,238,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:621,deployability,integr,integral,621,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:621,integrability,integr,integral,621,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:278,interoperability,format,format,278,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:621,interoperability,integr,integral,621,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:621,modifiability,integr,integral,621,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:227,performance,error,errors,227,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:621,reliability,integr,integral,621,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:227,safety,error,errors,227,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:238,safety,log,logged,238,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:571,safety,Avoid,Avoid,571,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:238,security,log,logged,238,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:621,security,integr,integral,621,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:238,testability,log,logged,238,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:621,testability,integr,integral,621,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:768,testability,simpl,simpler,768,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:227,usability,error,errors,227,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12016:768,usability,simpl,simpler,768,"[RF] Define infinity as `std::numeric_limits<double>::infinity()`; Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx. * Inline infinity constant and checks in `RooNumber`. * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`. * Define infinity as `std::numeric_limits<double>::infinity()`. * RooTruthModel: local `xmin` and `xmax` to make code more readable. * Avoid `sin` or `cos` of infinity in RooTruthModel integral code. * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12016
https://github.com/root-project/root/pull/12017:35,integrability,pub,public,35,"[RF] Make RooFitResult set methods public ; This allows non-friends to construct RooFitResults, which allows for the removal of protected->public override in xRooFit for this class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12017
https://github.com/root-project/root/pull/12017:139,integrability,pub,public,139,"[RF] Make RooFitResult set methods public ; This allows non-friends to construct RooFitResults, which allows for the removal of protected->public override in xRooFit for this class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12017
https://github.com/root-project/root/pull/12018:281,availability,slo,slow-down,281,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:316,availability,restor,restores,316,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:62,deployability,upgrad,upgrade,62,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:488,deployability,updat,updated,488,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:8,modifiability,Reu,Reuse,8,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:62,modifiability,upgrad,upgrade,62,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:281,reliability,slo,slow-down,281,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:316,reliability,restor,restores,316,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:458,safety,test,tested,458,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:488,safety,updat,updated,488,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:218,security,sign,significant,218,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:269,security,sign,significant,269,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:351,security,ident,identical,351,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:488,security,updat,updated,488,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:458,testability,test,tested,458,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12018:333,usability,behavi,behavior,333,"[cling] Reuse existing weak symbols, also from JIT:; With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12018
https://github.com/root-project/root/pull/12019:68,deployability,patch,patch,68,[ntuple] Report the branch name when a class cannot be loaded; This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12019
https://github.com/root-project/root/pull/12019:55,energy efficiency,load,loaded,55,[ntuple] Report the branch name when a class cannot be loaded; This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12019
https://github.com/root-project/root/pull/12019:126,energy efficiency,load,loaded,126,[ntuple] Report the branch name when a class cannot be loaded; This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12019
https://github.com/root-project/root/pull/12019:55,performance,load,loaded,55,[ntuple] Report the branch name when a class cannot be loaded; This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12019
https://github.com/root-project/root/pull/12019:126,performance,load,loaded,126,[ntuple] Report the branch name when a class cannot be loaded; This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12019
https://github.com/root-project/root/pull/12019:68,safety,patch,patch,68,[ntuple] Report the branch name when a class cannot be loaded; This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12019
https://github.com/root-project/root/pull/12019:68,security,patch,patch,68,[ntuple] Report the branch name when a class cannot be loaded; This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12019
https://github.com/root-project/root/issues/12020:2586,availability,Operat,Operating,2586,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2661,availability,down,download,2661,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:787,deployability,contain,contain,787,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:949,deployability,contain,contain,949,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1557,deployability,build,build,1557,"e where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2574,deployability,version,version,2574,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2643,deployability,instal,install,2643,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1153,energy efficiency,current,current,1153,"/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:803,integrability,sub,subcategories,803,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2574,integrability,version,version,2574,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2574,modifiability,version,version,2574,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:847,reliability,doe,does,847,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1511,safety,input,input,1511,"havior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1131,testability,context,context,1131,"ub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2106,testability,context,context,2106,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2183,testability,context,context,2183,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2205,testability,context,context,2205,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2248,testability,context,context,2248,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2325,testability,context,context,2325,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2347,testability,context,context,2347,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2748,testability,context,context,2748,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:2777,testability,context,context,2777,"ies of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat in s2.indexCat().servers()]). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Head of ROOT 6.26 from LCG dev4. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:49,usability,prototyp,prototype,49,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:464,usability,clear,clear,464,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:512,usability,behavi,behavior,512,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:748,usability,prototyp,prototype,748,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:768,usability,prototyp,prototype,768,"[RF] Cannot generate nested RooSimultaneous from prototype category data; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Prin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1096,usability,prototyp,prototype,1096,"s. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # corr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1183,usability,behavi,behavior,1183,"%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(cont",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1201,usability,clear,clear,1201,"[Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1366,usability,behavi,behavior,1366,"port, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # inte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/issues/12020:1511,usability,input,input,1511,"havior is. -->. `RooSimultaneous` has a feature where if the internal pdfs are themselves `RooSimulteneous`, the pdf is flattened in a single level `RooSimulteneous` with a `RooSuperCategory` as index. When generating such a pdf from prototype data, the prototype needs to contain all the subcategories of the super-category, and it does so by checking the super-category servers. . However, recently `RooSuperCategory` was changed to contain a `RooMultiCategory` internally, and the only reported direct server is the internal multi-category. This leads to a wrong generation (the prototype data is ignored, the gen context refers to the current labels). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. Proto data works even with nested RooSimultaneous. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. ```Python. import ROOT. x = ROOT.RooRealVar('x', '', 0, 1). c1 = ROOT.RooCategory('c1', '', {'c11': 0}). c2 = ROOT.RooCategory('c2', '', {'c21': 0}). u = ROOT.RooUniform('u', '', x). s1 = ROOT.RooSimultaneous('s1', '', {'c11': u}, c1). s2 = ROOT.RooSimultaneous('s2', '', {'c21': s1}, c2). proto = ROOT.RooDataSet('proto', '', {c1, c2}). for i in range(100):. proto.add({c1, c2}). proto.table(c1).Print(""V""). proto.table(c2).Print(""V""). ROOT.RooMsgService.instance().addStream(ROOT.RooFit.INFO). # correct. context = s1.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # not a RooSimGenContext. context = s2.genContext(ROOT.RooArgSet(x), proto, ROOT.nullptr, True). print(context.ClassName()). context.Print(). # internal super-cat. print(s2.indexCat().GetName(), s2.indexCat().ClassName()). # the server is the internal multi-cat. print([cat.GetName() for cat ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12020
https://github.com/root-project/root/pull/12021:0,deployability,Updat,Update,0,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:79,deployability,updat,updates,79,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:371,deployability,updat,updated,371,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:53,energy efficiency,model,model,53,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:0,safety,Updat,Update,0,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:79,safety,updat,updates,79,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:341,safety,test,tested,341,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:371,safety,updat,updated,371,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:0,security,Updat,Update,0,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:53,security,model,model,53,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:79,security,updat,updates,79,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:371,security,updat,updated,371,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:341,testability,test,tested,341,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12021:120,usability,custom,custom,120,Update `CladDerivator.h` to the pushforward/pullback model; This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h). ## Checklist:. - [ X] tested changes locally. - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12021
https://github.com/root-project/root/pull/12022:163,deployability,contain,contain,163,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:325,deployability,contain,contain,325,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:823,deployability,depend,dependency,823,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:834,deployability,manag,management,834,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:532,energy efficiency,current,current,532,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:834,energy efficiency,manag,management,834,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:179,integrability,sub,subcategories,179,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:705,integrability,interfac,interface,705,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:745,integrability,interfac,interface,745,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:823,integrability,depend,dependency,823,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:691,interoperability,client-serv,client-server,691,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:705,interoperability,interfac,interface,705,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:731,interoperability,client-serv,client-server,731,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:745,interoperability,interfac,interface,745,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:705,modifiability,interfac,interface,705,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:745,modifiability,interfac,interface,745,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:823,modifiability,depend,dependency,823,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:223,reliability,doe,does,223,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:618,safety,input,inputCatList,618,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:823,safety,depend,dependency,823,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:834,safety,manag,management,834,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:510,testability,context,context,510,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:823,testability,depend,dependency,823,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:123,usability,prototyp,prototype,123,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:143,usability,prototyp,prototype,143,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:474,usability,prototyp,prototype,474,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:618,usability,input,inputCatList,618,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/pull/12022:864,usability,Close,Closes,864,"[RF] Fix problems with dataset generation from a nested `RooSimultaneous` with proto data; When generating such a pdf from prototype data, the prototype needs to. contain all the subcategories of the super-category, and it does so by. checking the super-category servers. However, recently. `RooSuperCategory` was changed to contain a `RooMultiCategory`. internally, and the only reported direct server is the internal. multi-category. This leads to a wrong generation (the prototype data is. ignored, the gen context refers to the current labels). The solution that this commit suggests is to use. `RooSuperCategory::inputCatList()` to inspect the internal categories. instead of using the client-server interface. Actually, the. client-server interface is not meant to be used for inspection like. that, just for general dependency management in the evaluation. Closes https://github.com/root-project/root/issues/12020.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12022
https://github.com/root-project/root/issues/12023:645,deployability,build,build,645,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:657,deployability,build,build,657,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:686,deployability,build,build,686,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1492,deployability,instal,installed,1492,"eproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1539,deployability,instal,install,1539,"/github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1641,deployability,releas,release,1641,"build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1675,deployability,version,version,1675,"make --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11657,deployability,stack,stack,11657,"to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12849,deployability,Stack,StackTrace,12849,"6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22620,deployability,stack,stack,22620,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1659,energy efficiency,Core,Core,1659,"d && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:2706,energy efficiency,optim,optimized,2706,"----------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:2898,energy efficiency,optim,optimized,2898,"uxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3058,energy efficiency,optim,optimized,3058,"|. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3195,energy efficiency,alloc,allocator,3195,"ional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3305,energy efficiency,optim,optimized,3305,"mary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3487,energy efficiency,alloc,allocator,3487,"nted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3652,energy efficiency,alloc,allocator,3652,")2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3751,energy efficiency,optim,optimized,3751,"_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3846,energy efficiency,alloc,allocator,3846,")2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3954,energy efficiency,alloc,allocator,3954,":1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:200",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4121,energy efficiency,alloc,allocator,4121,"::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4311,energy efficiency,alloc,allocator,4311,"ut>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4419,energy efficiency,alloc,allocator,4419,"<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4547,energy efficiency,optim,optimized,4547,"neBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4656,energy efficiency,alloc,allocator,4656,"<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_ha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4764,energy efficiency,alloc,allocator,4764," /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4878,energy efficiency,optim,optimized,4878,"td::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5044,energy efficiency,alloc,allocator,5044,"std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Det",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5135,energy efficiency,alloc,allocator,5135,"onst, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5216,energy efficiency,alloc,allocator,5216,") at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5298,energy efficiency,alloc,allocator,5298,"oc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5479,energy efficiency,alloc,allocator,5479,"neBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5572,energy efficiency,alloc,allocator,5572,"e/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__deta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5908,energy efficiency,alloc,allocator,5908,"usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5999,energy efficiency,alloc,allocator,5999,"ring<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6080,energy efficiency,alloc,allocator,6080,"::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6162,energy efficiency,alloc,allocator,6162,"ared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6343,energy efficiency,alloc,allocator,6343,"ail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6436,energy efficiency,alloc,allocator,6436,"ng<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6661,energy efficiency,optim,optimized,6661,"td::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6808,energy efficiency,alloc,allocator,6808,"able.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6948,energy efficiency,alloc,allocator,6948,"sic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7045,energy efficiency,alloc,allocator,7045,"il::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7071,energy efficiency,alloc,allocator,7071,"td::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7153,energy efficiency,alloc,allocator,7153,"td::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7276,energy efficiency,optim,optimized,7276,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7440,energy efficiency,alloc,allocator,7440,"<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7580,energy efficiency,alloc,allocator,7580,"htable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7677,energy efficiency,alloc,allocator,7677,"sr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7703,energy efficiency,alloc,allocator,7703,"htable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7785,energy efficiency,alloc,allocator,7785,"raits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7968,energy efficiency,alloc,allocator,7968,":equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8076,energy efficiency,alloc,allocator,8076,"std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8216,energy efficiency,alloc,allocator,8216,"ase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_pt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8313,energy efficiency,alloc,allocator,8313,"s/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_rel",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8339,energy efficiency,alloc,allocator,8339," std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8421,energy efficiency,alloc,allocator,8421,"s<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8680,energy efficiency,alloc,allocator,8680,"r<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8820,energy efficiency,alloc,allocator,8820,"<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8917,energy efficiency,alloc,allocator,8917,"nstruct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8943,energy efficiency,alloc,allocator,8943,"locator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9025,energy efficiency,alloc,allocator,9025,"sic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9110,energy efficiency,alloc,allocator,9110,"::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::ba",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9623,energy efficiency,optim,optimized,9623,"11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9645,energy efficiency,optim,optimized,9645," std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9816,energy efficiency,alloc,allocator,9816,"llocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9956,energy efficiency,alloc,allocator,9956,"r<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10053,energy efficiency,alloc,allocator,10053,"red_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnReg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10079,energy efficiency,alloc,allocator,10079,":RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10161,energy efficiency,alloc,allocator,10161," (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10297,energy efficiency,optim,optimized,10297,"olicy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10319,energy efficiency,optim,optimized,10319,"this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10488,energy efficiency,alloc,allocator,10488,"/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10628,energy efficiency,alloc,allocator,10628,"out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a cr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10725,energy efficiency,alloc,allocator,10725,"_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ============================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10751,energy efficiency,alloc,allocator,10751,"d::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10833,energy efficiency,alloc,allocator,10833,"::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x000000000000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10939,energy efficiency,optim,optimized,10939,"char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10961,energy efficiency,optim,optimized,10961,"char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x00000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11089,energy efficiency,optim,optimized,11089,"pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11111,energy efficiency,optim,optimized,11111,"ic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x000000000069120",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11263,energy efficiency,optim,optimized,11263,"icy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11285,energy efficiency,optim,optimized,11285,"(this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=89",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11367,energy efficiency,optim,optimized,11367,"r_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11389,energy efficiency,optim,optimized,11389,"::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12475,energy efficiency,optim,optimized,12475,"<summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12617,energy efficiency,optim,optimized,12617,"re was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12721,energy efficiency,optim,optimized,12721,"===================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12797,energy efficiency,core,core,12797,"00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12921,energy efficiency,core,core,12921,"e6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13103,energy efficiency,core,core,13103,"000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RD",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13551,energy efficiency,optim,optimized,13551,") at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13744,energy efficiency,optim,optimized,13744,"0) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13905,energy efficiency,optim,optimized,13905,"c37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14043,energy efficiency,alloc,allocator,14043,"iolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14153,energy efficiency,optim,optimized,14153,"called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14336,energy efficiency,alloc,allocator,14336,"_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14501,energy efficiency,alloc,allocator,14501,":~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14600,energy efficiency,optim,optimized,14600,"_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14696,energy efficiency,alloc,allocator,14696,":~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14804,energy efficiency,alloc,allocator,14804,"4. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14971,energy efficiency,alloc,allocator,14971,"pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15162,energy efficiency,alloc,allocator,15162,") at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15270,energy efficiency,alloc,allocator,15270,"td::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15398,energy efficiency,optim,optimized,15398,"Base> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15508,energy efficiency,alloc,allocator,15508,"ar> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_ha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15616,energy efficiency,alloc,allocator,15616,"sr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15730,energy efficiency,optim,optimized,15730,"::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15896,energy efficiency,alloc,allocator,15896,"d::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Det",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15987,energy efficiency,alloc,allocator,15987,"st, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16068,energy efficiency,alloc,allocator,16068,"at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16150,energy efficiency,alloc,allocator,16150,"c<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16331,energy efficiency,alloc,allocator,16331,"eBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16424,energy efficiency,alloc,allocator,16424,"/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__deta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16760,energy efficiency,alloc,allocator,16760,"usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16851,energy efficiency,alloc,allocator,16851,"ring<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16932,energy efficiency,alloc,allocator,16932,"::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17014,energy efficiency,alloc,allocator,17014,"ared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17195,energy efficiency,alloc,allocator,17195,"ail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17288,energy efficiency,alloc,allocator,17288,"ng<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17513,energy efficiency,optim,optimized,17513,"td::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17660,energy efficiency,alloc,allocator,17660,"able.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17800,energy efficiency,alloc,allocator,17800,"sic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17897,energy efficiency,alloc,allocator,17897,"il::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17923,energy efficiency,alloc,allocator,17923,"td::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18005,energy efficiency,alloc,allocator,18005,"td::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18128,energy efficiency,optim,optimized,18128,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18292,energy efficiency,alloc,allocator,18292,"<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18432,energy efficiency,alloc,allocator,18432,"htable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18529,energy efficiency,alloc,allocator,18529,"sr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18555,energy efficiency,alloc,allocator,18555,"htable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18637,energy efficiency,alloc,allocator,18637,"raits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18820,energy efficiency,alloc,allocator,18820,":equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18928,energy efficiency,alloc,allocator,18928,"std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19068,energy efficiency,alloc,allocator,19068,"ase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_pt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19165,energy efficiency,alloc,allocator,19165,"s/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_rel",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19191,energy efficiency,alloc,allocator,19191," std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19273,energy efficiency,alloc,allocator,19273,"s<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19532,energy efficiency,alloc,allocator,19532,"r<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19672,energy efficiency,alloc,allocator,19672,"<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19769,energy efficiency,alloc,allocator,19769,"nstruct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19795,energy efficiency,alloc,allocator,19795,"locator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19877,energy efficiency,alloc,allocator,19877,"sic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19962,energy efficiency,alloc,allocator,19962,"::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::ba",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20475,energy efficiency,optim,optimized,20475,"11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20497,energy efficiency,optim,optimized,20497," std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20668,energy efficiency,alloc,allocator,20668,"llocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20808,energy efficiency,alloc,allocator,20808,"r<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20905,energy efficiency,alloc,allocator,20905,"red_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnReg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20931,energy efficiency,alloc,allocator,20931,":RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21013,energy efficiency,alloc,allocator,21013," (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21149,energy efficiency,optim,optimized,21149,"olicy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21171,energy efficiency,optim,optimized,21171,"this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21340,energy efficiency,alloc,allocator,21340,"/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. =========================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21480,energy efficiency,alloc,allocator,21480,"out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/for",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21577,energy efficiency,alloc,allocator,21577,"_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21603,energy efficiency,alloc,allocator,21603,"d::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21685,energy efficiency,alloc,allocator,21685,"::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21791,energy efficiency,optim,optimized,21791,"char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21813,energy efficiency,optim,optimized,21813,"char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21941,energy efficiency,optim,optimized,21941,"pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21963,energy efficiency,optim,optimized,21963,"ic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_bas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22115,energy efficiency,optim,optimized,22115,"icy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22137,energy efficiency,optim,optimized,22137,"(this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22219,energy efficiency,optim,optimized,22219,"r_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22241,energy efficiency,optim,optimized,22241,"::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23174,energy efficiency,optim,optimized,23174,"RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23367,energy efficiency,optim,optimized,23367,"es below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23528,energy efficiency,optim,optimized,23528," in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23666,energy efficiency,alloc,allocator,23666,"n to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23776,energy efficiency,optim,optimized,23776,"=======. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23959,energy efficiency,alloc,allocator,23959,"_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24124,energy efficiency,alloc,allocator,24124,":~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24223,energy efficiency,optim,optimized,24223,"_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24319,energy efficiency,alloc,allocator,24319,":~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24427,energy efficiency,alloc,allocator,24427,"4. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24594,energy efficiency,alloc,allocator,24594,"pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24785,energy efficiency,alloc,allocator,24785,") at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24893,energy efficiency,alloc,allocator,24893,"td::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25021,energy efficiency,optim,optimized,25021,"Base> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25131,energy efficiency,alloc,allocator,25131,"ar> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_ha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25239,energy efficiency,alloc,allocator,25239,"sr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25353,energy efficiency,optim,optimized,25353,"::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25519,energy efficiency,alloc,allocator,25519,"d::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Det",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25610,energy efficiency,alloc,allocator,25610,"st, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25691,energy efficiency,alloc,allocator,25691,"at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25773,energy efficiency,alloc,allocator,25773,"c<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_st",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25954,energy efficiency,alloc,allocator,25954,"eBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26047,energy efficiency,alloc,allocator,26047,"/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__deta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26383,energy efficiency,alloc,allocator,26383,"usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26474,energy efficiency,alloc,allocator,26474,"ring<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26555,energy efficiency,alloc,allocator,26555,"::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26637,energy efficiency,alloc,allocator,26637,"ared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26818,energy efficiency,alloc,allocator,26818,"ail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26911,energy efficiency,alloc,allocator,26911,"ng<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27136,energy efficiency,optim,optimized,27136,"td::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27283,energy efficiency,alloc,allocator,27283,"able.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27423,energy efficiency,alloc,allocator,27423,"sic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27520,energy efficiency,alloc,allocator,27520,"il::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27546,energy efficiency,alloc,allocator,27546,"td::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27628,energy efficiency,alloc,allocator,27628,"td::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27751,energy efficiency,optim,optimized,27751,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27915,energy efficiency,alloc,allocator,27915,"<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28055,energy efficiency,alloc,allocator,28055,"htable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28152,energy efficiency,alloc,allocator,28152,"sr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::al",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28178,energy efficiency,alloc,allocator,28178,"htable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28260,energy efficiency,alloc,allocator,28260,"raits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28443,energy efficiency,alloc,allocator,28443,":equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28551,energy efficiency,alloc,allocator,28551,"std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28691,energy efficiency,alloc,allocator,28691,"ase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_pt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28788,energy efficiency,alloc,allocator,28788,"s/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_rel",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28814,energy efficiency,alloc,allocator,28814," std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28896,energy efficiency,alloc,allocator,28896,"s<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:29155,energy efficiency,alloc,allocator,29155,"r<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:29295,energy efficiency,alloc,allocator,29295,"<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:29392,energy efficiency,alloc,allocator,29392,"nstruct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:29418,energy efficiency,alloc,allocator,29418,"locator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:29500,energy efficiency,alloc,allocator,29500,"sic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:29585,energy efficiency,alloc,allocator,29585,"::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::ba",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30098,energy efficiency,optim,optimized,30098,"11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30120,energy efficiency,optim,optimized,30120," std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30291,energy efficiency,alloc,allocator,30291,"llocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30431,energy efficiency,alloc,allocator,30431,"r<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30528,energy efficiency,alloc,allocator,30528,"red_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnReg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30554,energy efficiency,alloc,allocator,30554,":RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30636,energy efficiency,alloc,allocator,30636," (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30772,energy efficiency,optim,optimized,30772,"olicy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30794,energy efficiency,optim,optimized,30794,"this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30963,energy efficiency,alloc,allocator,30963,"/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. =========================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31103,energy efficiency,alloc,allocator,31103," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31200,energy efficiency,alloc,allocator,31200," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31226,energy efficiency,alloc,allocator,31226," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31308,energy efficiency,alloc,allocator,31308," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31414,energy efficiency,optim,optimized,31414," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31436,energy efficiency,optim,optimized,31436," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31564,energy efficiency,optim,optimized,31564," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31586,energy efficiency,optim,optimized,31586," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31738,energy efficiency,optim,optimized,31738," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31760,energy efficiency,optim,optimized,31760," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31842,energy efficiency,optim,optimized,31842," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31864,energy efficiency,optim,optimized,31864," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1523,integrability,repositor,repository,1523,"tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1675,integrability,version,version,1675,"make --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22554,integrability,sub,submit,22554,"_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/inclu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1523,interoperability,repositor,repository,1523,"tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:511,modifiability,Deco,Decompress,511,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1675,modifiability,version,version,1675,"make --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:2706,performance,optimiz,optimized,2706,"----------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:2898,performance,optimiz,optimized,2898,"uxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3058,performance,optimiz,optimized,3058,"|. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3305,performance,optimiz,optimized,3305,"mary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:3751,performance,optimiz,optimized,3751,"_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x209f2f8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #6 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4547,performance,optimiz,optimized,4547,"neBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #7 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:4878,performance,optimiz,optimized,4878,"td::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x209f2f8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #8 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6661,performance,optimiz,optimized,6661,"td::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7276,performance,optimiz,optimized,7276,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9623,performance,optimiz,optimized,9623,"11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9645,performance,optimiz,optimized,9645," std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10297,performance,optimiz,optimized,10297,"olicy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10319,performance,optimiz,optimized,10319,"this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10939,performance,optimiz,optimized,10939,"char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x000000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10961,performance,optimiz,optimized,10961,"char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x00000",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11089,performance,optimiz,optimized,11089,"pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11111,performance,optimiz,optimized,11111,"ic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x000000000069120",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11263,performance,optimiz,optimized,11263,"icy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11285,performance,optimiz,optimized,11285,"(this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=89",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11367,performance,optimiz,optimized,11367,"r_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11389,performance,optimiz,optimized,11389,"::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12475,performance,optimiz,optimized,12475,"<summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12617,performance,optimiz,optimized,12617,"re was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:12721,performance,optimiz,optimized,12721,"===================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13551,performance,optimiz,optimized,13551,") at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13744,performance,optimiz,optimized,13744,"0) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13905,performance,optimiz,optimized,13905,"c37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14153,performance,optimiz,optimized,14153,"called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:14600,performance,optimiz,optimized,14600,"_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15398,performance,optimiz,optimized,15398,"Base> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:15730,performance,optimiz,optimized,15730,"::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17513,performance,optimiz,optimized,17513,"td::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18128,performance,optimiz,optimized,18128,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20475,performance,optimiz,optimized,20475,"11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20497,performance,optimiz,optimized,20497," std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21149,performance,optimiz,optimized,21149,"olicy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21171,performance,optimiz,optimized,21171,"this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21791,performance,optimiz,optimized,21791,"char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21813,performance,optimiz,optimized,21813,"char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21941,performance,optimiz,optimized,21941,"pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21963,performance,optimiz,optimized,21963,"ic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_bas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22115,performance,optimiz,optimized,22115,"icy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22137,performance,optimiz,optimized,22137,"(this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22219,performance,optimiz,optimized,22219,"r_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22241,performance,optimiz,optimized,22241,"::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23174,performance,optimiz,optimized,23174,"RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23367,performance,optimiz,optimized,23367,"es below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23528,performance,optimiz,optimized,23528," in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:23776,performance,optimiz,optimized,23776,"=======. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:24223,performance,optimiz,optimized,24223,"_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/stl_pair.h:185. #13 std::__new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25021,performance,optimiz,optimized,25021,"Base> >, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, this=<optimized out>) at /usr/include/c++/12/bits/new_allocator.h:181. #14 std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25353,performance,optimiz,optimized,25353,"::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > (__p=0x22dedd8, __a=...) at /usr/include/c++/12/bits/alloc_traits.h:535. #15 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27136,performance,optimiz,optimized,27136,"td::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27751,performance,optimiz,optimized,27751,"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30098,performance,optimiz,optimized,30098,"11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30120,performance,optimiz,optimized,30120," std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30772,performance,optimiz,optimized,30772,"olicy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30794,performance,optimiz,optimized,30794,"this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31414,performance,optimiz,optimized,31414," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31436,performance,optimiz,optimized,31436," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31564,performance,optimiz,optimized,31564," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31586,performance,optimiz,optimized,31586," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31738,performance,optimiz,optimized,31738," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31760,performance,optimiz,optimized,31760," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31842,performance,optimiz,optimized,31842," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31864,performance,optimiz,optimized,31864," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:523,safety,test,test,523,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:588,safety,test,test,588,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:370,security,hack,hack,370,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1161,security,Team,Team,1161,"uring processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1844,security,Team,Team,1844,"### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5505,security,hash,hash,5505,"M_deallocate_node (__n=0x209f2f0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #9 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5808,security,hash,hashtable,5808,"tail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::alloc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6369,security,hash,hash,6369,"> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unorder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6705,security,hash,hashtable,6705,"etail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:6881,security,hash,hash,6881,":char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:7513,security,hash,hash,7513,"_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8149,security,hash,hash,8149,"::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #13 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:8753,security,hash,hash,8753," std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1ab6a80) at /usr/include/c++/12/bits/stl_construct.h:151. #14 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1ab6a80) at /usr/include/c++/12/bits/alloc_traits.h:648. #15 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:9889,security,hash,hash,9889,"::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #16 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #17 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1ab6a70) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #18 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:10561,security,hash,hash,10561,"d_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #19 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #20 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. =====",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:13143,security,sign,signal,13143,"s [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007ff0e930771d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2104. #4 TUnixSystem::StackTrace (this=0x691200) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007ff0e9305774 in TUnixSystem::DispatchSignals (this=0x691200, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.26.10-1.fc37.x86_64/core/unix/src/TUnixSystem.cxx:3615. #6 <signal handler called>. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >::~pair (this=0x22dedd8, __in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16357,security,hash,hash,16357,"_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16660,security,hash,hashtable,16660,"tail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::alloc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17221,security,hash,hash,17221,"> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unorder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17557,security,hash,hashtable,17557,"etail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:17733,security,hash,hash,17733,":char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:18365,security,hash,hash,18365,"_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf657",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19001,security,hash,hash,19001,"::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:19605,security,hash,hash,19605," std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:20741,security,hash,hash,20741,"::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:21413,security,hash,hash,21413,"d_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the cra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:25980,security,hash,hash,25980,"_deallocate_node (__n=0x22dedd0, this=<optimized out>) at /usr/include/c++/12/bits/hashtable_policy.h:1984. #16 std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26283,security,hash,hashtable,26283,"tail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::alloc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26844,security,hash,hash,26844,"> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unorder",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27180,security,hash,hashtable,27180,"etail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27356,security,hash,hash,27356,":char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:27988,security,hash,hash,27988,"_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf657",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:28624,security,hash,hash,28624,"::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >::~unordered_map (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/unordered_map.h:102. #20 std::_Destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:29228,security,hash,hash,29228," std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__pointer=0x1cf6570) at /usr/include/c++/12/bits/stl_construct.h:151. #21 std::allocator_traits<std::allocator<void> >::destroy<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > > (__p=0x1cf6570) at /usr/include/c++/12/bits/alloc_traits.h:648. #22 std::_Sp_counted_ptr_inplace<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:30364,security,hash,hash,30364,"::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > >, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:613. #23 0x0000000000409c77 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #24 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1cf6560) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #25 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:31036,security,hash,hash,31036," 0x0000000000408271 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #26 std::__shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #27 std::shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<ROOT::Detail::RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:523,testability,test,test,523,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:588,testability,test,test,588,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:2206,testability,context,context,2206,"lt for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:2235,testability,context,context,2235,"6 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #5 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:11663,testability,trace,trace,11663,"::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #21 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #22 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #23 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ```. </details>. <details>. <summary>ROOT backtrace</summary>. ```. *** Break *** segmentation violation. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. rax 0xfffffffffffffe00 rbx 0x00007ffe6d80d638 rcx 0x00007ff0e8af95c7. rdx 0x0000000000000000 rsi 0x00007ffe6d80d638 rdi 0x00000000000d979c. rbp 0x00007ffe6d80d6a0 rsp 0x00007ffe6d80d628 r8 0x0000000000000001. r9 0x0000000000000000 r10 0x0000000000000000 r11 0x0000000000000202. r12 0x0000000000000000 r13 0x00007ffe6d80d660 r14 0x00007ffe6d80df50. r15 0x0000000000691200 rip 0x00007ff0e8af95c7 eflags [ IF ] . cs 0x00000033 ss 0x0000002b ds 0x00000000 . es 0x00000000 fs 0x00000000 gs 0x00000000 . #0 0x00007ff0e8af95c7 in __GI___wait4 (pid=890780, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007ff0e8af958b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe6d80d638, options=options. entry=0) at waitpid.c:38. #2 0x00007ff0e8a7035b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22626,testability,trace,trace,22626,"_cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_strin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:281,usability,behavi,behavior,281,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:348,usability,user,user,348,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:488,usability,minim,minimal,488,"SIGSEGV from Destructor of ROOT::RDF::RNode; ### Describe the bug. On exit of program, program can crash from SIGSEGV triggered by `std::_Sp_counted_base` called during processing destructor of `ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface`. ### Expected behavior. Since `ROOT::RDF::RNode` is based on smart pointers, and user is not trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:1355,usability,help,help,1355,"ot trying to hack pointers itself, crash should not happen. ### To Reproduce. This problem arose from a larger framework, I made a minimal reproduce:. 1. Decompress [test.tar.gz](https://github.com/root-project/root/files/10410351/test.tar.gz) in anywhere you want, `cd <...>`. 2. `mkdir build && cd build && cmake .. && cmake --build .`. 3. Run `./makesample` to generate sample to be used. 4. Run `./main ../example/toy.json` : Crash. 5. Run `./main ../example/toy1.json` : Won't crash. ### Setup. I have 2 setups, one can reproduce the problem and another won't. #### The one can reproduce. Fedora 37, with GCC `12.2.1 20221121 (Red Hat 12.2.1-4) (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:2010,usability,help,help,2010,"`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/10 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Nov 16 2022, 10:42:54 |. | From tags/v6-26-10@v6-26-10 |. | With g++ (GCC) 12.2.1 20220819 (Red Hat 12.2.1-2) |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ROOT is installed from fedora official repository `dnf install root ...` (on my own machine). #### Another that finish step 4 without crashing. CentOS Linux release 7.9.2009 (Core), GCC `gcc version 11.2.0 (GCC)`. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With g++ (GCC) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. The ROOT and GCC is from cvmfs (`juno.ihep.ac.cn`). ### Additional context. <!--. Add any other context about the problem here. -->. <details>. <summary>GDB backtrace</summary>. ```. #0 0x00007ffff7f1e2c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #1 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2216c80) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #2 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x209f320, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #3 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x209f318, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #4 std::shared_ptr<ROOT::Detail::RDF::RDefineB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:5757,usability,clear,clear,5757,"td::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x209f250) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #10 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1ab6a80) at /usr/include/c++/12/bits/hashtable.h:2500. #11 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1ab6a80, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #12 std::unordered_map<std::__cxx11::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:16609,usability,clear,clear,16609,"td::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22387,usability,hint,hint,22387,"RDF::RDefineBase>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /us",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22431,usability,help,help,22431,"asic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:22702,usability,help,help,22702,"onst, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > > > const>::~shared_ptr (this=<optimized out>, this=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #28 ROOT::Internal::RDF::RColumnRegister::~RColumnRegister (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RColumnRegister.hxx:43. #29 ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase, void>::~RInterface (this=<optimized out>, this=<optimized out>) at /usr/include/root/ROOT/RDF/RInterface.hxx:104. #30 main (argc=<optimized out>, argv=<optimized out>) at /home/yan/codes/RDF_bug_report/main.cxx:82. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #7 0x00007ff0ead432c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:346. #8 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x2456450) at /usr/include/c++/12/bits/shared_ptr_base.h:317. #9 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x22dee00, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1071. #10 std::__shared_ptr<ROOT::Detail::RDF::RDefineBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr_base.h:1524. #11 std::shared_ptr<ROOT::Detail::RDF::RDefineBase>::~shared_ptr (this=0x22dedf8, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/shared_ptr.h:175. #12 std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/issues/12023:26232,usability,clear,clear,26232,"td::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, true> > >::_M_deallocate_nodes (this=<optimized out>, __n=0x22ded30) at /usr/include/c++/12/bits/hashtable_policy.h:2006. #17 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear (this=0x1cf6570) at /usr/include/c++/12/bits/hashtable.h:2500. #18 std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::shared_ptr<ROOT::Detail::RDF::RDefineBase> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable (this=0x1cf6570, __in_chrg=<optimized out>) at /usr/include/c++/12/bits/hashtable.h:1584. #19 std::unordered_map<std::__cxx11::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12023
https://github.com/root-project/root/pull/12024:214,interoperability,standard,standard,214,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:46,performance,memor,memory,46,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:93,performance,memor,memory,93,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1042,performance,cach,cache,1042,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1134,performance,cach,cache,1134,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1169,performance,memor,memory,1169,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1184,performance,cach,cache,1184,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1323,performance,cach,caches,1323,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:40,safety,avoid,avoid,40,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:484,safety,test,test,484,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:548,safety,test,test,548,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:925,safety,test,test,925,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1386,safety,test,test,1386,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:727,security,modif,modification,727,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:484,testability,test,test,484,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:548,testability,test,test,548,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:925,testability,test,test,925,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1386,testability,test,test,1386,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:46,usability,memor,memory,46,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:93,usability,memor,memory,93,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12024:1169,usability,memor,memory,1169,"[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces; This memory leak is demonstrated with the following ROOT macro:. ```. {. {. RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call). cout << ""make ws"" << endl;. RooWorkspace w(""combined"", ""combined"");. cout << ""factory method:"" << endl;. w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");. w.writeToFile(""/tmp/test.root"");. cout << ""reading back"" << endl;. {. TFile f(""/tmp/test.root"");. RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");. std::cout << ""deleting w2"" << endl;. delete w2;. }. std::cout << ""deleting w"" << endl;. }. }. ```. along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```. Processing test.C... Created 0x12cb8cc68 <--- this is the static instance. make ws. Created 0x7ffee2baaab0 <--- the workspace's cache. factory method:. reading back. Created 0x7fcbc7b39008 <--- the read-back workspace's cache. Created 0x7fcbd45a0b70 <--- memory leaking cache. deleting w2. Destroyed 0x7fcbc7b39008. deleting w. Destroyed 0x7ffee2baaab0. root [1] .q. Destroyed 0x12cb8cc68. ```. After the fix caches are created and destroyed as expected:. ```. Processing test.C... Created 0x1290a5c68. make ws. Created 0x7ffee623eab0. factory method:. reading back. Created 0x7f9bd8437408. deleting w2. Destroyed 0x7f9bd8437408. deleting w. Destroyed 0x7ffee623eab0. root [1] .q. Destroyed 0x1290a5c68. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12024
https://github.com/root-project/root/pull/12025:331,availability,failur,failures,331,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:14,deployability,fail,failing,14,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:331,deployability,fail,failures,331,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:304,performance,time,time,304,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:331,performance,failur,failures,331,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:14,reliability,fail,failing,14,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:331,reliability,fail,failures,331,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:22,safety,test,test,22,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:191,safety,test,test,191,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:22,testability,test,test,22,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12025:191,testability,test,test,191,"[DF] Removing failing test with shorter friends; According to https://github.com/root-project/root/issues/9137, we get bogus data if a friend is shorter than the main tree. The `datasetspec` test acknowledges this, but still checks the results in the MT case. This miraculously seems to work most of the time, but we sometimes see failures in the nightlies, especially on macOS, so remove it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12025
https://github.com/root-project/root/pull/12026:334,deployability,updat,updated,334,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:34,energy efficiency,model,model,34,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:149,energy efficiency,model,model,149,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:204,energy efficiency,model,model,204,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:43,interoperability,specif,specified,43,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:79,interoperability,format,format,79,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:158,interoperability,specif,specified,158,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:260,interoperability,format,format,260,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:304,safety,test,tested,304,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:334,safety,updat,updated,334,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:34,security,model,model,34,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:149,security,model,model,149,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:204,security,model,model,204,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:334,security,updat,updated,334,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12026:304,testability,test,tested,304,"[ntuple] Show all fields unless a model is specified; This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12026
https://github.com/root-project/root/pull/12028:124,availability,error,error,124,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:190,deployability,updat,updated,190,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:130,integrability,messag,message,130,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:130,interoperability,messag,message,130,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:306,modifiability,pac,package,306,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:383,modifiability,variab,variables,383,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:124,performance,error,error,124,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:124,safety,error,error,124,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:160,safety,test,tested,160,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:190,safety,updat,updated,190,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:359,safety,compl,complete,359,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:190,security,updat,updated,190,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:359,security,compl,complete,359,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:160,testability,test,tested,160,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12028:124,usability,error,error,124,"TGeoVolume class is designed for Int_t, not Long64_t; # This Pull request:. ## Changes or fixes:. warns of overflow with an error message. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). See https://root-forum.cern.ch/t/break-segmentation-violation-while-using-geometry-package/53087/7. Side note: To allow for Long64_t, a complete rewrite of all variables' data types would be needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12028
https://github.com/root-project/root/pull/12030:9,integrability,pub,public,9,"[RF] New public accessor methods for various roofit data members; A set of, hopefully, non-controversial changes to some roofit classes to allow certain data members to be accessed publicly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12030
https://github.com/root-project/root/pull/12030:181,integrability,pub,publicly,181,"[RF] New public accessor methods for various roofit data members; A set of, hopefully, non-controversial changes to some roofit classes to allow certain data members to be accessed publicly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12030
https://github.com/root-project/root/pull/12030:16,security,access,accessor,16,"[RF] New public accessor methods for various roofit data members; A set of, hopefully, non-controversial changes to some roofit classes to allow certain data members to be accessed publicly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12030
https://github.com/root-project/root/pull/12030:172,security,access,accessed,172,"[RF] New public accessor methods for various roofit data members; A set of, hopefully, non-controversial changes to some roofit classes to allow certain data members to be accessed publicly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12030
https://github.com/root-project/root/issues/12031:81,energy efficiency,model,model,81,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:197,energy efficiency,model,model,197,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:317,energy efficiency,Load,LoadEntry,317,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:339,energy efficiency,model,model,339,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:630,energy efficiency,Load,LoadEntry,630,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:733,energy efficiency,Load,LoadEntry,733,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:760,energy efficiency,model,model,760,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:317,performance,Load,LoadEntry,317,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:630,performance,Load,LoadEntry,630,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:733,performance,Load,LoadEntry,733,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:63,reliability,doe,does,63,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:81,security,model,model,81,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:197,security,model,model,197,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:339,security,model,model,339,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:760,security,model,model,760,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:58,usability,user,user,58,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:472,usability,behavi,behaviour,472,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/issues/12031:719,usability,behavi,behavior,719,"[ntuple] `RNTupleReader::Show()` produces empty output if user does not impose a model; - [x] Checked for duplicates. ### Describe the bug. Calling `RNTupleReader::Show()` on an instance where the model is generated from ntuple metadata on storage yields an empty JSON output. However, as can be seen below, calling `LoadEntry()` triggers model generation from the ntuple descriptor and the following `Show()` call produces the expected output. This results in surprising behaviour. ```c++. root [] auto ntuple = ROOT::Experimental::RNTupleReader::Open(“ntuple”, “/tmp/out.ntuple”);. root [] ntuple->Show(0);. {}. root [] ntuple->LoadEntry(0);. root [] ntuple->Show(0);. {. “i”: 42,. “f”: 12.2313. }. ```. ### Expected behavior. If `LoadEntry()` generates the model from the ntuple descriptor, most probably `Show()` should also do it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12031
https://github.com/root-project/root/pull/12033:224,interoperability,convers,conversion,224,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12033:562,interoperability,convers,conversion,562,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12033:63,modifiability,paramet,parameter,63,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12033:446,safety,accid,accidentally,446,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12033:590,safety,compl,completely,590,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12033:120,security,sign,signature,120,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12033:331,security,sign,signature,331,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12033:590,security,compl,completely,590,"[RF] Little improvements in RooFit; The type of the first bool parameter of one `RooTemplateProxy` constructor with the signature. `RooTemplateProxy(name, title, owner, bool, bool, bool)` is now templated such that implicit conversion from int or pointers to bool is disabled. This is because there is another constructor with the signature `RooTemplateProxy(name, title, owner, T& ref)`. It happened already more than once that other developers accidentally used a `T*` pointer instead of a reference, in which case it resolved to this constructor via implicit conversion to bool. This is completely meaningless and should not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12033
https://github.com/root-project/root/pull/12034:296,availability,error,error,296,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:358,availability,error,error,358,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:425,deployability,updat,updated,425,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:302,integrability,messag,messages,302,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:364,integrability,messag,messages,364,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:302,interoperability,messag,messages,302,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:364,interoperability,messag,messages,364,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:254,modifiability,exten,extend,254,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:296,performance,error,error,296,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:358,performance,error,error,358,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:296,safety,error,error,296,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:358,safety,error,error,358,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:395,safety,test,tested,395,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:425,safety,updat,updated,425,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:425,security,updat,updated,425,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:395,testability,test,tested,395,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:296,usability,error,error,296,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/pull/12034:358,usability,error,error,358,[RF] DRAFT: Improved asimov dataset generation; # This Pull request:. Adds more options to generate asimov datasets by. - allowing to generate asimov datasets for RooMultiVarGaussian. - adding a new constructor to RooExtendPdf that allows to more easily extend pdfs to fixed nEvents. - improving error messages emitted by AsymptoticsCalculator when creating error messages. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12034
https://github.com/root-project/root/issues/12035:2879,availability,Operat,Operating,2879,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2954,availability,down,download,2954,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:905,deployability,version,version,905,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1704,deployability,build,build,1704,"coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img wid",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2867,deployability,version,version,2867,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2936,deployability,instal,install,2936,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:3011,deployability,releas,releases,3011,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:587,energy efficiency,draw,drawn,587,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:701,energy efficiency,model,model,701,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:752,energy efficiency,model,model,752,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:823,energy efficiency,model,model,823,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1285,energy efficiency,draw,drawn,1285,"our issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1291,energy efficiency,model,model,1291,"sue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1347,energy efficiency,draw,drawn,1347," existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""cente",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1437,energy efficiency,draw,drawing,1437,"e bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1452,energy efficiency,draw,drawn,1452," clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-605",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1834,energy efficiency,Draw,Draw,1834,"y-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1859,energy efficiency,draw,drawn,1859,"s ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2037,energy efficiency,draw,drawn,2037,"xpected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. O",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:905,integrability,version,version,905,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2867,integrability,version,version,2867,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:707,interoperability,coordinat,coordinates,707,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:719,interoperability,convers,conversion,719,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:758,interoperability,coordinat,coordinate,758,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1223,interoperability,coordinat,coordinates,1223,"ra/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1266,interoperability,coordinat,coordinates,1266,"ing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinate",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2262,interoperability,coordinat,coordinates,2262,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2308,interoperability,coordinat,coordinates,2308,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:905,modifiability,version,version,905,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:950,modifiability,scal,scaling,950,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2867,modifiability,version,version,2867,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1658,safety,input,input,1658,"xt: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e662",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2488,safety,test,testing,2488,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:3021,safety,test,tested,3021,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:701,security,model,model,701,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:752,security,model,model,752,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:823,security,model,model,823,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1291,security,model,model,1291,"sue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1848,security,Rotat,Rotate,1848,"on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2153,security,rotat,rotate,2153,"ouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:656,testability,context,context,656,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:838,testability,trace,traced,838,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2488,testability,test,testing,2488,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:3021,testability,test,tested,3021,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:3079,testability,context,context,3079,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:3108,testability,context,context,3108,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:456,usability,clear,clear,456,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:504,usability,behavi,behavior,504,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:979,usability,behavi,behavior,979,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:997,usability,clear,clear,997,"Wrong pixel to 3D scene mapping on MacBook having retina display; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1100,usability,Guid,Guides,1100,"lease search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surfac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1155,usability,mous,mouse,1155,"ject/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotat",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1217,usability,mous,mouse,1217,"ern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1378,usability,mous,mouse,1378,"""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1513,usability,behavi,behavior,1513,"-->. The GL geometry viewer allows ""picking"" the center of view for a drawn geometry. This is not working correctly on Mac. In a different context: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1658,usability,input,input,1658,"xt: TGeo ray-tracing relies on pixel-to-model coordinates conversion to create rays in the model coordinate system for each viewport pixel and then intersect the model. The ray-traced image on mac shows ""gaps"" (see below) compared to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e662",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:1886,usability,Guid,Guides,1886,"ed to the Linux version, likely due to an unaccounted screen scaling factor. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. In the GL geometry viewer, the tab ""Guides/Camera center"" allows to ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2127,usability,mous,mouse,2127,"o ""Pick center"" with the mouse, which will change the default center of view to the 2D mouse coordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the prob",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2222,usability,mous,mouse,2222,"ordinates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/5293",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2375,usability,user,user-images,2375,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2579,usability,user,user-images,2579,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:2745,usability,user,user-images,2745,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/issues/12035:3179,usability,mous,mouse-position-shifts-in-geometry-display,3179,"inates of the clicked point on the 3D coordinates of the drawn model. The ""depth"" is chosen such that the point on the drawn object surface below the mouse is picked. For ray-tracing, expect a correct ""solid"" drawing of the drawn volume. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Run the macro `$ROOTSYS/tutorials/geom/rootgeom.C. root[0] gGeoManager->GetVolume(""R"")->Draw(""ogl"");. Rotate the drawn ""R"", then go to tab ""Guides"" and select [Camera center]/Show. A marker should appear in the default center of view. Now click on ""Pick center"", then click somewhere on the drawn letter ""R"". On linux, the center of view moves on the surface of ""R"" just below the mouse, and you can freely rotate about this. On mac, the center moves elsewhere than below the mouse position, showing that the device coordinates are wrongly mapped onto the scene coordinates. . <img width=""848"" alt=""center_pick_mac"" src=""https://user-images.githubusercontent.com/18400453/213129268-db36b3b4-7ffb-4f65-9d9d-6051296cabf4.png"">. for ray-tracing testing:. root[0] gGeoManager->GetVolume(""R"")->Raytrace();. Linux:. ![r_ray_linux](https://user-images.githubusercontent.com/18400453/213126543-d15c9edb-fb94-460b-855b-9e66256060ad.png). MacBook Air (M1, 2020). <img width=""478"" alt=""r_ray_mac"" src=""https://user-images.githubusercontent.com/18400453/213126640-8c7e6a84-0178-4102-8c93-ec6ed938cbd2.png"">. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. Any of the recent releases, tested on master. OS: linux Ok, mac buggy. ### Additional context. <!--. Add any other context about the problem here. -->. See: https://root-forum.cern.ch/t/mouse-position-shifts-in-geometry-display/52937/4",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12035
https://github.com/root-project/root/pull/12036:409,safety,test,test,409,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:497,safety,test,tested,497,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:564,safety,test,test,564,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:118,security,sign,signatures,118,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:409,testability,test,test,409,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:497,testability,test,tested,497,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:559,testability,unit,unit,559,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:564,testability,test,test,564,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/pull/12036:440,usability,support,supported,440,"[RF] New mechanism to implicitly convert numbers to RooFit arguments; A new mechanism is suggested to enable function signatures that accept both references to RooFit arguments, or `double`s that will be implicitly converted to `RooConst&`. The only thing that you need to do is to replace for example `RooAbsReal&` with `RooAbsReal::Ref` (or `RooAbsArg::Ref` if you want to use the RooAbsArg base class). To test this mechanism, it is now supported for the `RooGaussian` and `RooExtendedPdf` and tested in the rf311 tutorial and corresponding `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12036
https://github.com/root-project/root/issues/12037:12,availability,failur,failure,12,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:202,availability,error,error,202,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:512,availability,error,error,512,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:738,availability,error,error,738,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:1264,availability,ERROR,ERROR,1264,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:12,deployability,fail,failure,12,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:122,deployability,fail,fails,122,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:131,deployability,build,build,131,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:970,integrability,pub,public,970,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:1073,integrability,pub,public,1073,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:1440,integrability,inject,injected,1440,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:12,performance,failur,failure,12,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:202,performance,error,error,202,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:512,performance,error,error,512,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:738,performance,error,error,738,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:1264,performance,ERROR,ERROR,1264,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:12,reliability,fail,failure,12,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:122,reliability,fail,fails,122,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:202,safety,error,error,202,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:512,safety,error,error,512,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:738,safety,error,error,738,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:1264,safety,ERROR,ERROR,1264,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:1440,security,inject,injected,1440,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:202,usability,error,error,202,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:297,usability,Support,Support,297,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:384,usability,Support,Support,384,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:476,usability,Support,Support,476,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:512,usability,error,error,512,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:702,usability,Support,Support,702,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:738,usability,error,error,738,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/issues/12037:1264,usability,ERROR,ERROR,1264,"Compilation failure with g++ 12.2 and C++20; ### Describe the bug. ROOT master (c8ad00846344c090c3a6f653e0decf38ad324d65) fails to build with g++ 12.2 with `cmake -DCMAKE_CXX_STANDARD=20`. The reported error is:. ```. In file included from /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamReader.h:16,. from /home/bgruber/dev/root/interpreter/llvm/src/lib/Support/BinaryStreamReader.cpp:9:. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected unqualified-id before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ^~~~~. /home/bgruber/dev/root/interpreter/llvm/src/include/llvm/Support/BinaryStreamArray.h:331:31: error: expected ‘)’ before ‘const’. 331 | FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other). | ~^~~~~. | ). ```. Checking out the offending file:. ```c++. template <typename T>. class FixedStreamArrayIterator. : public iterator_facade_base<FixedStreamArrayIterator<T>,. std::random_access_iterator_tag, const T> {. public:. FixedStreamArrayIterator(const FixedStreamArray<T> &Array, uint32_t Index). : Array(Array), Index(Index) {}. FixedStreamArrayIterator<T>(const FixedStreamArrayIterator<T> &Other) // ERROR HERE. : Array(Other.Array), Index(Other.Index) {}. ... ```. indeed looks like wrong C++ syntax (the constructor shall only be named via an id-expression referring to the injected class name, see [here](https://eel.is/c++draft/class.ctor#general-1)). The `<T>` should be removed. The issue was fixed in upstream LLVM with [this commit](https://github.com/llvm/llvm-project/commit/2ccf0b76bcaf0895e04f14e3ff53c59dd96f9f0f). Please consider cherry-picking this commit. ### To Reproduce. 1. git clone ROOT master. 2. `cmake -DCMAKE_CXX_STANDARD=20`. 3. `make`. ### Setup. * gcc 12.2. * Ubuntu 22.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12037
https://github.com/root-project/root/pull/12038:114,deployability,observ,observed,114,[tmva] Fix the parallel running in ctest of some TMVA tutorial; This Pull request should fix the tutorial timeout observed in CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12038
https://github.com/root-project/root/pull/12038:15,performance,parallel,parallel,15,[tmva] Fix the parallel running in ctest of some TMVA tutorial; This Pull request should fix the tutorial timeout observed in CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12038
https://github.com/root-project/root/pull/12038:106,performance,time,timeout,106,[tmva] Fix the parallel running in ctest of some TMVA tutorial; This Pull request should fix the tutorial timeout observed in CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12038
https://github.com/root-project/root/pull/12038:106,safety,timeout,timeout,106,[tmva] Fix the parallel running in ctest of some TMVA tutorial; This Pull request should fix the tutorial timeout observed in CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12038
https://github.com/root-project/root/pull/12038:114,testability,observ,observed,114,[tmva] Fix the parallel running in ctest of some TMVA tutorial; This Pull request should fix the tutorial timeout observed in CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12038
https://github.com/root-project/root/pull/12039:16,performance,memor,memory,16,"[RF] Fix IO and memory problems in RooMomentMorph(Func)ND; The member that points to the last normalization set should not take part in IO. Also, a memory leak is fixed and some code is modernized by using `std::unique_ptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12039
https://github.com/root-project/root/pull/12039:148,performance,memor,memory,148,"[RF] Fix IO and memory problems in RooMomentMorph(Func)ND; The member that points to the last normalization set should not take part in IO. Also, a memory leak is fixed and some code is modernized by using `std::unique_ptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12039
https://github.com/root-project/root/pull/12039:16,usability,memor,memory,16,"[RF] Fix IO and memory problems in RooMomentMorph(Func)ND; The member that points to the last normalization set should not take part in IO. Also, a memory leak is fixed and some code is modernized by using `std::unique_ptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12039
https://github.com/root-project/root/pull/12039:148,usability,memor,memory,148,"[RF] Fix IO and memory problems in RooMomentMorph(Func)ND; The member that points to the last normalization set should not take part in IO. Also, a memory leak is fixed and some code is modernized by using `std::unique_ptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12039
https://github.com/root-project/root/pull/12040:185,availability,state,state,185,"[RF] Improve implementation of `RooAbsArg::redirectServers()`; The `RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:2003,availability,redund,redundantly,2003,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1050,deployability,updat,updating,1050,"vers()`; The `RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a valu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:2003,deployability,redundan,redundantly,2003,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1976,energy efficiency,optim,optimized,1976,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:185,integrability,state,state,185,"[RF] Improve implementation of `RooAbsArg::redirectServers()`; The `RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1106,integrability,interfac,interface,1106,"te dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only onc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:719,interoperability,prox,proxy,719,"[RF] Improve implementation of `RooAbsArg::redirectServers()`; The `RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:870,interoperability,prox,proxy,870,"[RF] Improve implementation of `RooAbsArg::redirectServers()`; The `RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1063,interoperability,prox,proxies,1063,"`RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shap",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1106,interoperability,interfac,interface,1106,"te dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only onc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1106,modifiability,interfac,interface,1106,"te dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only onc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1976,performance,optimiz,optimized,1976,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1869,reliability,doe,doesn,1869,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:2003,reliability,redundan,redundantly,2003,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1050,safety,updat,updating,1050,"vers()`; The `RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a valu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:2003,safety,redund,redundantly,2003,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:2203,safety,safe,safer,2203,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1050,security,updat,updating,1050,"vers()`; The `RooAbsArg::replaceServer()` function is quite dangerous to use,. because it leaves your RooFit objects in an invalid state. See for. example this code:. ```c++. RooRealVar x(""x"", ""x"", -10, 10);. RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a valu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12040:1495,usability,user,usercode,1495,"ooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);. RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. RooRealVar mean2(mean);. gauss.replaceServer(mean, mean2, true, false);. gauss.Print(""v"");. std::cout << ""x : "" << &gauss.getX() << std::endl;. std::cout << ""mean : "" << &gauss.getMean() << std::endl;. std::cout << ""sigma: "" << &gauss.getSigma() << std::endl;. ```. Here, the proxy for `mean` will still point to the original `mean`, but. the server was redirected to the copy `mean2`. This is dangerous, and. desyncing of the proxy and server list are actually the underlying. reason for a set of RooFit problems. The safter `RooAbsArg::redirectServers()` should always be used,. becauese that one is also updating the proxies. Therefore, the. `replaceServer()` interface is now marked as dangerous everywhere. possible: in a printout when you use it, in the docs, and with the. `R__SUGGEST_ALTERNATIVE` macro. Internally, the `replaceServer()` was also used in `redirectServers()`. But this was also causing problems: `replaceServer()` always adds the. new server at the end of the server list, which means the list gets. reordered. This can confuse usercode that rely on the server list being. ordered (yes, that's not a good idea anyway, but there are many codes. that do this). This reordering can also be seein in the example code. above. Therefore, the `redirectServers()` function is now rewritten to replace. the server without changing its position in the server list. This also. means that the original server list doesn't need to be copied, as not. iterators are invalidated. Furthermore, the `redirectServers()` is more optimized now. Before, it. redundantly figured out whether a server was a value and/or shape. server. Now, this is figured out only once when removing the original. server from the client. In summary: this PR makes RooFit code safer and faster by changing. `RooAbsArg::redirectServers()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12040
https://github.com/root-project/root/pull/12042:14,deployability,build,build,14,"[PyROOT] Only build RooFit and TMVA pythonizations if needed; Like this, we are polluting the build and install directories less with unneeded files and it also speeds up the build process a bit if RooFit and/or TMVA are disabled. Their pythonization files don't need to be compiled to `.pyc` files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12042
https://github.com/root-project/root/pull/12042:94,deployability,build,build,94,"[PyROOT] Only build RooFit and TMVA pythonizations if needed; Like this, we are polluting the build and install directories less with unneeded files and it also speeds up the build process a bit if RooFit and/or TMVA are disabled. Their pythonization files don't need to be compiled to `.pyc` files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12042
https://github.com/root-project/root/pull/12042:104,deployability,instal,install,104,"[PyROOT] Only build RooFit and TMVA pythonizations if needed; Like this, we are polluting the build and install directories less with unneeded files and it also speeds up the build process a bit if RooFit and/or TMVA are disabled. Their pythonization files don't need to be compiled to `.pyc` files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12042
https://github.com/root-project/root/pull/12042:175,deployability,build,build,175,"[PyROOT] Only build RooFit and TMVA pythonizations if needed; Like this, we are polluting the build and install directories less with unneeded files and it also speeds up the build process a bit if RooFit and/or TMVA are disabled. Their pythonization files don't need to be compiled to `.pyc` files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12042
https://github.com/root-project/root/issues/12043:1581,availability,operat,operation,1581,"}. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----+----------------+. | 1 | 2.0000000 | . +-----+----------------+. | 2 | 2.0000000 | . +-----+----------------+. | 3 | 2.0000000 | . +-----+----------------+. | 4 | 2.0000000 | . +-----+----------------+. | 5 | 2.0000000 | . +-----+----------------+. | 6 | 2.0000000 | . +-----+----------------+. | 7 | 2.0000000 | . +-----+----------------+. | 8 | 2.0000000 | . +-----+----------------+. | 9 | 2.0000000 | . +-----+----------------+. | 10 | 0.50000000 | . +-----+----------------+. | 11 | 0.50000000 | . +-----+----------------+. | 12 | 0.50000000 | . +-----+----------------+. | 13 | 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:1728,availability,operat,operations,1728,"rees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----+----------------+. | 1 | 2.0000000 | . +-----+----------------+. | 2 | 2.0000000 | . +-----+----------------+. | 3 | 2.0000000 | . +-----+----------------+. | 4 | 2.0000000 | . +-----+----------------+. | 5 | 2.0000000 | . +-----+----------------+. | 6 | 2.0000000 | . +-----+----------------+. | 7 | 2.0000000 | . +-----+----------------+. | 8 | 2.0000000 | . +-----+----------------+. | 9 | 2.0000000 | . +-----+----------------+. | 10 | 0.50000000 | . +-----+----------------+. | 11 | 0.50000000 | . +-----+----------------+. | 12 | 0.50000000 | . +-----+----------------+. | 13 | 0.50000000 | . +-----+----------------+. | 14 | 0.50000000 | . +-----+----------------+. | 15 | 0.50000000 | . +-----+----------------+. | 16 | 0.50",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:1790,availability,operat,operations,1790,"ot"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----+----------------+. | 1 | 2.0000000 | . +-----+----------------+. | 2 | 2.0000000 | . +-----+----------------+. | 3 | 2.0000000 | . +-----+----------------+. | 4 | 2.0000000 | . +-----+----------------+. | 5 | 2.0000000 | . +-----+----------------+. | 6 | 2.0000000 | . +-----+----------------+. | 7 | 2.0000000 | . +-----+----------------+. | 8 | 2.0000000 | . +-----+----------------+. | 9 | 2.0000000 | . +-----+----------------+. | 10 | 0.50000000 | . +-----+----------------+. | 11 | 0.50000000 | . +-----+----------------+. | 12 | 0.50000000 | . +-----+----------------+. | 13 | 0.50000000 | . +-----+----------------+. | 14 | 0.50000000 | . +-----+----------------+. | 15 | 0.50000000 | . +-----+----------------+. | 16 | 0.50000000 | . +-----+----------------+. | 17 | 0.50000000 | . +--",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:966,deployability,depend,depending,966,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:1174,deployability,Contain,Contains,1174,"RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----+----------------+. | 1 | 2.0000000 | . +-----+----------------+. | 2 | 2.0000000 | . +-----+----------------+. | 3 | 2.0000000 | . +-----+----------------+. | 4 | 2.0000000 | . ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:966,integrability,depend,depending,966,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:966,modifiability,depend,depending,966,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:359,safety,test,testing,359,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:742,safety,test,testing,742,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:966,safety,depend,depending,966,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:979,safety,input,input,979,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:1094,security,RSa,RSampleInfo,1094," #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----+----------------+. | 1 | 2.0000000 | . +-----+----------------+. | 2 | 2.0000000 | . +-----+-------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:73,testability,simpl,simple,73,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:359,testability,test,testing,359,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:742,testability,test,testing,742,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:966,testability,depend,depending,966,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:6,usability,interact,interaction,6,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:73,usability,simpl,simple,73,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:576,usability,Close,Close,576,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:979,usability,input,input,979,"Wrong interaction of DefinePerSample with multiple executions; From this simple reproducer:. ```cpp. #include <TCanvas.h>. #include <TFile.h>. #include <TTree.h>. #include <ROOT/RDataFrame.hxx>. #include <iostream>. #include <string>. #include <vector>. void generateData(const char *filename, int n, double value). {. TFile f{filename, ""RECREATE"", ""file for testing""};. double var1;. TTree tree{""AnalysisTree"", ""AnalysisTree""};. tree.Branch(""column1"", &var1, ""column1/D"");. for (unsigned int i = 0; i < n; i++) {. var1 = value;. tree.Fill();. }. tree.Write();. f.Write();. f.Close();. }. int main(). {. std::vector<std::string> fileNames{""test1.root"", ""test2.root""};. std::vector<double> weights{2, 0.5};. // Create two files with trees for testing. // 10 entries of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/issues/12043:1756,usability,behavi,behaviour,1756,"ies of 0.5. generateData(""test1.root"", 10, 0.5);. // 10 entries of 2. generateData(""test2.root"", 10, 2);. // Create Dataframe from files. ROOT::RDataFrame df(""AnalysisTree"", fileNames);. // Define weights depending on input file. auto df2 =. df.DefinePerSample(""weightbysample"", [&fileNames, &weights](unsigned int, const ROOT::RDF::RSampleInfo &id) {. for (unsigned int i = 0; i < fileNames.size(); i++). if (id.Contains(fileNames[i])). return weights[i];. return -1.;. });. auto s0 = df2.Sum<double>(""weightbysample"");. auto d0 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s0 << ""\n"";. d0->Print();. auto s1 = df2.Sum<double>(""weightbysample"");. auto d1 = df2.Display({""weightbysample""}, 20);. std::cout << ""sum of weights: "" << *s1 << ""\n"";. d1->Print();. }. ```. The `DefinePerSample` operation defines a column of 20 entries, 10 should have value `2`, the following 10 should have value `0.5`. The first set of `Sum` and `Display` operations show the correct behaviour, then the second set of operations reports a wrong result. All the 20 entries of the column are `0.5`:. ```. sum of weights: 25. +-----+----------------+. | Row | weightbysample | . +-----+----------------+. | 0 | 2.0000000 | . +-----+----------------+. | 1 | 2.0000000 | . +-----+----------------+. | 2 | 2.0000000 | . +-----+----------------+. | 3 | 2.0000000 | . +-----+----------------+. | 4 | 2.0000000 | . +-----+----------------+. | 5 | 2.0000000 | . +-----+----------------+. | 6 | 2.0000000 | . +-----+----------------+. | 7 | 2.0000000 | . +-----+----------------+. | 8 | 2.0000000 | . +-----+----------------+. | 9 | 2.0000000 | . +-----+----------------+. | 10 | 0.50000000 | . +-----+----------------+. | 11 | 0.50000000 | . +-----+----------------+. | 12 | 0.50000000 | . +-----+----------------+. | 13 | 0.50000000 | . +-----+----------------+. | 14 | 0.50000000 | . +-----+----------------+. | 15 | 0.50000000 | . +-----+----------------+. | 16 | 0.50000000 | . +-----+----------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/12043
https://github.com/root-project/root/pull/12044:85,availability,sli,slighly,85,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:37,deployability,manag,management,37,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:37,energy efficiency,manag,management,37,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:118,energy efficiency,reduc,reduce,118,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:346,energy efficiency,reduc,reduces,346,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:374,energy efficiency,reduc,reduces,374,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:404,energy efficiency,alloc,allocations,404,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:31,integrability,queue,queue,31,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:240,integrability,buffer,buffer,240,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:636,integrability,queue,queue,636,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:459,modifiability,reu,reused,459,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:17,performance,I/O,I/O,17,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:31,performance,queue,queue,31,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:125,performance,content,contention,125,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:175,performance,I/O,I/O,175,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:354,performance,content,contention,354,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:636,performance,queue,queue,636,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:85,reliability,sli,slighly,85,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:37,safety,manag,management,37,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:664,safety,test,tested,664,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:664,testability,test,tested,664,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12044:492,usability,clear,cleared,492,"[ntuple] Improve I/O and unzip queue management in `RClusterPool`; This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip. threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12044
https://github.com/root-project/root/pull/12045:64,testability,simpl,simply,64,"Revert ""[cmake] Xcode 14 warns about -undefined dynamic_lookup; simply suppress:""; See #11937 for why `-flat_namespace` is bad. This reverts commit a05d4be. This PR fixes #11937.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12045
https://github.com/root-project/root/pull/12045:64,usability,simpl,simply,64,"Revert ""[cmake] Xcode 14 warns about -undefined dynamic_lookup; simply suppress:""; See #11937 for why `-flat_namespace` is bad. This reverts commit a05d4be. This PR fixes #11937.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12045
https://github.com/root-project/root/pull/12046:407,availability,recov,recover,407,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:407,deployability,recov,recover,407,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:30,interoperability,prox,proxies,30,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:87,interoperability,prox,proxies,87,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:216,interoperability,prox,proxy,216,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:557,interoperability,prox,proxies,557,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:407,reliability,recov,recover,407,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:17,safety,except,exception,17,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:266,safety,except,exception,266,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:407,safety,recov,recover,407,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:407,security,recov,recover,407,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:400,testability,simpl,simply,400,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:400,usability,simpl,simply,400,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12046:573,usability,user,user,573,"[RF] Don't throw exception if proxies are inconsistent in RooProduct; The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12046
https://github.com/root-project/root/pull/12047:149,testability,Simpl,Simple,149,"[cling] Support noexcept cxa_atexit (libc++):; Also libc++ has a noexcept __cxa_atexit, see https://root-forum.cern.ch/t/libc-issue-on-linux/52433 . Simple ask the compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12047
https://github.com/root-project/root/pull/12047:8,usability,Support,Support,8,"[cling] Support noexcept cxa_atexit (libc++):; Also libc++ has a noexcept __cxa_atexit, see https://root-forum.cern.ch/t/libc-issue-on-linux/52433 . Simple ask the compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12047
https://github.com/root-project/root/pull/12047:149,usability,Simpl,Simple,149,"[cling] Support noexcept cxa_atexit (libc++):; Also libc++ has a noexcept __cxa_atexit, see https://root-forum.cern.ch/t/libc-issue-on-linux/52433 . Simple ask the compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12047
https://github.com/root-project/root/pull/12048:16,integrability,pub,public,16,[RF] additional public methods for accessing/modifying product factors; Adds public methods to allow access and modification of the underlying factors of RooProdPdf and RooProduct,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12048
https://github.com/root-project/root/pull/12048:77,integrability,pub,public,77,[RF] additional public methods for accessing/modifying product factors; Adds public methods to allow access and modification of the underlying factors of RooProdPdf and RooProduct,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12048
https://github.com/root-project/root/pull/12048:35,security,access,accessing,35,[RF] additional public methods for accessing/modifying product factors; Adds public methods to allow access and modification of the underlying factors of RooProdPdf and RooProduct,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12048
https://github.com/root-project/root/pull/12048:45,security,modif,modifying,45,[RF] additional public methods for accessing/modifying product factors; Adds public methods to allow access and modification of the underlying factors of RooProdPdf and RooProduct,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12048
https://github.com/root-project/root/pull/12048:101,security,access,access,101,[RF] additional public methods for accessing/modifying product factors; Adds public methods to allow access and modification of the underlying factors of RooProdPdf and RooProduct,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12048
https://github.com/root-project/root/pull/12048:112,security,modif,modification,112,[RF] additional public methods for accessing/modifying product factors; Adds public methods to allow access and modification of the underlying factors of RooProdPdf and RooProduct,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12048
https://github.com/root-project/root/pull/12049:261,availability,error,error,261,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:438,deployability,build,build,438,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:483,deployability,build,build,483,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:686,deployability,updat,updated,686,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:99,interoperability,specif,specification,99,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:15,performance,I/O,I/O,15,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:261,performance,error,error,261,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:261,safety,error,error,261,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:656,safety,test,tested,656,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:686,safety,updat,updated,686,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:686,security,updat,updated,686,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:656,testability,test,tested,656,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:19,usability,custom,customization,19,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12049:261,usability,error,error,261,"[ntuple] Allow I/O customization rules with an empty target list; The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list. ```. Fatal: rule->GetTarget() != nullptr violated at line 1006 of. `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'. aborting. ```. Therefore, in principle we should also allow these rules for now. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12049
https://github.com/root-project/root/pull/12050:320,deployability,automat,automatic,320,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:182,energy efficiency,Current,Currently,182,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:302,energy efficiency,model,model,302,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:26,integrability,wrap,wrapper,26,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:86,integrability,wrap,wrapper,86,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:26,interoperability,wrapper,wrapper,26,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:86,interoperability,wrapper,wrapper,86,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:302,security,model,model,302,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:320,testability,automat,automatic,320,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12050:243,usability,support,supported,243,"[RF] Add a C/C++ function wrapper class in roofit.; This commit adds a C/C++ function wrapper class that takes in code as a string, declares it, and stores it as a function pointer. Currently, only functions of type `double (*)(double* )` are supported. This class will later be used to store a roofit model as code for automatic differentiation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12050
https://github.com/root-project/root/pull/12051:69,integrability,Batch,BatchMode,69,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:189,integrability,Batch,BatchMode,189,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:10,performance,perform,performance,10,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:69,performance,Batch,BatchMode,69,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:137,performance,time,time,137,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:189,performance,Batch,BatchMode,189,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:10,usability,perform,performance,10,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:152,usability,undo,undo,152,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12051:216,usability,document,documentation,216,[RF] Some performance improvements to RooFit likelihood creation and BatchMode; * speed up `RooProdPdf::getConstraints()`. * don't waste time trying to undo changes to computation graph in BatchMode. * some typo and documentation fixes. More detail in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12051
https://github.com/root-project/root/pull/12052:190,deployability,upgrad,upgrades,190,"[cling] Explicitly create FunctionDecl in DeclExtractor; The function `EnforceInitOrder()` was using `ImplicitlyDefineFunction()` as a shortcut to define a function returning an int. Future upgrades of LLVM will add an assert in that function because it is not allowed to be used when compiling C++, which Cling obviously does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12052
https://github.com/root-project/root/pull/12052:190,modifiability,upgrad,upgrades,190,"[cling] Explicitly create FunctionDecl in DeclExtractor; The function `EnforceInitOrder()` was using `ImplicitlyDefineFunction()` as a shortcut to define a function returning an int. Future upgrades of LLVM will add an assert in that function because it is not allowed to be used when compiling C++, which Cling obviously does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12052
https://github.com/root-project/root/pull/12052:322,reliability,doe,does,322,"[cling] Explicitly create FunctionDecl in DeclExtractor; The function `EnforceInitOrder()` was using `ImplicitlyDefineFunction()` as a shortcut to define a function returning an int. Future upgrades of LLVM will add an assert in that function because it is not allowed to be used when compiling C++, which Cling obviously does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12052
https://github.com/root-project/root/pull/12052:219,testability,assert,assert,219,"[cling] Explicitly create FunctionDecl in DeclExtractor; The function `EnforceInitOrder()` was using `ImplicitlyDefineFunction()` as a shortcut to define a function returning an int. Future upgrades of LLVM will add an assert in that function because it is not allowed to be used when compiling C++, which Cling obviously does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12052
https://github.com/root-project/root/pull/12052:135,usability,shortcut,shortcut,135,"[cling] Explicitly create FunctionDecl in DeclExtractor; The function `EnforceInitOrder()` was using `ImplicitlyDefineFunction()` as a shortcut to define a function returning an int. Future upgrades of LLVM will add an assert in that function because it is not allowed to be used when compiling C++, which Cling obviously does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12052
https://github.com/root-project/root/pull/12053:169,availability,operat,operations,169,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:242,availability,operat,operations,242,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:327,availability,avail,available,327,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:353,availability,operat,operations,353,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:31,deployability,API,API,31,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:130,deployability,API,API,130,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:301,deployability,releas,release,301,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:31,integrability,API,API,31,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:64,integrability,Filter,Filter,64,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:130,integrability,API,API,130,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:199,integrability,Filter,Filter,199,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:31,interoperability,API,API,31,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:130,interoperability,API,API,130,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:327,reliability,availab,available,327,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:327,safety,avail,available,327,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:327,security,availab,available,327,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:45,usability,support,support,45,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:224,usability,support,support,224,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12053:368,usability,support,supported,368,"Hide new pythonizations of the API that only support Define and Filter; The recently introduced pythonizations for the RDataFrame API allow passing. Python callables to operations such as Define and Filter, but there is no. support for other operations. For now, hide this functionality for the 6.28. release cycle, it will be available once all common operations are supported.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12053
https://github.com/root-project/root/pull/12054:12,deployability,patch,patch,12,Revert LLVM patch for win32; The issue was the in-process lookup of C++ symbols failed with a `GlobalPrefix`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12054
https://github.com/root-project/root/pull/12054:80,deployability,fail,failed,80,Revert LLVM patch for win32; The issue was the in-process lookup of C++ symbols failed with a `GlobalPrefix`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12054
https://github.com/root-project/root/pull/12054:80,reliability,fail,failed,80,Revert LLVM patch for win32; The issue was the in-process lookup of C++ symbols failed with a `GlobalPrefix`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12054
https://github.com/root-project/root/pull/12054:12,safety,patch,patch,12,Revert LLVM patch for win32; The issue was the in-process lookup of C++ symbols failed with a `GlobalPrefix`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12054
https://github.com/root-project/root/pull/12054:12,security,patch,patch,12,Revert LLVM patch for win32; The issue was the in-process lookup of C++ symbols failed with a `GlobalPrefix`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12054
https://github.com/root-project/root/pull/12055:120,deployability,scale,scaled,120,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:185,deployability,scale,scaled,185,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:413,deployability,updat,updated,413,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:120,energy efficiency,scale,scaled,120,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:185,energy efficiency,scale,scaled,185,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:239,energy efficiency,charg,charge,239,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:260,energy efficiency,draw,drawing,260,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:120,modifiability,scal,scaled,120,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:185,modifiability,scal,scaled,185,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:120,performance,scale,scaled,120,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:185,performance,scale,scaled,185,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:383,safety,test,tested,383,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:413,safety,updat,updated,413,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:413,security,updat,updated,413,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12055:383,testability,test,tested,383,"Plot markers using their actual size; The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:. Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:. Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12055
https://github.com/root-project/root/pull/12057:48,deployability,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12057:164,deployability,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12057:48,safety,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12057:164,safety,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12057:420,safety,test,testing,420,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12057:48,security,patch,patches,48,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12057:164,security,patch,patches,164,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12057:420,testability,test,testing,420,"[v628][RF] Backports of RooFit PRs to `v6-28-00-patches`: Part 5; This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017. 2. https://github.com/root-project/root/pull/12022. Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing. 3. https://github.com/root-project/root/pull/12024. 4. https://github.com/root-project/root/pull/12029. 5. https://github.com/root-project/root/pull/12030. 6. https://github.com/root-project/root/pull/12033. 7. https://github.com/root-project/root/pull/12039. 8. https://github.com/root-project/root/pull/12046. 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12057
https://github.com/root-project/root/pull/12058:198,deployability,modul,module,198,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:255,deployability,modul,module,255,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:301,deployability,modul,module,301,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:368,deployability,modul,module,368,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:435,deployability,modul,module,435,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:516,deployability,modul,module,516,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:605,deployability,modul,module,605,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:682,deployability,modul,module,682,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:762,deployability,modul,module,762,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:849,deployability,modul,module,849,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:51,energy efficiency,Core,Core,51,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:142,energy efficiency,Core,Core,142,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:206,energy efficiency,Core,Core,206,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:198,modifiability,modul,module,198,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:255,modifiability,modul,module,255,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:301,modifiability,modul,module,301,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:368,modifiability,modul,module,368,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:435,modifiability,modul,module,435,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:516,modifiability,modul,module,516,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:605,modifiability,modul,module,605,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:682,modifiability,modul,module,682,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:762,modifiability,modul,module,762,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:849,modifiability,modul,module,849,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:198,safety,modul,module,198,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:255,safety,modul,module,255,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:301,safety,modul,module,301,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:368,safety,modul,module,368,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:435,safety,modul,module,435,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:516,safety,modul,module,516,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:605,safety,modul,module,605,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:682,safety,modul,module,682,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:762,safety,modul,module,762,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12058:849,safety,modul,module,849,"[cmake] Do not duplicate foundation etc headers in Core.pcm:; This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12058
https://github.com/root-project/root/pull/12059:103,deployability,contain,containers,103,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1066,deployability,updat,updated,1066," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:919,interoperability,convers,conversion,919,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:156,modifiability,paramet,parameters,156,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:553,modifiability,reu,reuse,553,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:534,reliability,doe,does,534,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:803,safety,test,tested,803,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:902,safety,prevent,prevent,902,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:981,safety,test,tested,981,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1066,safety,updat,updated,1066," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1476,safety,test,test,1476," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1484,safety,test,test,1484," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1807,safety,test,test,1807," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1814,safety,test,test,1814," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:902,security,preven,prevent,902,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1066,security,updat,updated,1066," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:85,testability,understand,understanding,85,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:803,testability,test,tested,803,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:981,testability,test,tested,981,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1476,testability,test,test,1476," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1484,testability,test,test,1484," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1807,testability,test,test,1807," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1814,testability,test,test,1814," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:213,usability,custom,custom,213,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:612,usability,person,personally,612,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:778,usability,support,support,778,"New constructors for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1943,usability,custom,custom,1943," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12059:1992,usability,custom,custom,1992," for TAxis, THnSparse and friends.; ## Changes or fixes:. With ROOT6 understanding STL containers, there is no reason to pass arrays as two parameters ``(int size, some_t* array)``. . A TAxis with custom bins can now be constructed from a ``std::vector<double>``, which will be convenient later. . A THnSparseT can now be constructed from either a ``std::vector<TAxis*>`` (more in the spirit ""always use pointers"" of ROOT) or ``std::vector<TAxis>`` (which allows neatly filling the vector from a initializer list, but does not allow the reuse of one TAxis object in different vectors, not that I personally care). . Both forms will allow providing some TAxis in the (bins, min, max) scheme and other axes as an explicit list, which previous constructors did not support. (I have not yet tested such histograms much yet.). One might discuss marking the new TAxis constructor explicit to prevent implicit conversion of ``std::vector<double>``. . ## Checklist:. - [x] tested changes locally (compiles, GetAxis results look like what I expected.). - [X] updated the docs (if necessary) (Only the /// Comment in some constructors). Excerpt from [test2.txt](https://github.com/root-project/root/files/10451814/test2.txt). ```. // old:. std::vector<double> xv{0, 1, 2, 3, 4, 5};. TAxis a0 {int(xv.size()-1), xv.data()};. // new: construct axis from std::vector<double> bin list. TAxis a1 {{0, 1, 2, 3, 4, 5}}; . ... //THnSparseX by std::vector<TAxis>:. THnSparseD h{""test"", ""test"",. // std::vector<TAxis>. {{100, 0., 20.}, // TAxis by bins, min, max. {int(xv.size()-1), xv.data()}, // TAxis by bins, double*. {{7, 8, 9, 10, 11}} }}; // TAxis by new constructor. ```. Excerpt from [out.txt](https://github.com/root-project/root/files/10451816/out.txt):. ```. THnSparseT<TArrayD> (*0x7ffd225ee5a0): ""test"" ""test"". 3 dimensions, 1 entries in 1 filled bins. axis 0: 100 bins from 0 to 20 (uniform bin widths). axis 1: 5 bins from 0 to 5 (custom bin widths). axis 2: 4 bins from 7 to 11 (custom bin widths). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12059
https://github.com/root-project/root/pull/12061:957,availability,stead,steady,957,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:207,integrability,pub,public,207,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:232,integrability,pub,public,232,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:697,interoperability,bind,binding,697,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:765,interoperability,bind,binding,765,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:697,modifiability,bind,binding,697,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:765,modifiability,bind,binding,765,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:68,performance,memor,memory,68,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:964,performance,memor,memory,964,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:1040,performance,memor,memory,1040,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:68,usability,memor,memory,68,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:964,usability,memor,memory,964,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12061:1040,usability,memor,memory,1040,"[math] Replace TRef with array indices in `TFoamCell`; This fixes a memory leak related to the usage of `TRef` in `TFoamCell`. that can be reproduced with the following code:. ```C++. class MyTFoamBinding : public TFoamIntegrand {. public:. double Density(Int_t ndim, double *) override { return 1.0; }. };. void reproTFoam(). {. ProcInfo_t procinfo;. const float toMB = 1.f / 1024.f;. std::size_t nToys = 5000;. TRandom3 rand{};. for (std::size_t index_toy = 1; index_toy <= nToys; index_toy++) {. if (index_toy % 500 == 0) {. gSystem->GetProcInfo(&procinfo);. std::cout << index_toy << "": "" << procinfo.fMemResident * toMB. << "" "" << procinfo.fMemVirtual * toMB << std::endl;. }. MyTFoamBinding binding{};. TFoam tfoam{""TFOAM""};. tfoam.SetkDim(1);. tfoam.SetRho(&binding);. tfoam.SetPseRan(&rand);. tfoam.SetnCells(30);. tfoam.SetnSampl(200);. tfoam.SetPseRan(&rand);. tfoam.SetChat(0);. tfoam.Initialize();. }. }. ```. Before this commit, you will see a steady memory increase that is gone. after this commit. This fixes the fundamental memory increase in RooFit toy studies,. reported for example in https://github.com/root-project/root/issues/8984.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12061
https://github.com/root-project/root/pull/12062:18,energy efficiency,load,loading,18,Fix lazy template loading for macOS with C++17; Fixes https://github.com/root-project/root/issues/12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12062
https://github.com/root-project/root/pull/12062:18,performance,load,loading,18,Fix lazy template loading for macOS with C++17; Fixes https://github.com/root-project/root/issues/12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12062
https://github.com/root-project/root/pull/12063:103,deployability,build,builds,103,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:184,deployability,releas,release,184,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:369,deployability,updat,updated,369,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:90,energy efficiency,Current,Currently,90,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:268,integrability,event,eventual,268,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:339,safety,test,tested,339,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:369,safety,updat,updated,369,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:369,security,updat,updated,369,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:339,testability,test,tested,339,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:8,usability,workflow,workflow,8,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12063:406,usability,document,documentation,406,"Root CI workflow; ## This Pull request:. This pull request adds a github action for a CI. Currently it builds the master branch only, but adding functionality to rebase a feature- and release branch based on pull-request metadata should be easy. Next steps are to fix eventual bugs and implement a CI to run roottest. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (not really but WIP documentation is here: https://codimd.web.cern.ch/GCUf9u1QTU-rdsPq9M7pig).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12063
https://github.com/root-project/root/pull/12064:11,integrability,pub,public,11,"[RF] Extra public accessor methods in root browser classes; This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12064
https://github.com/root-project/root/pull/12064:111,integrability,pub,public,111,"[RF] Extra public accessor methods in root browser classes; This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12064
https://github.com/root-project/root/pull/12064:246,integrability,pub,public,246,"[RF] Extra public accessor methods in root browser classes; This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12064
https://github.com/root-project/root/pull/12064:18,security,access,accessor,18,"[RF] Extra public accessor methods in root browser classes; This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12064
https://github.com/root-project/root/pull/12064:118,security,access,accessor,118,"[RF] Extra public accessor methods in root browser classes; This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12064
https://github.com/root-project/root/pull/12064:253,security,access,access,253,"[RF] Extra public accessor methods in root browser classes; This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12064
https://github.com/root-project/root/pull/12064:287,usability,help,help,287,"[RF] Extra public accessor methods in root browser classes; This is a small MR for the addition of a few extra public accessor methods for some parts of the root browser classes. These classes are using in the new, experiment, RooBrowser. Having public access to these data members will help with the future development of that feature, and I hope the methods added will be acceptable. . Please Note: Will need pulling into the 6.28 branch!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12064
https://github.com/root-project/root/pull/12065:72,availability,error,error,72,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:258,availability,error,error,258,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:623,availability,error,error,623,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:919,availability,error,error,919,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1202,availability,error,error,1202," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1364,availability,error,error,1364," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1744,availability,Error,Error,1744," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1916,availability,Error,Error,1916," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1661,deployability,build,build,1661," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1812,deployability,build,build,1812," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:2027,deployability,updat,updated,2027," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:72,performance,error,error,72,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:258,performance,error,error,258,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:623,performance,error,error,623,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:919,performance,error,error,919,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1202,performance,error,error,1202," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1364,performance,error,error,1364," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1744,performance,Error,Error,1744," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1916,performance,Error,Error,1916," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:276,reliability,doe,does,276,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:640,reliability,doe,does,640,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:936,reliability,doe,does,936,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1237,reliability,doe,does,1237," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1381,reliability,doe,does,1381," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:72,safety,error,error,72,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:172,safety,test,test,172,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:229,safety,test,test,229,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:258,safety,error,error,258,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:391,safety,test,test,391,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:595,safety,test,test,595,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:623,safety,error,error,623,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:741,safety,test,test,741,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:891,safety,test,test,891,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:919,safety,error,error,919,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1024,safety,test,test,1024,"int>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1174,safety,test,test,1174," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1202,safety,error,error,1202," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1335,safety,test,test,1335," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1364,safety,error,error,1364," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1479,safety,test,test,1479," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1628,safety,test,test,1628," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1691,safety,test,test,1691," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1744,safety,Error,Error,1744," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1878,safety,test,test,1878," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1916,safety,Error,Error,1916," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1997,safety,test,tested,1997," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:2027,safety,updat,updated,2027," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:2027,security,updat,updated,2027," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:172,testability,test,test,172,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:229,testability,test,test,229,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:391,testability,test,test,391,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:595,testability,test,test,595,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:741,testability,test,test,741,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:891,testability,test,test,891,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1024,testability,test,test,1024,"int>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1174,testability,test,test,1174," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1335,testability,test,test,1335," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1479,testability,test,test,1479," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1628,testability,test,test,1628," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1691,testability,test,test,1691," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1878,testability,test,test,1878," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1997,testability,test,tested,1997," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:72,usability,error,error,72,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:177,usability,Custom,CustomStruct,177,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:234,usability,Custom,CustomStruct,234,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:258,usability,error,error,258,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:396,usability,Custom,CustomStruct,396,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:600,usability,Custom,CustomStruct,600,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:623,usability,error,error,623,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:746,usability,Custom,CustomStruct,746,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:896,usability,Custom,CustomStruct,896,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:919,usability,error,error,919,"Add missing #include <cstdint>; # This Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1029,usability,Custom,CustomStruct,1029,"his Pull request:. Fixes compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1179,usability,Custom,CustomStruct,1179," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1202,usability,error,error,1202," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1340,usability,Custom,CustomStruct,1340," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1364,usability,error,error,1364," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1484,usability,Custom,CustomStruct,1484," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1644,usability,Custom,CustomStruct,1644," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1707,usability,Custom,CustomStruct,1707," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1724,usability,Custom,CustomStruct,1724," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1744,usability,Error,Error,1744," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1894,usability,Custom,CustomStruct,1894," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12065:1916,usability,Error,Error,1916," compilation error with gcc 13. ## Changes or fixes:. ~~~. In file included from .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.cxx:1: .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:40:24: error: 'uint32_t' does not name a type. 40 | namespace SG { typedef uint32_t sgkey_t; }. | ^~~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:6:1: note: 'uint32_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? 5 | #include <vector>. +++ |+#include <cstdint>. 6 |. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: error: 'uint8_t' does not name a type. 43 | uint8_t m_nbits, m_nmantissa;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:43:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: error: 'uint8_t' does not name a type. 45 | uint8_t m_flags;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:45:4: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:46:8: error: 'sgkey_t' in namespace 'SG' does not name a type. 46 | SG::sgkey_t m_sgkey = 123;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: error: 'uint8_t' does not name a type. 47 | const uint8_t c_uint = 10;. | ^~~~~~~. .../root-6.26.10/tree/ntuple/v7/test/CustomStruct.hxx:47:10: note: 'uint8_t' is defined in header '<cstdint>'; did you forget to '#include <cstdint>'? gmake[2]: *** [tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/build.make:79: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/CustomStruct.cxx.o] Error 1. gmake[2]: Leaving directory '.../root-6.26.10/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:53506: tree/ntuple/v7/test/CMakeFiles/CustomStruct.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12065
https://github.com/root-project/root/pull/12066:334,deployability,releas,release,334,[graf] Additional options for `TPad::PlaceBox()` method; This is needed so that the new RooBrowser doesn't need to access the private collision grid of the TPad. These additional options allow the placement of the box with choice of priority over directions as well as option to place within the margins of the pad. . Wanted for 6.28 release too!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12066
https://github.com/root-project/root/pull/12066:99,reliability,doe,doesn,99,[graf] Additional options for `TPad::PlaceBox()` method; This is needed so that the new RooBrowser doesn't need to access the private collision grid of the TPad. These additional options allow the placement of the box with choice of priority over directions as well as option to place within the margins of the pad. . Wanted for 6.28 release too!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12066
https://github.com/root-project/root/pull/12066:115,security,access,access,115,[graf] Additional options for `TPad::PlaceBox()` method; This is needed so that the new RooBrowser doesn't need to access the private collision grid of the TPad. These additional options allow the placement of the box with choice of priority over directions as well as option to place within the margins of the pad. . Wanted for 6.28 release too!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12066
https://github.com/root-project/root/pull/12067:70,deployability,build,build,70,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:99,deployability,modul,modules,99,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:604,deployability,modul,module,604,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:661,deployability,modul,module,661,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:707,deployability,modul,module,707,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:774,deployability,modul,module,774,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:841,deployability,modul,module,841,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:922,deployability,modul,module,922,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1011,deployability,modul,module,1011,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1088,deployability,modul,module,1088,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1168,deployability,modul,module,1168,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1255,deployability,modul,module,1255,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:79,energy efficiency,Core,Core,79,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:180,energy efficiency,Core,Core,180,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:548,energy efficiency,Core,Core,548,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:612,energy efficiency,Core,Core,612,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:99,modifiability,modul,modules,99,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:604,modifiability,modul,module,604,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:661,modifiability,modul,module,661,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:707,modifiability,modul,module,707,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:774,modifiability,modul,module,774,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:841,modifiability,modul,module,841,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:922,modifiability,modul,module,922,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1011,modifiability,modul,module,1011,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1088,modifiability,modul,module,1088,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1168,modifiability,modul,module,1168,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:1255,modifiability,modul,module,1255,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:17,safety,compl,complain,17,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:99,safety,modul,modules,99,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:132,safety,compl,complaining,132,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:249,safety,compl,complain,249,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:604,safety,modul,module,604,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:661,safety,modul,module,661,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:707,safety,modul,module,707,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:774,safety,modul,module,774,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:841,safety,modul,module,841,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
https://github.com/root-project/root/pull/12067:922,safety,modul,module,922,"[dictgen] Do not complain about headers in byproducts:; During ROOT's build of Core.pcm, byproduct modules are built. rootcling was complaining about some headers not appearing in Core.pcm, despite them ending up in the byproduct pcms. Simply don't complain about headers not in the pcm if these headers are actually in a byproduct. In the same vein, do not forcefully include them in teh pcm, as they are already included in the byproduct which should be sufficient. This circumvents the warnings:. ```. [2751/6001] Generating G__Core.cxx, ../lib/Core.pcm. Warning in <CheckModuleValid>: after creating module ""Core"" the following headers are not part of that module:. strlcpy.h (already part of top-level module ""ROOT_Foundation_C""). snprintf.h (already part of top-level module ""ROOT_Foundation_C""). ESTLType.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TClassEdit.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ThreadLocalStorage.h (already part of top-level module ""ROOT_Foundation_C""). ROOT/RStringView.hxx (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). TVirtualIsAProxy.h (already part of top-level module ""ROOT_Foundation_Stage1_NoRTTI""). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/12067
