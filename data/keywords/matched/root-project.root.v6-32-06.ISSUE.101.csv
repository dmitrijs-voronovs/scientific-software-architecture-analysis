id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/issues/14602:3230,usability,Visual,Visual,3230,". In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\Ole2.h:37:. In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\objbase.h:16:. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h:962:6: error: reference to 'byte' is ambiguous. byte * pNetworkData,. ^. [...]. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef:28:12: note: candidate found by name lookup is 'std::byte'. enum class byte : unsigned char {};. ^. fatal error: too many errors emitted, stopping now [-ferror-limit=]. root [1]. ```. To illustrate this, compiling this code:. ```. #include <iostream>. using namespace std;. #include <atlstr.h>. int main() {. std::cout << ""hello world!"" << std::endl;. return 0;. }. ```. is enough to generate the errors:. ```. C:\Users\bellenot\rootdev>cl -nologo -MD -GR -EHsc -Zc:__cplusplus -std:c++17 atlstr.cxx. atlstr.cxx. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(192): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(962): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. [...]. ```. And when removing the `using namespace std;` line, there is no error. ### Reproducer. On Windows:. ```. root [0] #include <atlstr.h>. ```. ### ROOT version. Any. ### Installation method. build from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14602
https://github.com/root-project/root/issues/14602:3262,usability,Tool,Tools,3262,". In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\Ole2.h:37:. In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\objbase.h:16:. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h:962:6: error: reference to 'byte' is ambiguous. byte * pNetworkData,. ^. [...]. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef:28:12: note: candidate found by name lookup is 'std::byte'. enum class byte : unsigned char {};. ^. fatal error: too many errors emitted, stopping now [-ferror-limit=]. root [1]. ```. To illustrate this, compiling this code:. ```. #include <iostream>. using namespace std;. #include <atlstr.h>. int main() {. std::cout << ""hello world!"" << std::endl;. return 0;. }. ```. is enough to generate the errors:. ```. C:\Users\bellenot\rootdev>cl -nologo -MD -GR -EHsc -Zc:__cplusplus -std:c++17 atlstr.cxx. atlstr.cxx. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(192): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(962): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. [...]. ```. And when removing the `using namespace std;` line, there is no error. ### Reproducer. On Windows:. ```. root [0] #include <atlstr.h>. ```. ### ROOT version. Any. ### Installation method. build from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14602
https://github.com/root-project/root/issues/14602:3410,usability,error,error,3410,". In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\Ole2.h:37:. In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\objbase.h:16:. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h:962:6: error: reference to 'byte' is ambiguous. byte * pNetworkData,. ^. [...]. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef:28:12: note: candidate found by name lookup is 'std::byte'. enum class byte : unsigned char {};. ^. fatal error: too many errors emitted, stopping now [-ferror-limit=]. root [1]. ```. To illustrate this, compiling this code:. ```. #include <iostream>. using namespace std;. #include <atlstr.h>. int main() {. std::cout << ""hello world!"" << std::endl;. return 0;. }. ```. is enough to generate the errors:. ```. C:\Users\bellenot\rootdev>cl -nologo -MD -GR -EHsc -Zc:__cplusplus -std:c++17 atlstr.cxx. atlstr.cxx. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(192): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(962): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. [...]. ```. And when removing the `using namespace std;` line, there is no error. ### Reproducer. On Windows:. ```. root [0] #include <atlstr.h>. ```. ### ROOT version. Any. ### Installation method. build from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14602
https://github.com/root-project/root/issues/14602:3601,usability,Visual,Visual,3601,". In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\Ole2.h:37:. In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\objbase.h:16:. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h:962:6: error: reference to 'byte' is ambiguous. byte * pNetworkData,. ^. [...]. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef:28:12: note: candidate found by name lookup is 'std::byte'. enum class byte : unsigned char {};. ^. fatal error: too many errors emitted, stopping now [-ferror-limit=]. root [1]. ```. To illustrate this, compiling this code:. ```. #include <iostream>. using namespace std;. #include <atlstr.h>. int main() {. std::cout << ""hello world!"" << std::endl;. return 0;. }. ```. is enough to generate the errors:. ```. C:\Users\bellenot\rootdev>cl -nologo -MD -GR -EHsc -Zc:__cplusplus -std:c++17 atlstr.cxx. atlstr.cxx. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(192): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(962): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. [...]. ```. And when removing the `using namespace std;` line, there is no error. ### Reproducer. On Windows:. ```. root [0] #include <atlstr.h>. ```. ### ROOT version. Any. ### Installation method. build from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14602
https://github.com/root-project/root/issues/14602:3633,usability,Tool,Tools,3633,". In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\Ole2.h:37:. In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\objbase.h:16:. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h:962:6: error: reference to 'byte' is ambiguous. byte * pNetworkData,. ^. [...]. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef:28:12: note: candidate found by name lookup is 'std::byte'. enum class byte : unsigned char {};. ^. fatal error: too many errors emitted, stopping now [-ferror-limit=]. root [1]. ```. To illustrate this, compiling this code:. ```. #include <iostream>. using namespace std;. #include <atlstr.h>. int main() {. std::cout << ""hello world!"" << std::endl;. return 0;. }. ```. is enough to generate the errors:. ```. C:\Users\bellenot\rootdev>cl -nologo -MD -GR -EHsc -Zc:__cplusplus -std:c++17 atlstr.cxx. atlstr.cxx. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(192): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(962): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. [...]. ```. And when removing the `using namespace std;` line, there is no error. ### Reproducer. On Windows:. ```. root [0] #include <atlstr.h>. ```. ### ROOT version. Any. ### Installation method. build from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14602
https://github.com/root-project/root/issues/14602:3774,usability,error,error,3774,". In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\Ole2.h:37:. In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\objbase.h:16:. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h:962:6: error: reference to 'byte' is ambiguous. byte * pNetworkData,. ^. [...]. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef:28:12: note: candidate found by name lookup is 'std::byte'. enum class byte : unsigned char {};. ^. fatal error: too many errors emitted, stopping now [-ferror-limit=]. root [1]. ```. To illustrate this, compiling this code:. ```. #include <iostream>. using namespace std;. #include <atlstr.h>. int main() {. std::cout << ""hello world!"" << std::endl;. return 0;. }. ```. is enough to generate the errors:. ```. C:\Users\bellenot\rootdev>cl -nologo -MD -GR -EHsc -Zc:__cplusplus -std:c++17 atlstr.cxx. atlstr.cxx. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(192): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(962): error C2872: 'byte': ambiguous symbol. C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared\rpcndr.h(191): note: could be 'unsigned char byte'. C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\cstddef(28): note: or 'std::byte'. [...]. ```. And when removing the `using namespace std;` line, there is no error. ### Reproducer. On Windows:. ```. root [0] #include <atlstr.h>. ```. ### ROOT version. Any. ### Installation method. build from source. ### Operating system. Windows. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14602
https://github.com/root-project/root/pull/14603:34,availability,error,error,34,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:127,availability,error,error,127,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:223,availability,error,error,223,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:388,availability,error,error,388,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:432,availability,error,errors,432,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:187,deployability,fail,fails,187,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:581,deployability,updat,updated,581,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:133,integrability,messag,message,133,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:394,integrability,messag,message,394,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:133,interoperability,messag,message,133,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:394,interoperability,messag,message,394,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:370,modifiability,paramet,parameters,370,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:34,performance,error,error,34,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:127,performance,error,error,127,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:223,performance,error,error,223,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:388,performance,error,error,388,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:432,performance,error,errors,432,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:187,reliability,fail,fails,187,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:34,safety,error,error,34,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:127,safety,error,error,127,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:223,safety,error,error,223,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:388,safety,error,error,388,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:432,safety,error,errors,432,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:487,safety,test,tested,487,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:581,safety,updat,updated,581,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:581,security,updat,updated,581,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:444,testability,context,context,444,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:487,testability,test,tested,487,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:34,usability,error,error,34,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:127,usability,error,error,127,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:223,usability,error,error,223,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:388,usability,error,error,388,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:402,usability,help,helps,402,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14603:432,usability,error,errors,432,"[graf2d][TTF] Improve SetTextSize error: show code and values; # This Pull request:. ## Changes or fixes:. Improvements in the error message displayed when the call to `FT_Set_Char_Size` fails in `TTF::SetTextSize`:. - The error code returned by the call to TTF FT_Set_Char_Size function was lost in the if condition, now it is displayed. - Adding the display of passed parameters to the error message helps distinguish TTF related errors from context related ones. ## Checklist:. - [x] tested changes locally (execution v6.22 and v6.26, compilation v6.22, v6.26 and master. - [ ] updated the docs (not necessary I suspect). This PR fixes the easy part of #14592.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14603
https://github.com/root-project/root/pull/14604:101,deployability,API,API,101,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:112,deployability,API,API,112,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:184,deployability,build,building,184,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:143,energy efficiency,model,model,143,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:101,integrability,API,API,101,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:112,integrability,API,API,112,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:101,interoperability,API,API,101,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:112,interoperability,API,API,112,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:202,safety,safe,safe,202,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:131,security,access,accessing,131,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/pull/14604:143,security,model,model,143,"[ntuple] add skimming tutorial; Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14604
https://github.com/root-project/root/issues/14605:655,availability,Operat,Operating,655,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:242,deployability,stack,stack,242,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:603,deployability,version,version,603,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:622,deployability,Instal,Installation,622,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:8,energy efficiency,draw,draws,8,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:251,energy efficiency,draw,drawn,251,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:495,energy efficiency,Draw,Draw,495,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:515,energy efficiency,draw,drawing,515,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:603,integrability,version,version,603,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/issues/14605:603,modifiability,version,version,603,"THStack draws first histogram transparently if filled with white and noclear option used; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Histogram is not shaded properly if first histogram is filled with white and stack is drawn with `noclear` option. ### Reproducer. ```. TH1D h1(""h"",""h"",1,0,1); . TH1D h2(""h2"",""h2"",1,0,1); . h1.SetBinContent(1,4); h2.SetBinContent(1,6); . h1.SetFillColor(kWhite);h2.SetFillColor(kRed); . THStack hs; hs.Add(&h1); hs.Add(&h2); . hs.Draw(""noclear""); // drawing without noclear works, as will if bottom hist color is not white. ```. ### ROOT version. 6.30. ### Installation method. source. ### Operating system. all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14605
https://github.com/root-project/root/pull/14606:383,deployability,updat,updated,383,"[skip-ci] improve SetFillColorAlpha documentation; # This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14606
https://github.com/root-project/root/pull/14606:353,safety,test,tested,353,"[skip-ci] improve SetFillColorAlpha documentation; # This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14606
https://github.com/root-project/root/pull/14606:383,safety,updat,updated,383,"[skip-ci] improve SetFillColorAlpha documentation; # This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14606
https://github.com/root-project/root/pull/14606:383,security,updat,updated,383,"[skip-ci] improve SetFillColorAlpha documentation; # This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14606
https://github.com/root-project/root/pull/14606:353,testability,test,tested,353,"[skip-ci] improve SetFillColorAlpha documentation; # This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14606
https://github.com/root-project/root/pull/14606:36,usability,document,documentation,36,"[skip-ci] improve SetFillColorAlpha documentation; # This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14606
https://github.com/root-project/root/pull/14606:169,usability,document,documentation,169,"[skip-ci] improve SetFillColorAlpha documentation; # This Pull request:. ## Changes or fixes:. It's easy to get confused with this function if you read the introduction documentation. In the top example, one might think that 0.35 was the degree of transparency rather than the degree of opacity. This clarifies to remove ambiguity. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14606
https://github.com/root-project/root/pull/14608:322,deployability,updat,updated,322,"[skip-ci] document how to remove shadow of TPave, as it is not evident (only explained in the forum); # This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14608
https://github.com/root-project/root/pull/14608:292,safety,test,tested,292,"[skip-ci] document how to remove shadow of TPave, as it is not evident (only explained in the forum); # This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14608
https://github.com/root-project/root/pull/14608:322,safety,updat,updated,322,"[skip-ci] document how to remove shadow of TPave, as it is not evident (only explained in the forum); # This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14608
https://github.com/root-project/root/pull/14608:322,security,updat,updated,322,"[skip-ci] document how to remove shadow of TPave, as it is not evident (only explained in the forum); # This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14608
https://github.com/root-project/root/pull/14608:292,testability,test,tested,292,"[skip-ci] document how to remove shadow of TPave, as it is not evident (only explained in the forum); # This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14608
https://github.com/root-project/root/pull/14608:10,usability,document,document,10,"[skip-ci] document how to remove shadow of TPave, as it is not evident (only explained in the forum); # This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14608
https://github.com/root-project/root/pull/14608:146,usability,Document,Document,146,"[skip-ci] document how to remove shadow of TPave, as it is not evident (only explained in the forum); # This Pull request:. ## Changes or fixes:. Document how to remove shadow of TPave, as it is not evident (I only found explanations hidden here and there in the forum). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14608
https://github.com/root-project/root/pull/14609:79,deployability,manag,managing-workflow-runs,79,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:179,deployability,automat,automatically,179,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:79,energy efficiency,manag,managing-workflow-runs,79,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:164,integrability,messag,message,164,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:164,interoperability,messag,message,164,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:10,safety,Test,Test,10,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:79,safety,manag,managing-workflow-runs,79,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:10,testability,Test,Test,10,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:179,testability,automat,automatically,179,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:88,usability,workflow,workflow-runs,88,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14609:111,usability,workflow,workflow-runs,111,[skip-ci] Test github action; According to. https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs writing [skip ci] anywhere in a commit message should automatically skipp the CI runs for this PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14609
https://github.com/root-project/root/pull/14610:21,performance,time,time,21,Skip ci test 2; This time testing without the magic word in the PR title and also with multiple commits only using it once in the first commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14610
https://github.com/root-project/root/pull/14610:8,safety,test,test,8,Skip ci test 2; This time testing without the magic word in the PR title and also with multiple commits only using it once in the first commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14610
https://github.com/root-project/root/pull/14610:26,safety,test,testing,26,Skip ci test 2; This time testing without the magic word in the PR title and also with multiple commits only using it once in the first commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14610
https://github.com/root-project/root/pull/14610:8,testability,test,test,8,Skip ci test 2; This time testing without the magic word in the PR title and also with multiple commits only using it once in the first commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14610
https://github.com/root-project/root/pull/14610:26,testability,test,testing,26,Skip ci test 2; This time testing without the magic word in the PR title and also with multiple commits only using it once in the first commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14610
https://github.com/root-project/root/issues/14611:390,availability,Operat,Operating,390,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:338,deployability,version,version,338,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:360,deployability,Instal,Installation,360,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:338,integrability,version,version,338,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:26,interoperability,format,formatted,26,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:210,interoperability,format,formatted-output-streams,210,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:285,interoperability,format,formatting,285,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:338,modifiability,version,version,338,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:428,testability,context,context,428,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:5,usability,Progress,ProgressBar,5,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:126,usability,user,user,126,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:178,usability,progress,progress-bar-used-together-with-formatted-output-streams,178,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:247,usability,Progress,ProgressBar,247,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/issues/14611:278,usability,custom,custom,278,"[DF] ProgressBar destroys formatted output streams; ### Explain what you would like to see improved and how. As reported by a user on the forum: https://root-forum.cern.ch/t/rdf-progress-bar-used-together-with-formatted-output-streams/58064, when ProgressBar is being used, the custom formatting of output streams is affected. . ### ROOT version. 6.30.04. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14611
https://github.com/root-project/root/pull/14612:134,deployability,updat,updated,134,[skip ci] Test the skipping of the CI; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14612
https://github.com/root-project/root/pull/14612:10,safety,Test,Test,10,[skip ci] Test the skipping of the CI; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14612
https://github.com/root-project/root/pull/14612:104,safety,test,tested,104,[skip ci] Test the skipping of the CI; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14612
https://github.com/root-project/root/pull/14612:134,safety,updat,updated,134,[skip ci] Test the skipping of the CI; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14612
https://github.com/root-project/root/pull/14612:134,security,updat,updated,134,[skip ci] Test the skipping of the CI; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14612
https://github.com/root-project/root/pull/14612:10,testability,Test,Test,10,[skip ci] Test the skipping of the CI; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14612
https://github.com/root-project/root/pull/14612:104,testability,test,tested,104,[skip ci] Test the skipping of the CI; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14612
https://github.com/root-project/root/pull/14613:118,deployability,build,builds,118,"[skip-ci] Introduce condition to skip CI for pull requests; If the tag `[skip-ci]` is present in the PR title, the CI builds for that PR will not be executed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14613
https://github.com/root-project/root/pull/14614:201,interoperability,specif,specified,201,"[http] implement `file.root` handler; For any registered to http server object. now one can sumbit request like:. http://localhost:8080/hpx/file.root. THttpServer will create file in memory and store. specified object there. Either object name will be used or ""object"" when. name cannot be obtained. This PR implement new feature from #14594",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14614
https://github.com/root-project/root/pull/14614:183,performance,memor,memory,183,"[http] implement `file.root` handler; For any registered to http server object. now one can sumbit request like:. http://localhost:8080/hpx/file.root. THttpServer will create file in memory and store. specified object there. Either object name will be used or ""object"" when. name cannot be obtained. This PR implement new feature from #14594",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14614
https://github.com/root-project/root/pull/14614:183,usability,memor,memory,183,"[http] implement `file.root` handler; For any registered to http server object. now one can sumbit request like:. http://localhost:8080/hpx/file.root. THttpServer will create file in memory and store. specified object there. Either object name will be used or ""object"" when. name cannot be obtained. This PR implement new feature from #14594",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14614
https://github.com/root-project/root/pull/14615:68,integrability,event,event,68,"Change if condition for github actions; Using `||` means that *any* event type would trigger the CI, as long as it was done against the main ROOT repository. I open this PR to understand why that condition was there in that way, I am sure there is a reason but it's undocumented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14615
https://github.com/root-project/root/pull/14615:146,integrability,repositor,repository,146,"Change if condition for github actions; Using `||` means that *any* event type would trigger the CI, as long as it was done against the main ROOT repository. I open this PR to understand why that condition was there in that way, I am sure there is a reason but it's undocumented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14615
https://github.com/root-project/root/pull/14615:146,interoperability,repositor,repository,146,"Change if condition for github actions; Using `||` means that *any* event type would trigger the CI, as long as it was done against the main ROOT repository. I open this PR to understand why that condition was there in that way, I am sure there is a reason but it's undocumented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14615
https://github.com/root-project/root/pull/14615:176,testability,understand,understand,176,"Change if condition for github actions; Using `||` means that *any* event type would trigger the CI, as long as it was done against the main ROOT repository. I open this PR to understand why that condition was there in that way, I am sure there is a reason but it's undocumented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14615
https://github.com/root-project/root/pull/14615:266,usability,undo,undocumented,266,"Change if condition for github actions; Using `||` means that *any* event type would trigger the CI, as long as it was done against the main ROOT repository. I open this PR to understand why that condition was there in that way, I am sure there is a reason but it's undocumented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14615
https://github.com/root-project/root/pull/14616:16,integrability,buffer,buffered,16,"[ntuple] Enable buffered writing in importer; ... if enabled in the `RNTupleWriteOptions`, which it is by default. This allows to use implicit multi-threading which can speed up the compression by a factor of 2x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14616
https://github.com/root-project/root/pull/14616:143,performance,multi-thread,multi-threading,143,"[ntuple] Enable buffered writing in importer; ... if enabled in the `RNTupleWriteOptions`, which it is by default. This allows to use implicit multi-threading which can speed up the compression by a factor of 2x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14616
https://github.com/root-project/root/pull/14617:497,deployability,updat,updated,497,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:397,interoperability,compatib,compatibility,397,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:143,modifiability,scal,scalars,143,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:467,safety,test,tested,467,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:497,safety,updat,updated,497,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:497,security,updat,updated,497,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:467,testability,test,tested,467,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:54,usability,support,supported,54,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14617:107,usability,support,support,107,"Add CONST properties to optical surfaces (as they are supported by Geant4); # This Pull request:. Adds the support to CONST properties (double scalars) to TGeoOpticalSurface instances. This MR enables the TGeoOpticalSurface to have the same functionality as the G4OpticalSurface from Geant4. Since the class TGeoOpticalSurface is only enhanced by additional member data/functions, the backwards . compatibility is ensured. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14617
https://github.com/root-project/root/pull/14618:302,deployability,updat,updated,302,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:203,safety,Test,Test,203,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:226,safety,test,test,226,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:272,safety,test,tested,272,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:302,safety,updat,updated,302,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:151,security,modif,modified,151,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:302,security,updat,updated,302,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:203,testability,Test,Test,203,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:226,testability,test,test,226,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14618:272,testability,test,tested,272,"[matrix] Enable Transpose for rectangular matrices; # This Pull request:. Enables Transpose to work with rectangular matrices. SetMatrixArray has been modified to reshape the matrix, if needed. A Google Test has been added to test this functionality. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [ROOT-9261](https://its.cern.ch/jira/browse/ROOT-9261).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14618
https://github.com/root-project/root/pull/14619:31,deployability,depend,dependency,31,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:288,deployability,depend,depends,288,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:385,deployability,depend,dependency,385,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:450,deployability,updat,updated,450,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:31,integrability,depend,dependency,31,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:288,integrability,depend,depends,288,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:385,integrability,depend,dependency,385,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:45,interoperability,share,shared,45,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:273,interoperability,share,shared,273,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:370,interoperability,specif,specifying,370,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:31,modifiability,depend,dependency,31,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:288,modifiability,depend,depends,288,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:385,modifiability,depend,dependency,385,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:31,safety,depend,dependency,31,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:288,safety,depend,depends,288,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:385,safety,depend,dependency,385,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:420,safety,test,tested,420,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:450,safety,updat,updated,450,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:450,security,updat,updated,450,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:31,testability,depend,dependency,31,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:288,testability,depend,depends,288,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:385,testability,depend,dependency,385,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14619:420,testability,test,tested,420,Fixed tutorial. Added explicit dependency of shared library on ROOT dictionary; # This Pull request: . tutorial/tree/dictionary C++ stand-alone application can not be compiled when the cmake project is generated for xcode. The solution is to explicitly tell cmake that the shared library depends on the ROOT dictionary. ## Changes or fixes: . New line in the CMakeLists specifying the dependency . ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (not needed). This PR fixes https://github.com/root-project/root/issues/14595.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14619
https://github.com/root-project/root/pull/14622:81,deployability,updat,update,81,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:153,deployability,build,buildPerModuleDefaultPipeline,153,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:386,deployability,updat,updated,386,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:81,safety,updat,update,81,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:356,safety,test,tested,356,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:386,safety,updat,updated,386,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:81,security,updat,update,81,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:386,security,updat,updated,386,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14622:356,testability,test,tested,356,"[cling] Explicitly disable `RelLookupTableConvertedPass`; Before the passmanager update, the function `populateModulePassManager` was called instead of `buildPerModuleDefaultPipeline` to set the default passes. But the former did not have `RelLookupTableConverterPass` turned on by default. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14598.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14622
https://github.com/root-project/root/pull/14623:26,safety,Test,Test,26,[ci] Just trigger the CI; Test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14623
https://github.com/root-project/root/pull/14623:26,testability,Test,Test,26,[ci] Just trigger the CI; Test,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14623
https://github.com/root-project/root/pull/14624:1,energy efficiency,core,core,1,"[core/zip+lzma] Properly account for header size [v6.30]; The compression algorithms only see the buffers without the header, so the sizes have to be adjusted accordingly. Fixes https://github.com/root-project/root/issues/14508, backport of https://github.com/root-project/root/pull/14523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14624
https://github.com/root-project/root/pull/14624:98,integrability,buffer,buffers,98,"[core/zip+lzma] Properly account for header size [v6.30]; The compression algorithms only see the buffers without the header, so the sizes have to be adjusted accordingly. Fixes https://github.com/root-project/root/issues/14508, backport of https://github.com/root-project/root/pull/14523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14624
https://github.com/root-project/root/pull/14625:1,energy efficiency,core,core,1,"[core/zip+lzma] Properly account for header size [v6.28]; The compression algorithms only see the buffers without the header, so the sizes have to be adjusted accordingly. Fixes https://github.com/root-project/root/issues/14508, backport of https://github.com/root-project/root/pull/14523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14625
https://github.com/root-project/root/pull/14625:98,integrability,buffer,buffers,98,"[core/zip+lzma] Properly account for header size [v6.28]; The compression algorithms only see the buffers without the header, so the sizes have to be adjusted accordingly. Fixes https://github.com/root-project/root/issues/14508, backport of https://github.com/root-project/root/pull/14523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14625
https://github.com/root-project/root/pull/14626:1,energy efficiency,core,core,1,"[core/zip+lzma] Properly account for header size [v6.26]; The compression algorithms only see the buffers without the header, so the sizes have to be adjusted accordingly. Fixes https://github.com/root-project/root/issues/14508, backport of https://github.com/root-project/root/pull/14523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14626
https://github.com/root-project/root/pull/14626:98,integrability,buffer,buffers,98,"[core/zip+lzma] Properly account for header size [v6.26]; The compression algorithms only see the buffers without the header, so the sizes have to be adjusted accordingly. Fixes https://github.com/root-project/root/issues/14508, backport of https://github.com/root-project/root/pull/14523",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14626
https://github.com/root-project/root/pull/14627:895,deployability,updat,updated,895,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:34,integrability,buffer,buffer,34,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:347,integrability,buffer,buffer,347,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:709,integrability,event,events-larger-than-,709,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:48,modifiability,variab,variable,48,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:229,safety,safe,safety,229,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:865,safety,test,tested,865,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:895,safety,updat,updated,895,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:895,security,updat,updated,895,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14627:865,testability,test,tested,865,"[io] fix crash due to overflow in buffer length variable; # This Pull request:. ## Changes or fixes:. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This lead to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. This fixes the crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue . A reproducer of the crash is also in that link. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/14644.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14627
https://github.com/root-project/root/pull/14628:183,deployability,patch,patch,183,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:350,deployability,updat,updated,350,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:245,modifiability,maintain,maintain,245,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:189,reliability,doe,does,189,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:183,safety,patch,patch,183,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:245,safety,maintain,maintain,245,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:320,safety,test,tested,320,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:350,safety,updat,updated,350,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:183,security,patch,patch,183,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:350,security,updat,updated,350,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:320,testability,test,tested,320,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14628:41,usability,command,command,41,"[cling] Add TableGen-based generator for command line arguments; Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14628
https://github.com/root-project/root/pull/14629:26,deployability,fail,failing,26,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:76,deployability,fail,failing,76,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:138,deployability,updat,update,138,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:149,deployability,build,build,149,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:26,reliability,fail,failing,26,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:76,reliability,fail,failing,76,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:34,safety,test,tests,34,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:138,safety,updat,update,138,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:138,security,updat,update,138,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14629:34,testability,test,tests,34,[roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14629
https://github.com/root-project/root/pull/14630:183,energy efficiency,current,current,183,Enable RNTupleModel usage in PyROOT; By creating an overload with no arguments instead of having one with a default argument. The overload taking a `std::unique_ptr` cannot work with current PyROOT. See #14425.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14630
https://github.com/root-project/root/pull/14633:29,availability,error,error,29,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:65,availability,error,error,65,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:82,energy efficiency,optim,optimistic,82,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:38,interoperability,distribut,distributed,38,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:180,interoperability,distribut,distributed,180,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:29,performance,error,error,29,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:65,performance,error,error,65,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:29,safety,error,error,29,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:65,safety,error,error,65,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:29,usability,error,error,29,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:65,usability,error,error,65,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/pull/14633:109,usability,user,users,109,Be explicit about reason for error in distributed execution; The error was overly optimistic and may confuse users. This can be the result of literally anything going wrong in the distributed execution,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14633
https://github.com/root-project/root/issues/14634:134,availability,error,error,134,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:262,availability,error,error,262,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1119,availability,error,error,1119,"compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2379,availability,Operat,Operating,2379,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:14,deployability,instal,installed,14,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:169,deployability,version,version,169,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:220,deployability,instal,install,220,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:438,deployability,build,build,438,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:552,deployability,build,build,552,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:664,deployability,build,build,664,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:766,deployability,build,build,766,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1012,deployability,build,build,1012,"nstalled nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1077,deployability,instal,install,1077,"or duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1302,deployability,instal,installed,1302,"class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1312,deployability,version,version,1312," 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1415,deployability,version,version,1415,"ld/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Addi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1513,deployability,modul,modules,1513,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1579,deployability,build,build-in,1579,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1683,deployability,modul,modules,1683,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1741,deployability,contain,contains,1741,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2196,deployability,version,version,2196,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2221,deployability,instal,install,2221,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2233,deployability,version,version,2233,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2252,deployability,build,build,2252,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2273,deployability,version,version,2273,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2333,deployability,Instal,Installation,2333,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:169,integrability,version,version,169,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1312,integrability,version,version,1312," 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1415,integrability,version,version,1415,"ld/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Addi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2196,integrability,version,version,2196,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2233,integrability,version,version,2233,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2273,integrability,version,version,2273,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:0,interoperability,conflict,conflict,0,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2065,interoperability,conflict,conflict,2065,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:169,modifiability,version,version,169,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1312,modifiability,version,version,1312," 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1415,modifiability,version,version,1415,"ld/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Addi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1513,modifiability,modul,modules,1513,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1683,modifiability,modul,modules,1683,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2196,modifiability,version,version,2196,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2233,modifiability,version,version,2233,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2273,modifiability,version,version,2273,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:134,performance,error,error,134,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:262,performance,error,error,262,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1119,performance,error,error,1119,"compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1338,reliability,doe,doesn,1338,"izer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:134,safety,error,error,134,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:262,safety,error,error,262,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1119,safety,error,error,1119,"compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1513,safety,modul,modules,1513,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1683,safety,modul,modules,1683,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:2426,testability,context,context,2426,"/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around needs to be removed. Possibly the easiest is to just require a more recent version. ### Reproducer. install old version and try to build ROOT. ### ROOT version. I tried with v6-28-12 and 3-13.-3 with gcc-11. ### Installation method. compile from source. ### Operating system. Ubuntu 22.04. ### Additional context. There is no problem with v6-26-10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:134,usability,error,error,134,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:262,usability,error,error,262,"conflict with installed nlohman/json; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. I have a compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: someh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/issues/14634:1119,usability,error,error,1119,"compilation error in the case with an existing version of the nlohmann library. ```. /home/runner/install/include/nlohmann/json.hpp:3435:8: error: redefinition of default argument for ‘class T’. 3435 | struct adl_serializer;. | ^~~~~~~~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveShape.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveBox.hxx:15,. from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:12:. /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/inc/ROOT/REveElement.hxx:39:10: note: original definition appeared here. 39 | template<typename T = void, typename SFINAE = void>. | ^~~~~~~~. In file included from /home/runner/work/SIRF-SuperBuild/SIRF-SuperBuild/build/sources/ROOT/graf3d/eve7/src/REveBox.cxx:18:. /home/runner/install/include/nlohmann/json.hpp:3448:7: error: redefinition of default argument for ‘template<class U, class V, class ... Args> class ObjectType’. 3448 | class basic_json;. ```. I believe this is cause by the fact that the installed version is v3.10.4 (which doesn't have `json_fwd.h`). Relevant bits of code:. - CMake code [checks for version](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/SearchInstalledSoftware.cmake#L87). - CMake [defaults to ""build-in"" OFF](https://github.com/root-project/root/blob/f98afaed8286ae156d364bedd36c440bc22c0875/cmake/modules/RootBuildOptions.cmake#L100). - `REveElement.hxx` contains a work-around if `json_fwd.h` is not found, i.e. it [defines its own](https://github.com/root-project/root/blob/25e81912b499df1703bc6bed47623cfbbce036f7/graf3d/eve7/inc/ROOT/REveElement.hxx#L25-L37). I believe the latter is causing the problem: somehow the existing (old) `json.h` has been read, and then creates a conflict with this definition. I think this work-around n",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14634
https://github.com/root-project/root/pull/14635:8,usability,help,helper,8,Two new helper methods for TColor; Two new static methods:. GetColorByName(). ListColors(). Suggested by this issue: https://github.com/root-project/root/issues/14605,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14635
https://github.com/root-project/root/pull/14636:99,integrability,sub,sub,99,[ntuple] Fix writing of RCollectionFields; Their `AppendImpl` must return all bytes written by its sub fields.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14636
https://github.com/root-project/root/issues/14637:989,availability,down,down,989,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2339,availability,Operat,Operating,2339,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:519,deployability,depend,dependent,519,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:1861,deployability,continu,continue,1861,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2283,deployability,version,version,2283,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2305,deployability,Instal,Installation,2305,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2326,deployability,releas,release,2326,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2365,deployability,build,build,2365,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:519,integrability,depend,dependent,519,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:1896,integrability,sub,substr,1896,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2047,integrability,sub,substr,2047,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2283,integrability,version,version,2283,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:412,interoperability,specif,specifically,412,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:519,modifiability,depend,dependent,519,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:529,modifiability,variab,variables,529,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:1107,modifiability,variab,variables,1107,"Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2283,modifiability,version,version,2283,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:1137,performance,time,times,1137,"ek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:519,safety,depend,dependent,519,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:519,testability,depend,dependent,519,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:2387,testability,context,context,2387,"re specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (startidx < expr.size()) {. arguments.push_back(expr.substr(startidx));. }. return arguments;. }. ```. Then:. ```. root. root [0] .L blih.C+. root [1] res = extractArguments(""1.0e-8*blah""). (std::vector &) { ""e"", ""blah"" }. ```. where obviously 'e' should not have been picked up. ### ROOT version. 6.30.04. ### Installation method. release. ### Operating system. centos7 build. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/issues/14637:236,usability,workflow,workflow,236,"[RF] Crashes / bugs in importing JSON workspaces; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. Hello @guitargeek @cburgard ! My student @mathyuu is trying to use the JSON functionality for some combination workflow, and at first we are making sure we can ""round-trip"" existing workspaces. There are problems importing JSON files that were produced by the export functionality. More specifically, when importing ""generic functions"", aka RooFormulas, the parser used to get the names of the dependent variables is extremely brittle and cannot handle numbers in scientific notation in all cases... and to be honest, reading the code, what surprises me is that it can at all work in some cases. Can't you rely on the built-in parsers for `RooFormula` instead, for instance ? The issue is in `extractArguments` function. BTW, if you fix the bug, can you take the opportunity to change the output from `vector<string>` to `set<string>` ? There are warnings printed down the line with a difference between what the function ""claims to use"" and what it ""is in use"", that all come from variables that appear several times in the formula. See below for reproducer. ### Reproducer. Here is a copy of the function:. ``` C++. #include <vector>. #include <algorithm>. #include <string>. #include <iostream>. #include <cctype>. std::vector<std::string> extractArguments(std::string expr). {. // Get rid of whitespaces. expr.erase(std::remove_if(expr.begin(), expr.end(), [](unsigned char c) { return std::isspace(c); }), expr.end());. std::vector<std::string> arguments;. size_t startidx = expr.size();. for (size_t i = 0; i < expr.size(); ++i) {. if (startidx >= expr.size()) {. if (isalpha(expr[i])) {. startidx = i;. }. } else {. if (!isdigit(expr[i]) && !isalpha(expr[i]) && expr[i] != '_') {. if (expr[i] == '(') {. startidx = expr.size();. continue;. }. std::string arg(expr.substr(startidx, i - startidx));. startidx = expr.size();. arguments.push_back(arg);. }. }. }. if (start",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14637
https://github.com/root-project/root/pull/14639:33,deployability,fail,failing,33,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:83,deployability,fail,failing,83,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:145,deployability,updat,update,145,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:156,deployability,build,build,156,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:33,reliability,fail,failing,33,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:83,reliability,fail,failing,83,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:41,safety,test,tests,41,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:145,safety,updat,update,145,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:145,security,updat,update,145,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14639:41,testability,test,tests,41,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86); Disable tutorials failing on Windows (x86) with VS 2022 v17.8 This is needed to update the build nodes and add the new ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14639
https://github.com/root-project/root/pull/14641:9,interoperability,distribut,distributed,9,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:73,interoperability,distribut,distributed,73,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:226,interoperability,distribut,distributed,226,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:350,interoperability,distribut,distributed,350,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:289,safety,input,input,289,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:154,security,session,session,154,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:118,usability,user,user-provided,118,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:213,usability,user,user,213,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/pull/14641:289,usability,input,input,289,"Restrict distributed initialization to executors only; Historically, the distributed initialize function also ran the user-provided function in the local session. In general, this may not be the desired effect. A user calling distributed initialize may only want to see the effects of the input function on the executors and not on the driver of the distributed application.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14641
https://github.com/root-project/root/issues/14642:2701,deployability,log,logic,2701,"l::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which preven",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:6042,deployability,modul,modulo,6042,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:478,energy efficiency,energ,energy,478,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:520,energy efficiency,energ,energy,520,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:536,energy efficiency,model,model,536,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:586,energy efficiency,model,model,586,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:697,energy efficiency,model,model,697,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:743,energy efficiency,energ,energy,743,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1084,energy efficiency,energ,energy,1084,"is basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1627,energy efficiency,energ,energy,1627,"(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1669,energy efficiency,energ,energy,1669,"iter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1685,energy efficiency,model,model,1685,"td::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by apply",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1739,energy efficiency,model,model,1739,"*energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1850,energy efficiency,model,model,1850,"r = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1933,energy efficiency,energ,energy,1933,"nt main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:2419,energy efficiency,core,core,2419,"ntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4156,energy efficiency,energ,energy,4156," &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4292,energy efficiency,energ,energy,4292,">(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4402,energy efficiency,energ,energy,4402,"(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4418,energy efficiency,model,model,4418,"})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4472,energy efficiency,model,model,4472,";. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4583,energy efficiency,model,model,4583,"s another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5330,energy efficiency,energ,energy,5330,"Model->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5345,energy efficiency,energ,energy,5345,"try();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5360,energy efficiency,energ,energy,5360,"ergy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `Ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5375,energy efficiency,energ,energy,5375,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5390,energy efficiency,energ,energy,5390,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5426,energy efficiency,energ,energy,5426,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5487,energy efficiency,energ,energy,5487,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5502,energy efficiency,energ,energy,5502,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5517,energy efficiency,energ,energy,5517,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5745,energy efficiency,model,models,5745,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:6351,energy efficiency,model,model,6351,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:706,integrability,event,events,706,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:878,integrability,event,events,878,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1859,integrability,event,events,1859,"leReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:2066,integrability,event,events,2066,"particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4592,integrability,event,events,4592," problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5148,integrability,event,events,5148,"at>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:3325,interoperability,Bind,BindValue,3325," called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = parti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:3325,modifiability,Bind,BindValue,3325," called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = parti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:6042,modifiability,modul,modulo,6042,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5563,performance,parallel,parallel,5563,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:2194,reliability,doe,doesn,2194,"y();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5653,reliability,doe,doesn,5653,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:2701,safety,log,logic,2701,"l::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which preven",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:3698,safety,prevent,prevents,3698,"ogic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5609,safety,compl,complication,5609,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5918,safety,reme,remembering,5918,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:6042,safety,modul,modulo,6042,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:536,security,model,model,536,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:586,security,model,model,586,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:697,security,model,model,697,"RNTuple collection writer only works in sequential writing with one REntry; Consider this basic example of using the RNTuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1685,security,model,model,1685,"td::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by apply",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1739,security,model,model,1739,"*energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1850,security,model,model,1850,"r = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:2701,security,log,logic,2701,"l::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which preven",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:3698,security,preven,prevents,3698,"ogic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4418,security,model,model,4418,"})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles""",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4472,security,model,model,4472,";. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:4583,security,model,model,4583,"s another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s from working:. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::CreateBare();. particleModel->MakeField<float>(""energy"");. particleModel->Freeze();. auto particleEntry1 = particleModel->CreateEntry();. auto energy1 = particleEntry1->GetPtr<float>(""energy"");. auto particleEntry2 = particleModel->CreateEntry();. auto energy2 = particleEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5609,security,compl,complication,5609,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:5745,security,model,models,5745,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:6351,security,model,model,6351,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:2701,testability,log,logic,2701,"l::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry();. return 0;. }. ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:. ```. terminate called after throwing an instance of 'std::bad_alloc'. what(): std::bad_alloc. Aborted (core dumped). ```. This is because `RNTupleModel::CreateEntry()` calls. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365. for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like. ```diff. diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx. index c652608bf1..ed02338e2b 100644. --- a/tree/ntuple/v7/src/RNTupleModel.cxx. +++ b/tree/ntuple/v7/src/RNTupleModel.cxx. @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr. . auto entry = std::unique_ptr<REntry>(new REntry(fModelId));. for (const auto &f : fFieldZero->GetSubFields()) {. - entry->AddValue(f->CreateValue());. + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {. + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));. + } else {. + entry->AddValue(f->CreateValue());. + }. }. return entry;. }. ```. This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which preven",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:1117,usability,user,user,1117,"Tuple collection writer:. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::Create();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. *energy = 1.0;. particles->Fill();. writer->Fill();. }. void collection_entry_default() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. }. int main() {. collection_entry_default();. return 0;. }. ```. This works reasonably as expected, with the following output:. ```. {. ""particles"": [{""energy"": 1}]. }. ```. However, a user may want to create non-default entries, ie `auto entry = writer->CreateEntry();` and then calling `writer->Fill(*entry);`. <details>. <summary>Full code example</summary>. ```c++. #include <ROOT/REntry.hxx>. #include <ROOT/RNTuple.hxx>. #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;. using ROOT::Experimental::RNTupleModel;. using ROOT::Experimental::RNTupleReader;. using ROOT::Experimental::RNTupleWriter;. static void write() {. auto particleModel = RNTupleModel::Create();. auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry = writer->CreateEntry();. *energy = 1.0;. particles->Fill();. writer->Fill(*entry);. }. void collection_entry() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/issues/14642:6153,usability,user,user,6153,"leEntry2->GetPtr<float>(""energy"");. auto model = RNTupleModel::CreateBare();. auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");. auto entry1 = writer->CreateEntry();. auto entry2 = writer->CreateEntry();. *energy1 = 1.0;. particles->Fill(*particleEntry1);. *energy2 = 1.0;. particles->Fill(*particleEntry2);. *energy2 = 2.0;. particles->Fill(*particleEntry2);. *energy2 = 3.0;. particles->Fill(*particleEntry2);. *energy1 = 2.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry2);. *energy1 = 3.0;. particles->Fill(*particleEntry1);. writer->Fill(*entry1);. }. void collection_entry_multiple() {. write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");. reader->Show(0);. reader->Show(1);. }. int main() {. collection_entry_multiple();. return 0;. }. ```. </details>. yields. ```. {. ""particles"": [{""energy"": 1}, {""energy"": 1}, {""energy"": 2}, {""energy"": 3}, {""energy"": 2}]. }. {. ""particles"": [{""energy"": 3}]. }. ```. while the expected output would be `[{""energy"": 1}, {""energy"": 2}, {""energy"": 3}]` twice. Moreover, thinking about parallel writing, there will be an additional complication: `RCollectionField::CloneImpl` doesn't clone the `fCollectionWriter`, so there is only a single instance across all cloned models:. https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RField.cxx#L3301. Again, this could be solved conceptually by remembering the original `collectionModel` passed to `RNTupleModel::MakeCollection` and deep-cloning the collection writer (modulo it still being associated to an `RField` instead of an `REntry`), but this imposes another problem: The user would have to get the cloned collection writer out of the cloned `RCollectionField` and create entries for its `collectionModel`. Even right now, the latter is only possible before passing the model to `MakeCollection`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14642
https://github.com/root-project/root/pull/14643:275,deployability,upgrad,upgrade,275,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/pull/14643:340,deployability,build,building,340,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/pull/14643:377,deployability,instal,installed,377,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/pull/14643:199,interoperability,platform,platforms,199,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/pull/14643:362,interoperability,platform,platforms,362,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/pull/14643:275,modifiability,upgrad,upgrade,275,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/pull/14643:326,testability,simpl,simplify,326,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/pull/14643:326,usability,simpl,simplify,326,Exclude usage of `nlohmann/json_fwd.hpp` from REve [6.30]; Before llvm 13 it was not possible to parse `nlohmann/json.hpp` include. Therefore `json_fwd.hpp` was used. . But it was missing on several platforms where external `nlohmann/json.hpp` has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed `nlohmann/json.hpp`. Also should fix #14634 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14643
https://github.com/root-project/root/issues/14644:1158,availability,Operat,Operating,1158,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:915,deployability,version,version,915,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:1117,deployability,Instal,Installation,1117,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:1145,deployability,Releas,Release,1145,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:30,integrability,buffer,buffer,30,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:375,integrability,buffer,buffer,375,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:673,integrability,event,events-larger-than-,673,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:915,integrability,version,version,915,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:44,modifiability,variab,variable,44,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:915,modifiability,version,version,915,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:256,safety,safe,safety,256,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/issues/14644:1205,testability,context,context,1205,"[io] crash due to overflow in buffer length variable; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. ROOT is known to have a 1 GB maximum IO size, see https://github.com/root-project/root/issues/6734, but did not provide proper safety checks against this (since 18y). This leads to silent crashes in the WriteFastArray function. The length of the buffer Int_t l takes a negative value if we do not add these checks and n is high enough. Crash reported here: https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. Seems there are more people seeing a similar crash on the forum https://root-forum.cern.ch/t/writing-out-events-larger-than-1-gb/33106. I did not check in depth, but this PR also probably fixes https://github.com/cms-sw/cmssw/issues/40132. ### Reproducer. https://root-forum.cern.ch/t/crash-when-writing-canvas-to-tfile/58010/8?u=ferhue. ### ROOT version. ```. ROOT v6.30/04. Built for linuxx8664gcc on Jan 31 2024, 10:01:37. From heads/master@tags/v6-30-04. With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0. Binary directory: /opt/root/bin. ```. ### Installation method. Binary Release. ### Operating system. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14644
https://github.com/root-project/root/pull/14645:702,availability,error,error,702,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:189,deployability,patch,patch,189,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:662,deployability,patch,patches,662,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:1277,deployability,updat,updated,1277,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:309,energy efficiency,current,currently,309,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:296,integrability,inject,injection,296,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:575,integrability,messag,messages,575,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:631,integrability,messag,message,631,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:708,integrability,messag,messages,708,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:119,interoperability,standard,standard,119,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:575,interoperability,messag,messages,575,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:631,interoperability,messag,message,631,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:708,interoperability,messag,messages,708,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:589,modifiability,reu,reusing,589,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:702,performance,error,error,702,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:189,safety,patch,patch,189,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:237,safety,prevent,preventing,237,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:537,safety,compl,completely,537,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:662,safety,patch,patches,662,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:702,safety,error,error,702,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:1189,safety,test,tests,1189,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:1247,safety,test,tested,1247,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:1277,safety,updat,updated,1277,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:189,security,patch,patch,189,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:237,security,preven,preventing,237,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:296,security,inject,injection,296,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:537,security,compl,completely,537,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:662,security,patch,patches,662,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:1277,security,updat,updated,1277,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:1189,testability,test,tests,1189,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:1247,testability,test,tested,1247,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:324,usability,support,supported,324,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:524,usability,close,closed,524,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:695,usability,custom,custom,695,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:702,usability,error,error,702,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14645:789,usability,close,closed,789,"[cling] Add deprecation warning for declarations without `auto`; Declarations without the auto keyword are not part of standard C++. Even though it is a nice feature to have, it requires a patch on top of clang and is one of the hurdles preventing us from using the upstream clang. Implicit auto injection is currently only supported at the prompt (and only in the top-most function-level scope). So it should ideally not break other features. There are a few GitHub and JIRA issues related to this feature that can also be closed if we completely remove it. For the warning messages, I'm reusing one of the existing clang warning message (to not introduce more patches on top of the clang with custom error messages). EDIT:. Glancing through JIRA issues, these are the issues that can be closed (list might not be exhaustive):. https://its.cern.ch/jira/browse/ROOT-10309. https://its.cern.ch/jira/browse/ROOT-10593. https://its.cern.ch/jira/browse/ROOT-10284. https://its.cern.ch/jira/browse/ROOT-8828. https://its.cern.ch/jira/browse/ROOT-8538. https://its.cern.ch/jira/browse/ROOT-7970. # This Pull request:. Requires https://github.com/root-project/roottest/pull/1056 to be merged for tests to pass. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14645
https://github.com/root-project/root/pull/14646:20,modifiability,layer,layer,20,"[ntuple] move lower layer to Internal namespace; Including classes RPageSource/Sink, RCluster(Pool), RPage, RColumn and supporting classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14646
https://github.com/root-project/root/pull/14646:120,usability,support,supporting,120,"[ntuple] move lower layer to Internal namespace; Including classes RPageSource/Sink, RCluster(Pool), RPage, RColumn and supporting classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14646
https://github.com/root-project/root/pull/14647:30,deployability,build,builds,30,"[ci] Turn on ccache for macos builds; This PR turns on CCache for mac builds. This will remove a bit of pressure from the build nodes, e.g. for the build of ROOT's llvm during nightlies and all executables of the tests (unless they need to be rebuilt, of course).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14647
https://github.com/root-project/root/pull/14647:70,deployability,build,builds,70,"[ci] Turn on ccache for macos builds; This PR turns on CCache for mac builds. This will remove a bit of pressure from the build nodes, e.g. for the build of ROOT's llvm during nightlies and all executables of the tests (unless they need to be rebuilt, of course).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14647
https://github.com/root-project/root/pull/14647:122,deployability,build,build,122,"[ci] Turn on ccache for macos builds; This PR turns on CCache for mac builds. This will remove a bit of pressure from the build nodes, e.g. for the build of ROOT's llvm during nightlies and all executables of the tests (unless they need to be rebuilt, of course).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14647
https://github.com/root-project/root/pull/14647:148,deployability,build,build,148,"[ci] Turn on ccache for macos builds; This PR turns on CCache for mac builds. This will remove a bit of pressure from the build nodes, e.g. for the build of ROOT's llvm during nightlies and all executables of the tests (unless they need to be rebuilt, of course).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14647
https://github.com/root-project/root/pull/14647:213,safety,test,tests,213,"[ci] Turn on ccache for macos builds; This PR turns on CCache for mac builds. This will remove a bit of pressure from the build nodes, e.g. for the build of ROOT's llvm during nightlies and all executables of the tests (unless they need to be rebuilt, of course).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14647
https://github.com/root-project/root/pull/14647:213,testability,test,tests,213,"[ci] Turn on ccache for macos builds; This PR turns on CCache for mac builds. This will remove a bit of pressure from the build nodes, e.g. for the build of ROOT's llvm during nightlies and all executables of the tests (unless they need to be rebuilt, of course).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14647
https://github.com/root-project/root/pull/14648:152,deployability,updat,updated,152,[ci-config] Turn on all Math packages on GitHub runners; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14648
https://github.com/root-project/root/pull/14648:29,modifiability,pac,packages,29,[ci-config] Turn on all Math packages on GitHub runners; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14648
https://github.com/root-project/root/pull/14648:122,safety,test,tested,122,[ci-config] Turn on all Math packages on GitHub runners; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14648
https://github.com/root-project/root/pull/14648:152,safety,updat,updated,152,[ci-config] Turn on all Math packages on GitHub runners; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14648
https://github.com/root-project/root/pull/14648:152,security,updat,updated,152,[ci-config] Turn on all Math packages on GitHub runners; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14648
https://github.com/root-project/root/pull/14648:122,testability,test,tested,122,[ci-config] Turn on all Math packages on GitHub runners; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14648
https://github.com/root-project/root/pull/14649:51,integrability,buffer,buffer,51,[ntuple] add support for bulk reading into adopted buffer; Includes a fix in RRVecField::BulkRead for adopted buffer handling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14649
https://github.com/root-project/root/pull/14649:110,integrability,buffer,buffer,110,[ntuple] add support for bulk reading into adopted buffer; Includes a fix in RRVecField::BulkRead for adopted buffer handling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14649
https://github.com/root-project/root/pull/14649:13,usability,support,support,13,[ntuple] add support for bulk reading into adopted buffer; Includes a fix in RRVecField::BulkRead for adopted buffer handling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14649
https://github.com/root-project/root/pull/14650:82,availability,slo,slow,82,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:87,availability,down,down,87,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:40,deployability,build,builds,40,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:203,energy efficiency,Core,Core,203,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:82,reliability,slo,slow,82,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:113,safety,test,test,113,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:129,safety,test,tests,129,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:18,testability,assert,assertions,18,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:72,testability,assert,assertion,72,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:113,testability,test,test,113,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/pull/14650:129,testability,test,tests,129,"[ci] Disable LLVM assertions on mac X86 builds; On apple M2 chips, LLVM assertion slow down the execution of the test suite (>2k tests) by some 20%. This PR aims to check whether this is the case on the Core i7 mac, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14650
https://github.com/root-project/root/issues/14651:1656,availability,Operat,Operating,1656,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:1473,deployability,version,version,1473,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:1626,deployability,Instal,Installation,1626,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:0,energy efficiency,Reduc,Reduce,0,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:14,energy efficiency,alloc,allocation,14,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:204,energy efficiency,alloc,allocated,204,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:46,integrability,buffer,buffer,46,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:194,integrability,buffer,buffer,194,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:742,integrability,buffer,buffer,742,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:1473,integrability,version,version,1473,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:1016,modifiability,scenario,scenario,1016,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:1473,modifiability,version,version,1473,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:7,performance,memor,memory,7,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:611,safety,test,test,611,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:643,safety,test,test,643,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:611,testability,test,test,611,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:643,testability,test,test,643,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:1694,testability,context,context,1694,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/issues/14651:7,usability,memor,memory,7,"Reduce memory allocation size for compression buffer; ### Explain what you would like to see improved and how. In `TKey.cxx`, `TBufferXML.cxx`, `TMessage.cxx`, and `TBasket.cxx` the compression buffer is allocated with a size like:. ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen + 9*nbuffers + 28); //add 28 bytes in case object is placed in a deleted gap. ```. where . ```. Int_t buflen = TMath::Max(512,fKeylen + fObjlen);. ```. is likely enough (i.e. there is no point in keeping the result of the compression if it is larger (including any headers) than the uncompressed data. A related issue is the test at `TKey.cxx:267` (similar test is present is other places). ```. if (nout == 0 || nout >= fObjlen) { //this happens when the buffer cannot be compressed. ```. where the `nout` of a single fragment (thus at most `kMAXZIPBUF` with the total size of the object. The check is accurate if and only if there is only one fragment (i.e. `(1 + (fObjlen - 1)/kMAXZIPBUF) == 1`) other wise one can construct a scenario with some of the fragment compressing poorly (but being accepted because of the wiggle room mentioned above) and leading to case were we store the compressed data but the reader used is as uncompressed data because: `noutot == fObjlen`. Finally one should consider unifying those 4 similar code fragment (and maybe also the one in `RNTuple`) by factoring it ou. See https://github.com/root-project/root/pull/14523 for related discussions. ### ROOT version. master ; 6.32/00 or later as the fix for https://github.com/root-project/root/issues/14508 is required before attempted to address this is. ### Installation method. any. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14651
https://github.com/root-project/root/pull/14653:8,safety,REVIEW,REVIEW,8,[DO NOT REVIEW] test to trigger the CI; This is a test to trigger the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14653
https://github.com/root-project/root/pull/14653:16,safety,test,test,16,[DO NOT REVIEW] test to trigger the CI; This is a test to trigger the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14653
https://github.com/root-project/root/pull/14653:50,safety,test,test,50,[DO NOT REVIEW] test to trigger the CI; This is a test to trigger the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14653
https://github.com/root-project/root/pull/14653:8,testability,REVIEW,REVIEW,8,[DO NOT REVIEW] test to trigger the CI; This is a test to trigger the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14653
https://github.com/root-project/root/pull/14653:16,testability,test,test,16,[DO NOT REVIEW] test to trigger the CI; This is a test to trigger the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14653
https://github.com/root-project/root/pull/14653:50,testability,test,test,50,[DO NOT REVIEW] test to trigger the CI; This is a test to trigger the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14653
https://github.com/root-project/root/pull/14654:17,deployability,version,version,17,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14654:44,deployability,releas,release,44,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14654:149,deployability,releas,releases,149,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14654:17,integrability,version,version,17,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14654:17,modifiability,version,version,17,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14654:61,performance,perform,performance,61,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14654:77,reliability,stabil,stability,77,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14654:61,usability,perform,performance,61,[clad] Bump clad version to v1.3.; This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14654
https://github.com/root-project/root/pull/14655:98,deployability,observ,observed,98,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:578,deployability,patch,patch,578,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:651,deployability,patch,patches,651,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:439,energy efficiency,reduc,reduce,439,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:142,safety,hot,hotfixed,142,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:578,safety,patch,patch,578,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:651,safety,patch,patches,651,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:578,security,patch,patch,578,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:651,security,patch,patches,651,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14655:98,testability,observ,observed,98,"[cppyy] Improve integer type checking in `Utility::GetBuffer()`; The inconsistent types were also observed on 32-bit Linux. In ROOT, this was hotfixed by adding a check for 32-bit Linux in the. preprecessor check, but this required including `RConfig.h`. I don't. think this is desirable. A better and more direct check for the underlying problem case is to. check if `long int` and `int` have the same size. This is part of the effort to reduce the differences between PyROOT and. upstream CPyCppyy. I opened the same PR for upstream CPyCppyy, so there is no need to. create a patch file for that if the upstream PR gets merged. One of the. existing patches can actually be removed then. Related commits:. * https://github.com/wlav/CPyCppyy/commit/8a72866b423ad153403aed356e0cc25d763a5894. * https://github.com/root-project/root/commit/02251b5dac0f5ea957bf8be7c8c360bd31c8d45f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14655
https://github.com/root-project/root/pull/14656:192,deployability,fail,fails,192,"[ntuple] Create proper RVec alias fields from importer; Otherwise we get an `RProxiedCollectionField` with identical column representations, but getting the pointer to `RVec` from an `REntry` fails because of the mismatch between `ROOT::VecOps::RVec` and `ROOT::RVec`. Also normalize the latter to the fully qualified name to allow reading previously written ntuples and those by other implementations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14656
https://github.com/root-project/root/pull/14656:213,interoperability,mismatch,mismatch,213,"[ntuple] Create proper RVec alias fields from importer; Otherwise we get an `RProxiedCollectionField` with identical column representations, but getting the pointer to `RVec` from an `REntry` fails because of the mismatch between `ROOT::VecOps::RVec` and `ROOT::RVec`. Also normalize the latter to the fully qualified name to allow reading previously written ntuples and those by other implementations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14656
https://github.com/root-project/root/pull/14656:192,reliability,fail,fails,192,"[ntuple] Create proper RVec alias fields from importer; Otherwise we get an `RProxiedCollectionField` with identical column representations, but getting the pointer to `RVec` from an `REntry` fails because of the mismatch between `ROOT::VecOps::RVec` and `ROOT::RVec`. Also normalize the latter to the fully qualified name to allow reading previously written ntuples and those by other implementations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14656
https://github.com/root-project/root/pull/14656:107,security,ident,identical,107,"[ntuple] Create proper RVec alias fields from importer; Otherwise we get an `RProxiedCollectionField` with identical column representations, but getting the pointer to `RVec` from an `REntry` fails because of the mismatch between `ROOT::VecOps::RVec` and `ROOT::RVec`. Also normalize the latter to the fully qualified name to allow reading previously written ntuples and those by other implementations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14656
https://github.com/root-project/root/pull/14658:40,safety,test,test,40,[6.30] [tmva] Relax float comparison in test; Backport of https://github.com/root-project/root/pull/14535,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14658
https://github.com/root-project/root/pull/14658:40,testability,test,test,40,[6.30] [tmva] Relax float comparison in test; Backport of https://github.com/root-project/root/pull/14535,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14658
https://github.com/root-project/root/pull/14659:40,safety,test,test,40,[6.28] [tmva] Relax float comparison in test; Backport of https://github.com/root-project/root/pull/14535,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14659
https://github.com/root-project/root/pull/14659:40,testability,test,test,40,[6.28] [tmva] Relax float comparison in test; Backport of https://github.com/root-project/root/pull/14535,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14659
https://github.com/root-project/root/pull/14660:260,availability,consist,consistent,260,"[PyROOT] Replace `TDirectory.__getattr__` with `__getitem__`; The new recommended way to get objects from a `TFile` or any. `TDirectory` in general is now via `__getitem__`:. ```python. tree = my_file[""my_tree""] # instead of my_file.my_tree. ```. This is more consistent with other Python collections (like. dictionaries), makes sure that member functions can't be confused with. branch names, and easily allows you to use string variables as keys. The old pythonization with the `__getattr__` syntax still works, but. emits a deprecation warning and will be removed from ROOT 6.34.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14660
https://github.com/root-project/root/pull/14660:430,modifiability,variab,variables,430,"[PyROOT] Replace `TDirectory.__getattr__` with `__getitem__`; The new recommended way to get objects from a `TFile` or any. `TDirectory` in general is now via `__getitem__`:. ```python. tree = my_file[""my_tree""] # instead of my_file.my_tree. ```. This is more consistent with other Python collections (like. dictionaries), makes sure that member functions can't be confused with. branch names, and easily allows you to use string variables as keys. The old pythonization with the `__getattr__` syntax still works, but. emits a deprecation warning and will be removed from ROOT 6.34.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14660
https://github.com/root-project/root/pull/14660:260,usability,consist,consistent,260,"[PyROOT] Replace `TDirectory.__getattr__` with `__getitem__`; The new recommended way to get objects from a `TFile` or any. `TDirectory` in general is now via `__getitem__`:. ```python. tree = my_file[""my_tree""] # instead of my_file.my_tree. ```. This is more consistent with other Python collections (like. dictionaries), makes sure that member functions can't be confused with. branch names, and easily allows you to use string variables as keys. The old pythonization with the `__getattr__` syntax still works, but. emits a deprecation warning and will be removed from ROOT 6.34.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14660
https://github.com/root-project/root/pull/14661:86,deployability,modul,module,86,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:169,deployability,version,version,169,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:238,deployability,modul,modules,238,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:33,integrability,messag,message,33,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:61,integrability,messag,message,61,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:169,integrability,version,version,169,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:33,interoperability,messag,message,33,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:61,interoperability,messag,message,61,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:86,modifiability,modul,module,86,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:169,modifiability,version,version,169,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:238,modifiability,modul,modules,238,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:86,safety,modul,module,86,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14661:238,safety,modul,modules,238,"[PyROOT] Remove JupyROOT welcome message; Printing a welcome message when importing a module is uncommon in Python and quite old fashioned. If one wants to see the ROOT version, one can always print `ROOT.__version__` like for many other modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14661
https://github.com/root-project/root/pull/14662:81,availability,error,error,81,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:451,availability,error,error,451,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:261,deployability,updat,updated,261,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1823,deployability,version,version,1823,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1881,energy efficiency,model,model,1881,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1823,integrability,version,version,1823,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:360,interoperability,Platform,Platforms,360,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:377,interoperability,platform,platform,377,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1270,interoperability,Platform,Platforms,1270,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1287,interoperability,platform,platform,1287,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1592,interoperability,Platform,Platforms,1592,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1609,interoperability,platform,platform,1609,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1709,modifiability,paramet,parameter,1709,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1823,modifiability,version,version,1823,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:81,performance,error,error,81,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:341,performance,Content,Contents,341,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:435,performance,memor,memory,435,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:451,performance,error,error,451,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1251,performance,Content,Contents,1251,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1345,performance,memor,memory,1345,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1573,performance,Content,Contents,1573,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1667,performance,memor,memory,1667,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:81,safety,error,error,81,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:231,safety,test,tested,231,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:261,safety,updat,updated,261,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:451,safety,error,error,451,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:261,security,updat,updated,261,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1881,security,model,model,1881,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:231,testability,test,tested,231,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:81,usability,error,error,81,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:435,usability,memor,memory,435,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:451,usability,error,error,451,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:612,usability,User,Users,612,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:957,usability,User,Users,957,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1345,usability,memor,memory,1345,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1474,usability,user,user-declared,1474,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14662:1667,usability,memor,memory,1667,"fix: call to implicitly-deleted copy constructor; # This Pull request:. fixes an error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . ```. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:3023:39: error: call to implicitly-deleted copy constructor of 'ROOT::Experimental::RFieldBase::RSharedPtrDeleter'. __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());. ^~~. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/src/RField.cxx:689:24: note: in instantiation of function template specialization 'std::shared_ptr<void>::shared_ptr<void, ROOT::Experimental::RFieldBase::RSharedPtrDeleter>' requested here. return RValue(this, std::shared_ptr<void>(where, RSharedPtrDeleter(GetDeleter())));. ^. /Users/yana/Projects/ROOT/Fixathon_13_02_2024/root/tree/ntuple/v7/inc/ROOT/RField.hxx:126:45: note: copy constructor of 'RSharedPtrDeleter' is implicitly deleted because field 'fDeleter' has a deleted copy constructor. std::unique_ptr<RFieldBase::RDeleter> fDeleter;. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:1584:3: note: copy constructor is implicitly deleted because 'unique_ptr<ROOT::Experimental::RFieldBase::RDeleter>' has a user-declared move constructor. unique_ptr(unique_ptr&& __u) _NOEXCEPT. ^. /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1/memory:2569:39: note: passing argument to parameter '__d' here. __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a). ^. ```. ```. % clang -v. Homebrew clang version 16.0.1. Target: x86_64-apple-darwin20.6.0. Thread model: posix. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14662
https://github.com/root-project/root/pull/14663:260,deployability,upgrad,upgrade,260,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/pull/14663:325,deployability,build,building,325,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/pull/14663:362,deployability,instal,installed,362,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/pull/14663:186,interoperability,platform,platforms,186,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/pull/14663:347,interoperability,platform,platforms,347,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/pull/14663:260,modifiability,upgrad,upgrade,260,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/pull/14663:311,testability,simpl,simplify,311,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/pull/14663:311,usability,simpl,simplify,311,Exclude usage of `nlohmann/json_fwd.hpp` from REve; Before llvm 13 it was not possible to parse nlohmann/json.hpp include. Therefore json_fwd.hpp was used. But it was missing on several platforms where external nlohmann/json.hpp has to be used. Now after llvm upgrade it is not necessary to use it. This should simplify ROOT building and usage on platforms with installed nlohmann/json.hpp. Porting of changes in 6.30 branch from #14643 to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14663
https://github.com/root-project/root/issues/14664:162,availability,error,error,162,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:413,availability,Operat,Operating,413,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:12,deployability,build,building,12,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:173,deployability,build,building,173,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:315,deployability,Build,Build,315,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:348,deployability,version,version,348,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:369,deployability,Instal,Installation,369,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:390,deployability,build,build,390,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:348,integrability,version,version,348,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:348,modifiability,version,version,348,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:162,performance,error,error,162,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:162,safety,error,error,162,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:455,testability,context,context,455,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/issues/14664:162,usability,error,error,162,Issue while building ROOT with old libc++ in macOS 11; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. There seems to be a compilation error when building ROOT on macOS 11 reported by @ianna . This issue should be fixed by https://github.com/root-project/root/pull/14662. ### Reproducer. Build ROOT from source. ### ROOT version. master. ### Installation method. build from source. ### Operating system. MacOS12. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14664
https://github.com/root-project/root/pull/14666:339,deployability,Stack,Stacked,339,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:727,energy efficiency,Draw,Draw,727,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:750,energy efficiency,Draw,Draw,750,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:394,safety,test,test,394,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:496,safety,test,test,496,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:598,safety,test,test,598,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:394,testability,test,test,394,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:496,testability,test,test,496,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14666:598,testability,test,test,598,"Implement FLT_MAX mechanism for GetMinimum and GetMaximum; This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(). The following example illustrates the mechanism:. ```. void hstackgetmax() {. auto hs = new THStack(""hs"",""Stacked 1D histograms"");. auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);. h1st->FillRandom(""gaus"",20000);. hs->Add(h1st);. auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);. h2st->FillRandom(""gaus"",15000);. hs->Add(h2st);. auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);. h3st->FillRandom(""gaus"",10000);. hs->Add(h3st);. auto C = new TCanvas();. C->Divide(2,1);. C->cd(1); hs->Draw();. C->cd(2); hs->Draw(""nostack"");. printf(""Max = %f\n"", hs->GetMaximum());. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));. printf(""Max = %f\n"", hs->GetMaximum("""", 10000));. printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14666
https://github.com/root-project/root/pull/14667:180,availability,error,error,180,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:78,deployability,build,build,78,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:84,deployability,fail,fails,84,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:195,deployability,integr,integral,195,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:22,energy efficiency,optim,optimizations,22,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:195,integrability,integr,integral,195,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:195,interoperability,integr,integral,195,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:195,modifiability,integr,integral,195,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:22,performance,optimiz,optimizations,22,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:180,performance,error,error,180,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:84,reliability,fail,fails,84,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:195,reliability,integr,integral,195,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:180,safety,error,error,180,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:195,security,integr,integral,195,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:195,testability,integr,integral,195,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:180,usability,error,error,180,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:519,usability,user,user-provided,519,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14667:617,usability,Close,Closes,617,"[cling] Fix disabling optimizations with CLING_DEBUG; As noted in #14593, the build fails during a `rootcling` execution when setting `CLING_DEBUG=1` in the environment with. ```. error: invalid integral value '0 -fno-omit-frame-pointer' in '-O0 -fno-omit-frame-pointer'. ```. Upon investigation, it only works in the ROOT prompt because TCling turns on basic `-O1` unless in `rootcling`. This overrides the (misformed) `""-O0 -fno-omit-frame-pointer""`. Split the argument in two entries and move it after inserting the user-provided arguments to properly apply also on the prompt by now taking precedence over `-O1`. Closes #14593",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14667
https://github.com/root-project/root/pull/14668:58,availability,error,error,58,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:247,availability,error,error,247,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:412,deployability,updat,updated,412,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:64,integrability,messag,message,64,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:147,integrability,rout,routine,147,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:253,integrability,messag,message,253,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:64,interoperability,messag,message,64,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:253,interoperability,messag,message,253,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:58,performance,error,error,58,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:247,performance,error,error,247,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:23,reliability,Poisson,Poisson,23,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:291,reliability,Poisson,PoissonD,291,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:58,safety,error,error,58,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:247,safety,error,error,247,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:382,safety,test,tested,382,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:412,safety,updat,updated,412,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:412,security,updat,updated,412,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:382,testability,test,tested,382,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:58,usability,error,error,58,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14668:247,usability,error,error,247,"[Math] Change TRandom::Poisson to return a ULong64_t; Add error message for overflow in converting double to ULong64_t. ## Changes or fixes:. This routine returns now an unsigned 64 bit integer. For large values, larger than 1.84e+19, we print an error message. advising to use the Trandom::PoissonD for such large values,. and return the max value UINT64_MAX. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6927 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14668
https://github.com/root-project/root/pull/14669:282,availability,state,statement,282,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:27,deployability,contain,containers,27,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:185,deployability,contain,containers,185,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:235,deployability,contain,containers,235,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:558,deployability,updat,updated,558,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:282,integrability,state,statement,282,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:13,safety,test,tests,13,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:395,safety,test,tests,395,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:444,safety,test,test,444,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:528,safety,test,tested,528,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:558,safety,updat,updated,558,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:558,security,updat,updated,558,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:13,testability,test,tests,13,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:395,testability,test,tests,395,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:444,testability,test,test,444,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:528,testability,test,tested,528,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:47,usability,behavi,behaviour,47,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14669:80,usability,Close,Closes,80,"[PyROOT] Add tests for stl containers pythonic behaviour; # This Pull request:. Closes https://github.com/root-project/root/issues/14573. ## Changes or fixes:. The pythonization of stl containers should behave in a pythonic way: empty containers should evaluate to false in an `if` statement, etc. While working on the issue I realized this is already the case, so this PR just adds some python tests that should cover this. I also added a new test file that checks the `std::set` also behaves as expected. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14669
https://github.com/root-project/root/pull/14670:15,deployability,version,version,15,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:131,deployability,instal,installation,131,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:212,deployability,instal,installation,212,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:459,deployability,updat,updated,459,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:15,integrability,version,version,15,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:15,modifiability,version,version,15,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:8,safety,Detect,Detect,8,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:429,safety,test,tested,429,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:459,safety,updat,updated,459,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:8,security,Detect,Detect,8,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:459,security,updat,updated,459,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:165,testability,simpl,simply,165,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:429,testability,test,tested,429,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:69,usability,user,user,69,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14670:165,usability,simpl,simply,165,"[CMake] Detect version of oneTBB; # This Pull request:. Normally the user needs to use the TBBConfig.cmake that comes with the TBB installation. This is achieved by simply setting the `CMAKE_PREFIX_PATH` the the installation of TBB. In case it is not used, the `FindTBB.cmake` shipped with ROOT is used. In this case a fix has been made to set properly the TBB_VERSION. . ## Changes or fixes:. Issue #8260. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14670
https://github.com/root-project/root/pull/14671:35,deployability,Updat,Update,35,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:76,deployability,Updat,Update,76,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:14,performance,perform,perform,14,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:125,performance,perform,performs,125,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:35,safety,Updat,Update,35,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:76,safety,Updat,Update,76,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:22,security,Modif,Modified,22,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:35,security,Updat,Update,35,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:61,security,Modif,Modified,61,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:76,security,Updat,Update,76,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:2,usability,shortcut,shortcut,2,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:14,usability,perform,perform,14,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/pull/14671:125,usability,perform,performs,125,"A shortcut to perform Modified and Update; Short cut to call Modified() and Update() in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14671
https://github.com/root-project/root/issues/14672:1052,availability,error,error,1052," Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1157,availability,Error,Error,1157,"brary ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1217,availability,Error,Error,1217,"ure x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Pyth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1242,availability,Error,Error,1242,"nd_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1993,availability,Operat,Operating,1993,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:6,deployability,build,build,6,"PyMVA build fails on MacOS 11.6 with Python 3.10.1; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:12,deployability,fail,fails,12,"PyMVA build fails on MacOS 11.6 with Python 3.10.1; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1074,deployability,fail,failed,1074,"s. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1281,deployability,build,build,1281,":. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-130",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1304,deployability,instal,install,1304,"ain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. `",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1330,deployability,version,version,1330,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1735,deployability,version,version,1735,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1932,deployability,Instal,Installation,1932,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:2056,deployability,build,build,2056,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:2168,deployability,build,build,2168,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1330,integrability,version,version,1330,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1735,integrability,version,version,1735,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:151,interoperability,share,shared,151,"PyMVA build fails on MacOS 11.6 with Python 3.10.1; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:211,interoperability,architectur,architecture,211,"PyMVA build fails on MacOS 11.6 with Python 3.10.1; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1024,interoperability,architectur,architecture,1024,"6 with Python 3.10.1; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Add",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1330,modifiability,version,version,1330,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1735,modifiability,version,version,1735,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1052,performance,error,error,1052," Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1157,performance,Error,Error,1157,"brary ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1217,performance,Error,Error,1217,"ure x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Pyth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1242,performance,Error,Error,1242,"nd_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:12,reliability,fail,fails,12,"PyMVA build fails on MacOS 11.6 with Python 3.10.1; ### Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1074,reliability,fail,failed,1074,"s. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `l",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1052,safety,error,error,1052," Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1157,safety,Error,Error,1157,"brary ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1217,safety,Error,Error,1217,"ure x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Pyth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1242,safety,Error,Error,1242,"nd_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:2065,safety,detect,detecting,2065,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1542,security,Team,Team,1542,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:2065,security,detect,detecting,2065,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:2038,testability,context,context,2038,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1052,usability,error,error,1052," Check duplicate issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1066,usability,command,command,1066,"e issues. - [ ] Checked for duplicates. ### Description. ```. [100%] Linking CXX shared library ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1157,usability,Error,Error,1157,"brary ../../lib/libPyMVA.so. Undefined symbols for architecture x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1217,usability,Error,Error,1217,"ure x86_64:. ""_libintl_bind_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Pyth",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1242,usability,Error,Error,1242,"nd_textdomain_codeset"", referenced from:. __locale_bind_textdomain_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/issues/14672:1782,usability,help,help,1782,"n_codeset in libpython3.10.a(_localemodule.o). ""_libintl_bindtextdomain"", referenced from:. __locale_bindtextdomain in libpython3.10.a(_localemodule.o). ""_libintl_dcgettext"", referenced from:. __locale_dcgettext in libpython3.10.a(_localemodule.o). ""_libintl_dgettext"", referenced from:. __locale_dgettext in libpython3.10.a(_localemodule.o). ""_libintl_gettext"", referenced from:. __locale_gettext in libpython3.10.a(_localemodule.o). ""_libintl_setlocale"", referenced from:. __locale_setlocale in libpython3.10.a(_localemodule.o). __locale_localeconv in libpython3.10.a(_localemodule.o). ""_libintl_textdomain"", referenced from:. __locale_textdomain in libpython3.10.a(_localemodule.o). ld: symbol(s) not found for architecture x86_64. clang: error: linker command failed with exit code 1 (use -v to see invocation). make[2]: *** [lib/libPyMVA.so] Error 1. make[1]: *** [tmva/pymva/CMakeFiles/PyMVA.dir/all] Error 2. make: *** [all] Error 2. ```. ### Reproducer. `cmake --build mybuild --target install -j4 -v`. ### ROOT version. master branch from 12.02.2024:. ```. root -b -q . ------------------------------------------------------------------------------. | Welcome to ROOT 6.31/01 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for macosx64 on Feb 13 2024, 09:47:07 |. | From heads/ianna/call_to_implicitly-deleted_copy_constructor_fix@5d76922a0f |. | With Apple clang version 13.0.0 (clang-1300.0.29.30) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------------------. ```. ### Installation method. fixation step-by-step instructions. ### Operating system. MacOS 11.6. ### Additional context. Python's build is detecting `libintl` but not using necessary linker flags when compiling. For example, fix for my local build is to add `-L/usr/local/lib -lintl`. ```. Python 3.10.1 (main, Jan 10 2022, 12:04:16) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14672
https://github.com/root-project/root/pull/14673:31,security,sign,signature,31,[meta] Use correct type in the signature of TClass::SetDeclFile; this fixes #14562.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14673
https://github.com/root-project/root/pull/14674:502,deployability,updat,updated,502,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:442,integrability,pub,public,442,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:24,reliability,doe,does,24,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:471,safety,test,tested,471,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:502,safety,updat,updated,502,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:502,security,updat,updated,502,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:471,testability,test,tested,471,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:64,usability,document,documentation,64,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:150,usability,behavi,behavior,150,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:221,usability,document,documentation,221,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/pull/14674:333,usability,behavi,behavior,333,"[skip-ci] AddBinContent does not check bounds: comment added to documentation; Passing an out-of-range bin to `TH1::AddBinContent` leads to undefined behavior. # This Pull request:. ## Changes or fixes:. Comment added to documentation: `TH1::AddBinContent` do not check bin boundaries, passing an out-of-range bin leads to undefined behavior. The boundary check is not needed because this method should be used only internally, despite being public. ## Checklist:. - [ ] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/14575.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14674
https://github.com/root-project/root/issues/14675:515,availability,error,error,515,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2011,availability,restor,restoring,2011,"(https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the sam",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3165,availability,reliab,reliably,3165,"ine to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4937,availability,mask,masked,4937,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5290,availability,Operat,Operating,5290,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1737,deployability,integr,integrated,1737,":CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2245,deployability,patch,patch,2245," mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2374,deployability,updat,update,2374,"the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3106,deployability,depend,depending,3106," parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3155,deployability,manag,manage,3155,"mment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3390,deployability,patch,patch,3390,"ation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3741,deployability,patch,patch,3741,"ver re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> stor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4661,deployability,continu,continue,4661,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4691,deployability,continu,continue,4691,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4761,deployability,contain,container,4761,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5033,deployability,version,version,5033,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5051,deployability,observ,observation,5051,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5200,deployability,Instal,Installation,5200,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3155,energy efficiency,manag,manage,3155,"mment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5105,energy efficiency,current,current,5105,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5180,energy efficiency,current,current,5180,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1232,integrability,messag,message,1232,"ager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1737,integrability,integr,integrated,1737,":CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3106,integrability,depend,depending,3106," parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5033,integrability,version,version,5033,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:605,interoperability,standard,standard,605,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1232,interoperability,messag,message,1232,"ager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (se",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1737,interoperability,integr,integrated,1737,":CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2453,interoperability,standard,standard,2453,"ommented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:357,modifiability,paramet,parameter,357,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:959,modifiability,paramet,parameter,959,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1737,modifiability,integr,integrated,1737,":CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2112,modifiability,paramet,parameter,2112,"s commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2420,modifiability,paramet,parameter,2420,"CheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](http",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3106,modifiability,depend,depending,3106," parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5033,modifiability,version,version,5033,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:515,performance,error,error,515,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2795,performance,time,time,2795," changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoCh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3244,performance,time,time,3244,"atch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1240,reliability,doe,does,1240,"CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1737,reliability,integr,integrated,1737,":CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2011,reliability,restor,restoring,2011,"(https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the sam",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3165,reliability,reliab,reliably,3165,"ine to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3674,reliability,doe,does,3674,"reased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:515,safety,error,error,515,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1629,safety,valid,valid,1629," check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1862,safety,except,exceptions,1862,"eCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2245,safety,patch,patch,2245," mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2374,safety,updat,update,2374,"the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2882,safety,test,tested,2882,"t the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3106,safety,depend,depending,3106," parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3155,safety,manag,manage,3155,"mment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3252,safety,test,test,3252,"**Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3390,safety,patch,patch,3390,"ation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3741,safety,patch,patch,3741,"ver re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> stor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4594,safety,safe,safety,4594,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4602,safety,safe,safe,4602,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4616,safety,Safe,Safety,4616,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4648,safety,safe,safe,4648,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:4678,safety,safe,safe,4678,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1737,security,integr,integrated,1737,":CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2245,security,patch,patch,2245," mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2374,security,updat,update,2374,"the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2779,security,session,session,2779,"^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompain",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3390,security,patch,patch,3390,"ation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. In",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3741,security,patch,patch,3741,"ver re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> stor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:429,testability,understand,understand,429,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1737,testability,integr,integrated,1737,":CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2238,testability,simpl,simple,2238,"oes not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2882,testability,test,tested,2882,"t the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. -",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3106,testability,depend,depending,3106," parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3252,testability,test,test,3252,"**Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5051,testability,observ,observation,5051,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:5355,testability,context,context,5355,"aps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */, Int_t npoints) const. +void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t ovlp, Int_t npoints) const. {. Int_t nd = vol->GetNdaughters();. if (nd < 2). @@ -1268,7 +1268,7 @@ void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp */,. }. // The point is inside 2 or more daughters, check safety. safe = shape->Safety(local, kTRUE);. - // if (safe < ovlp) continue;. + if (safe < ovlp) continue;. // We really have found an overlap -> store the point in a container. iovlp++;. if (!novlps) {. ```. 3. Recompile/Reinstall and Re-run: big overlaps unchanged as expected, known overlaps of size ~0.4 still there with low threshold but masked with sufficient threshold, overlap of size ~10^-8 cut in all cases as expected. ### ROOT version. Original observation with `v6.22` to `v6.26`. Cross-check with current master, given source commit probably present from `v5-19-04` until current master. ### Installation method. Built from source within Fairsoft, built from source standalone. ### Operating system. Ubuntu 20.04, Debian 10 and 11. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:211,usability,document,documentation,211,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:450,usability,minim,minimal,450,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:515,usability,error,error,515,"[geompainter] Overlap threshold not used in TGeoChecker::CheckOverlapsBySampling (sampling mode of TGeoManager::CheckOverlaps); ### Check duplicate issues. - [X] Checked for duplicates. ### Description. In the [documentation of `TGeoManager::CheckOverlaps`](https://root.cern.ch/doc/master/classTGeoManager.html#afa2bfedf7f02398fdf5867072a77a884) the first parameter `ovlp` is described as a limit for the overlap size (which we understand to be the minimal size before considering it as illegal and triggering the error). This method lead through chained calls to either `TGeoChecker::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:1578,usability,indicat,indicate,1578,"er::MakeCheckOverlap` (standard surface/edge/point check) or `TGeoChecker::CheckOverlapsBySampling` (sampling check):. ```. TGeoManager::CheckOverlaps => TNode::CheckOverlaps => TGeoVolume::CheckOverlaps => TGeoPainter::CheckOverlaps => TGeoChecker::CheckOverlaps | => TGeoChecker::MakeCheckOverlap. | => TGeoChecker::CheckOverlapsBySampling. ```. However [the line using this parameter in the sampling case (l.1271) is commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1271). It was commented in https://github.com/root-project/root/commit/406af49ee13e135d7c2f1268370ea83e0a99c729 and the commit message does not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2238,usability,simpl,simple,2238,"oes not mention this change explicitly (maybe a consequence of the introduction of the usage of `Voxels`?). The [corresponding line for the non-sampling method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2385,usability,document,documentation,2385,"g method is in `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.pa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:2402,usability,indicat,indicate,2402," `TGeoChecker::MakeCheckOverlap` (l.1173) and not commented out](https://github.com/root-project/root/blame/master/geom/geompainter/src/TGeoChecker.cxx#L1173), which would indicate that the intended original usage is still valid. We (CBMROOT) stumbled upon this as we started to find for some of our geometries overlaps with total integrated volume in the order of `10^-6 to 10^-10 cm3` when changing the sampling points number. We first started by adding exceptions in our CI but the list quickly grew as the sampling position is different with each change in the fully assembled geometry volume. Having/restoring the possibility to ignore the ""really small"" overlaps would cure our problem with a single parameter. Proposed solutions:. - either un-comment the line to re-enable the threshold if it is not bringing other bugs (see simple patch in **Reproducer**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_ov",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/issues/14675:3261,usability,confirm,confirm,3261,"r**). => This seems to work for me locally with a fresh copy of the master under Ubuntu 20.04. - or at least update the documentation to indicate that the parameter `ovlp` is used only in standard mode and ignored in sampling mode. --------------------------------. Potential related bug: some of these really small overlaps appear only when the number of samples is increased but disappear if it is further increased. However for a given number the list of overlaps is stabled over re-running the macro (new ROOT session at each time). The new overlaps also appear mostly in the ""last volumes in the geometry"" to be tested. So it could be that something is not so stable in the sequence of random points:. - first volume getting always mostly the same points independent of the number of samples . - while last volume getting set of points depending highly on number of samples. I did not manage to reliably reproduce it however so I would create a separate issue if I find the time to test and confirm it later. ### Reproducer. Files in archive: examine_mcbm_beam_2019_03.geo.root, check_overlaps.C, root_overlaps_samp_thr.patch. [check_overlaps.tar.gz](https://github.com/root-project/root/files/14261529/check_overlaps.tar.gz). 1. Run once the macro with master: some big overlaps, some known overlaps of size ~0.4, some overlap of size ~10^-8 only if higher number of samples provided, overlap threshold does not have an effect in sampling mode calls. 2. Apply following patch. ```diff. diff --git a/geom/geompainter/src/TGeoChecker.cxx b/geom/geompainter/src/TGeoChecker.cxx. index fc93cc8b82..0e77517729 100644. --- a/geom/geompainter/src/TGeoChecker.cxx. +++ b/geom/geompainter/src/TGeoChecker.cxx. @@ -1193,7 +1193,7 @@ TGeoOverlap *TGeoChecker::MakeCheckOverlap(const char *name, TGeoVolume *vol1, T. /// Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints. /// inside the volume shape. -void TGeoChecker::CheckOverlapsBySampling(TGeoVolume *vol, Double_t /* ovlp ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14675
https://github.com/root-project/root/pull/14676:5,deployability,Updat,Update,5,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:314,deployability,fail,fails,314,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:314,reliability,fail,fails,314,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:338,reliability,doe,does,338,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:5,safety,Updat,Update,5,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:248,safety,test,tested,248,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:293,safety,test,test-norootextension,293,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:5,security,Updat,Update,5,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:248,testability,test,tested,248,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14676:293,testability,test,test-norootextension,293,[DF] Update functions to use ROOT::Internal::GetDemangledTypeName; @vepadulano . This PR departs from using RDFInternal::TypeID2TypeName and obtains the Demangled name. Fixes https://github.com/root-project/root/issues/14577. ### Checklist:. - [x] tested changes locally. gtest-root-dataframe-test-norootextension fails but seems like it does not have anything to do with this change.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14676
https://github.com/root-project/root/pull/14677:13,availability,error,error,13,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:174,availability,error,error,174,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:53,deployability,fail,fails,53,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:138,deployability,fail,failed,138,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:306,deployability,updat,updated,306,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:19,integrability,messag,message,19,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:146,integrability,messag,message,146,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:180,integrability,messag,message,180,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:19,interoperability,messag,message,19,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:146,interoperability,messag,message,146,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:180,interoperability,messag,message,180,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:13,performance,error,error,13,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:170,performance,I/O,I/O,170,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:174,performance,error,error,174,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:53,reliability,fail,fails,53,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:138,reliability,fail,failed,138,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:13,safety,error,error,13,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:174,safety,error,error,174,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:276,safety,test,tested,276,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:306,safety,updat,updated,306,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:306,security,updat,updated,306,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:131,testability,assert,assert,131,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:276,testability,test,tested,276,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:13,usability,error,error,13,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14677:174,usability,error,error,174,Add detailed error message if RNTupleWriter::Write() fails; # This Pull request:. ## Changes or fixes:. Replaced somewhat cryptic 'assert failed' message with the actual I/O error message explaining what went wrong in RNTupleWriter::RFileSimple::Write(). ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #14487.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14677
https://github.com/root-project/root/pull/14678:25,safety,test,test,25,[skip-ci][tree] Add unit test for issue #10556; Adds a test for https://github.com/root-project/root/issues/7159,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14678
https://github.com/root-project/root/pull/14678:55,safety,test,test,55,[skip-ci][tree] Add unit test for issue #10556; Adds a test for https://github.com/root-project/root/issues/7159,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14678
https://github.com/root-project/root/pull/14678:20,testability,unit,unit,20,[skip-ci][tree] Add unit test for issue #10556; Adds a test for https://github.com/root-project/root/issues/7159,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14678
https://github.com/root-project/root/pull/14678:25,testability,test,test,25,[skip-ci][tree] Add unit test for issue #10556; Adds a test for https://github.com/root-project/root/issues/7159,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14678
https://github.com/root-project/root/pull/14678:55,testability,test,test,55,[skip-ci][tree] Add unit test for issue #10556; Adds a test for https://github.com/root-project/root/issues/7159,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14678
https://github.com/root-project/root/pull/14679:344,deployability,updat,updated,344,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:314,safety,test,tested,314,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:344,safety,updat,updated,344,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:344,security,updat,updated,344,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:314,testability,test,tested,314,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:18,usability,document,documentation,18,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:131,usability,document,documentation,131,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:186,usability,document,documented,186,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/pull/14679:395,usability,Close,Closes,395,[skip-ci] Correct documentation for `TGLViewer::SetPerspectiveCamera`; # This Pull request:. ## Changes or fixes:. Only changes to documentation. Previously `hRotate` and `vRotate` were documented to be degrees while they should be radians. Also `hRotate` appeared twice instead of `vRotate`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/root/issues/14576,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14679
https://github.com/root-project/root/issues/14680:339,availability,Operat,Operating,339,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:203,deployability,fail,failing,203,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:291,deployability,version,version,291,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:309,deployability,Instal,Installation,309,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:291,integrability,version,version,291,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:291,modifiability,version,version,291,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:203,reliability,fail,failing,203,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:197,safety,test,tests,197,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:197,testability,test,tests,197,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:377,testability,context,context,377,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/issues/14680:71,usability,behavi,behaviour,71,"Consolidate issues [#8905, #8922] into one single issue related to the behaviour of ROOT with ASAN; ### Explain what you would like to see improved and how. The issues [#8905, #8922] are all about tests failing because ASAN is used. They should be consolidated in one single issue. ### ROOT version. all. ### Installation method. all. ### Operating system. all. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14680
https://github.com/root-project/root/pull/14681:5,availability,restor,restore,5,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:20,availability,state,state,20,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:200,deployability,updat,updated,200,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:20,integrability,state,state,20,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:111,interoperability,format,formatting,111,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:5,reliability,restor,restore,5,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:170,safety,test,tested,170,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:200,safety,updat,updated,200,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:200,security,updat,updated,200,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:170,testability,test,tested,170,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:29,usability,Progress,ProgressBar,29,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/pull/14681:136,usability,Progress,ProgressBar,136,[DF] restore stream state in ProgressBar; # This Pull request:. ## Changes or fixes:. This PR fixes the stream formatting in RDataFrame ProgressBar. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#14611](https://github.com/root-project/root/issues/14611).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14681
https://github.com/root-project/root/issues/14682:743,availability,failur,failure,743,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:1121,availability,Operat,Operating,1121,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:55,deployability,fail,failing,55,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:617,deployability,depend,dependency,617,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:743,deployability,fail,failure,743,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:921,deployability,automat,automatic,921,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:1049,deployability,version,version,1049,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:1070,deployability,Instal,Installation,1070,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:270,integrability,event,event,270,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:357,integrability,event,event,357,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:408,integrability,schema,schemaEvolution,408,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:617,integrability,depend,dependency,617,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:693,integrability,buffer,buffer-overflow,693,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:968,integrability,translat,translated,968,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:1049,integrability,version,version,1049,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:968,interoperability,translat,translated,968,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:617,modifiability,depend,dependency,617,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:1049,modifiability,version,version,1049,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:743,performance,failur,failure,743,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:55,reliability,fail,failing,55,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:743,reliability,fail,failure,743,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:45,safety,test,tests,45,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:617,safety,depend,dependency,617,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:846,safety,test,tests,846,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:947,safety,test,tests,947,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:45,testability,test,tests,45,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:617,testability,depend,dependency,617,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:846,testability,test,tests,846,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:921,testability,automat,automatic,921,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:947,testability,test,tests,947,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/issues/14682:1166,testability,context,context,1166,"MIsbehaviour of ROOT with ASAN enabled: some tests are failing; ### Check duplicate issues. - [x] Checked for duplicates. ### Description. ROOT misbehaves when ASAN is enabled. Below different incarnation of the problem are illustrated:. - [ ] root/io/bigevent, root/io/event, root/io/compression, root/io/datamodelevolution, root/io/perf, root/treeformula/event, root/treeformula/retobj, . root/treeformula/schemaEvolution, root/treeformula/sync, root/tree/friend, root/tree/evolution, root/tree/treeproblem, root/treeproxy, root/io/compression : bad linkage to asan functions. - [ ] root/io/references: badly setup dependency on libEvent. - [ ] root/tree/addresses : `AddressSanitizer: heap-buffer-overflow`. - [ ] root/io/newClassDef: Real failure with ASAN enabled. - [ ] root/io/cint: bad linkage to ASAN libraries. Should also check if the tests are needed at all. Moreover, the above (and root/tree/addresses) are automatic Makefile driven tests. They could be translated to CMake to gain granularity. ### Reproducer. Run with Asan. ### ROOT version. master. ### Installation method. From sources (need asan). ### Operating system. Linux, mac. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14682
https://github.com/root-project/root/pull/14683:16,deployability,depend,dependabot,16,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:30,deployability,updat,update,30,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:102,deployability,depend,dependabot,102,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:148,deployability,depend,dependabot,148,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:217,deployability,updat,updated,217,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:385,deployability,version,version,385,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:427,deployability,version,version,427,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:478,deployability,version,version,478,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:486,deployability,releas,released,486,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:509,deployability,updat,updated,509,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:682,deployability,contain,contains,682,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:226,energy efficiency,Current,Currently,226,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:16,integrability,depend,dependabot,16,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:102,integrability,depend,dependabot,102,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:134,integrability,configur,configure,134,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:148,integrability,depend,dependabot,148,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:236,integrability,configur,configured,236,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:250,integrability,sub,submit,250,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:353,integrability,configur,configured,353,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:385,integrability,version,version,385,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:427,integrability,version,version,427,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:478,integrability,version,version,478,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:407,interoperability,specif,specify,407,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:16,modifiability,depend,dependabot,16,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:102,modifiability,depend,dependabot,102,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:134,modifiability,configur,configure,134,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:148,modifiability,depend,dependabot,148,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:236,modifiability,configur,configured,236,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:353,modifiability,configur,configured,353,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:385,modifiability,version,version,385,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:427,modifiability,version,version,427,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:478,modifiability,version,version,478,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:291,performance,concurren,concurrent,291,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:448,performance,time,times,448,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:16,reliability,dependab,dependabot,16,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:102,reliability,dependab,dependabot,102,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:148,reliability,dependab,dependabot,148,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:16,safety,depend,dependabot,16,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:30,safety,updat,update,30,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:102,safety,depend,dependabot,102,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:148,safety,depend,dependabot,148,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:217,safety,updat,updated,217,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:509,safety,updat,updated,509,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:630,safety,test,test,630,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:30,security,updat,update,30,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:134,security,configur,configure,134,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:217,security,updat,updated,217,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:236,security,configur,configured,236,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:353,security,configur,configured,353,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:509,security,updat,updated,509,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:16,testability,depend,dependabot,16,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:102,testability,depend,dependabot,102,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:148,testability,depend,dependabot,148,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14683:630,testability,test,test,630,"[ci-config] Add dependabot to update GitHub Actions; # This Pull request:. ## Changes or fixes:. Add `dependabot.yml` file which will configure the dependabot to periodically create PRs whenever GitHub actions can be updated. Currently configured to submit the PR weekly with a maximum of 5 concurrent open PRs. GitHub actions cannot (or should not) be configured to run on the latest version, you can only specify which major version to run. Many times whenever there is a new version released it never gets updated on the developer's end. This PR fixes this with the added benefit of a dedicated PR for each action which should test if there are any breaking changes. The PR also contains a link to the action changelog.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14683
https://github.com/root-project/root/pull/14684:62,deployability,modul,modules,62,"[ntuple] Remove `R__LOAD_LIBRARY` from tutorials; C++ runtime modules are now used by default, and it actually seems to not pose any issues for builds that don't have it enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14684
https://github.com/root-project/root/pull/14684:144,deployability,build,builds,144,"[ntuple] Remove `R__LOAD_LIBRARY` from tutorials; C++ runtime modules are now used by default, and it actually seems to not pose any issues for builds that don't have it enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14684
https://github.com/root-project/root/pull/14684:62,modifiability,modul,modules,62,"[ntuple] Remove `R__LOAD_LIBRARY` from tutorials; C++ runtime modules are now used by default, and it actually seems to not pose any issues for builds that don't have it enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14684
https://github.com/root-project/root/pull/14684:62,safety,modul,modules,62,"[ntuple] Remove `R__LOAD_LIBRARY` from tutorials; C++ runtime modules are now used by default, and it actually seems to not pose any issues for builds that don't have it enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14684
https://github.com/root-project/root/pull/14685:221,deployability,instal,installation,221,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:325,deployability,updat,updated,325,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:115,modifiability,pac,packages,115,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:198,modifiability,pac,packages,198,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:159,safety,test,tests,159,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:210,safety,test,tested,210,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:295,safety,test,tested,295,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:325,safety,updat,updated,325,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:325,security,updat,updated,325,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:159,testability,test,tests,159,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:210,testability,test,tested,210,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14685:295,testability,test,tested,295,[skip-ci][tmva] Add tmva python requirements; # This Pull request:. ## Changes or fixes:. Add TMVA python optional packages. CI should now run some additional tests that were skipped due to missing packages. I tested the installation of the requirements.txt on python 3.10. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14553.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14685
https://github.com/root-project/root/pull/14686:266,deployability,updat,updated,266,[tgraph] Add TGraph::SetOption; To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14686
https://github.com/root-project/root/pull/14686:58,energy efficiency,draw,draw,58,[tgraph] Add TGraph::SetOption; To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14686
https://github.com/root-project/root/pull/14686:77,energy efficiency,draw,drawing,77,[tgraph] Add TGraph::SetOption; To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14686
https://github.com/root-project/root/pull/14686:236,safety,test,tested,236,[tgraph] Add TGraph::SetOption; To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14686
https://github.com/root-project/root/pull/14686:266,safety,updat,updated,266,[tgraph] Add TGraph::SetOption; To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14686
https://github.com/root-project/root/pull/14686:266,security,updat,updated,266,[tgraph] Add TGraph::SetOption; To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14686
https://github.com/root-project/root/pull/14686:236,testability,test,tested,236,[tgraph] Add TGraph::SetOption; To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14686
https://github.com/root-project/root/pull/14687:300,availability,state,state,300,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:356,availability,state,state,356,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:440,deployability,updat,updated,440,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:300,integrability,state,state,300,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:356,integrability,state,state,356,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:265,modifiability,variab,variable,265,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:410,safety,test,tested,410,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:440,safety,updat,updated,440,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:440,security,updat,updated,440,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:410,testability,test,tested,410,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:29,usability,document,documentation,29,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:74,usability,document,documentation,74,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14687:160,usability,Document,Documentation,160,Improving TRandom::GetSeed() documentation; # This Pull request: Improves documentation of TRandom::GetSeed() methods in derived classes. ## Changes or fixes:. Documentation involving inconsistencies in `TRandom::GetSeed()` methods. In the derived classes the seed variable is used to store internal state of the generator not to keep track of the initial state with which it was invoked. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14580.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14687
https://github.com/root-project/root/pull/14688:12,deployability,Updat,UpdateStats,12,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/pull/14688:225,deployability,updat,updated,225,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/pull/14688:12,safety,Updat,UpdateStats,12,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/pull/14688:195,safety,test,tested,195,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/pull/14688:225,safety,updat,updated,225,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/pull/14688:12,security,Updat,UpdateStats,12,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/pull/14688:225,security,updat,updated,225,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/pull/14688:195,testability,test,tested,195,[Hist] Call UpdateStats() in TProfile::Add for negative coefficients; # This Pull request:. ## Changes or fixes:. Call ResetStats in TProfile::Add for negative coefficients. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #6365 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14688
https://github.com/root-project/root/issues/14689:955,availability,Operat,Operating,955,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:880,deployability,version,version,880,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:902,deployability,Instal,Installation,902,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:942,deployability,manag,manager,942,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:770,energy efficiency,Draw,Draw,770,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:942,energy efficiency,manag,manager,942,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:880,integrability,version,version,880,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:880,modifiability,version,version,880,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:934,modifiability,pac,package,934,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:282,performance,time,time,282,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:854,safety,test,test,854,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:942,safety,manag,manager,942,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:854,testability,test,test,854,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/issues/14689:995,testability,context,context,995,"Canvas is not displayed on secondary cell executions if `Print` method is used; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TCanvas is not displayed in Jupyter notebook on secondary cell executions **if `Print` method is used in the cell**. | **First time cell execution** | **Secondary cell executions (note the order execution number)**|. |-------------|--------------------. |![image](https://github.com/root-project/root/assets/44311461/1be434e1-f316-4045-8994-4c20138a1d09)|![image](https://github.com/root-project/root/assets/44311461/b7ea39c0-12b9-48df-ab34-af17c4a47491)|. See discussion here: https://github.com/root-project/root/issues/13631#issuecomment-1941706841. ### Reproducer. ```. c1 = ROOT.TCanvas(""c1"",""c1"",600,400). c1.Draw(). h1 = ROOT.TH1F(""h1"",""h1"",100,-10,10). h1.FillRandom(""gaus"",1000). c1.Print(""test.pdf""). ```. ### ROOT version. 6.30/02. ### Installation method. Arch linux package manager. ### Operating system. Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14689
https://github.com/root-project/root/pull/14690:10,deployability,Updat,Update,10,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:246,deployability,updat,updated,246,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:258,deployability,configurat,configuration,258,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:476,deployability,updat,updates,476,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:569,deployability,updat,updates,569,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:734,deployability,updat,updated,734,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:117,energy efficiency,current,current,117,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:46,integrability,schema,schema,46,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:177,integrability,schema,schema,177,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:258,integrability,configur,configuration,258,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:285,integrability,complian,compliant,285,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:435,integrability,complian,compliance,435,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:455,integrability,schema,schema,455,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:24,interoperability,format,format,24,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:133,interoperability,format,format,133,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:494,interoperability,format,format,494,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:593,interoperability,format,format,593,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:258,modifiability,configur,configuration,258,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:146,reliability,doe,does,146,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:10,safety,Updat,Update,10,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:34,safety,compl,comply,34,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:161,safety,compl,comply,161,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:246,safety,updat,updated,246,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:285,safety,compl,compliant,285,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:435,safety,compl,compliance,435,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:476,safety,updat,updates,476,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:569,safety,updat,updates,569,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:704,safety,test,tested,704,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:734,safety,updat,updated,734,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:10,security,Updat,Update,10,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:34,security,compl,comply,34,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:161,security,compl,comply,161,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:246,security,updat,updated,246,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:258,security,configur,configuration,258,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:285,security,compl,compliant,285,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:352,security,auth,authors,352,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:435,security,compl,compliance,435,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:476,security,updat,updates,476,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:569,security,updat,updates,569,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:734,security,updat,updated,734,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14690:704,testability,test,tested,704,"[skip-ci] Update .clang-format to comply with schema; # This Pull request:. ## Changes or fixes:. I noticed that the current `.clang-format` file does not fully comply with the schema (https://clang.llvm.org/docs/ClangFormatStyleOptions.html). I updated the configuration file so it's compliant (I made the choices based on what I thought the original authors wanted to achieve with the selected options). I am not sure if the lack of compliance with the schema is because of updates to `clang-format` or not. The changes in this PR should only affect style, but these updates may make `clang-format` behave differently than before (because previous options may have being ignored). ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14690
https://github.com/root-project/root/pull/14692:345,deployability,updat,updated,345,"fix: speed up `RDataFrame::Display`; # This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14692
https://github.com/root-project/root/pull/14692:256,performance,perform,performance,256,"fix: speed up `RDataFrame::Display`; # This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14692
https://github.com/root-project/root/pull/14692:315,safety,test,tested,315,"fix: speed up `RDataFrame::Display`; # This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14692
https://github.com/root-project/root/pull/14692:345,safety,updat,updated,345,"fix: speed up `RDataFrame::Display`; # This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14692
https://github.com/root-project/root/pull/14692:345,security,updat,updated,345,"fix: speed up `RDataFrame::Display`; # This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14692
https://github.com/root-project/root/pull/14692:315,testability,test,tested,315,"fix: speed up `RDataFrame::Display`; # This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14692
https://github.com/root-project/root/pull/14692:256,usability,perform,performance,256,"fix: speed up `RDataFrame::Display`; # This Pull request:. Do not use `cling::printValue` for printing the column elements of the arithmetic types. ## Changes or fixes:. This <strike>require a proper specialisation, however it already</strike> gives `x10` performance improvement on my laptop. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . fixes #14511. @vepadulano - FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14692
https://github.com/root-project/root/pull/14693:22,safety,test,test,22,[tree] Add regression test for `GetEntry` after `Refresh`; As reported by https://its.cern.ch/jira/browse/ROOT-4839. See also #14560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14693
https://github.com/root-project/root/pull/14693:11,testability,regress,regression,11,[tree] Add regression test for `GetEntry` after `Refresh`; As reported by https://its.cern.ch/jira/browse/ROOT-4839. See also #14560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14693
https://github.com/root-project/root/pull/14693:22,testability,test,test,22,[tree] Add regression test for `GetEntry` after `Refresh`; As reported by https://its.cern.ch/jira/browse/ROOT-4839. See also #14560.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14693
https://github.com/root-project/root/pull/14694:1,energy efficiency,core,core,1,[core] Prevent void return type from Map function; Closes https://github.com/root-project/root/issues/7872,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14694
https://github.com/root-project/root/pull/14694:7,safety,Prevent,Prevent,7,[core] Prevent void return type from Map function; Closes https://github.com/root-project/root/issues/7872,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14694
https://github.com/root-project/root/pull/14694:7,security,Preven,Prevent,7,[core] Prevent void return type from Map function; Closes https://github.com/root-project/root/issues/7872,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14694
https://github.com/root-project/root/pull/14694:51,usability,Close,Closes,51,[core] Prevent void return type from Map function; Closes https://github.com/root-project/root/issues/7872,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14694
https://github.com/root-project/root/pull/14695:378,availability,sli,slightly,378,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1365,availability,avail,available,1365,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1567,availability,sla,slab,1567,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1667,availability,avail,available,1667,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:176,deployability,depend,dependent,176,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:483,deployability,stack,stackoverflow,483,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:773,deployability,manag,managed,773,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:773,energy efficiency,manag,managed,773,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1206,energy efficiency,current,current,1206,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:176,integrability,depend,dependent,176,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:283,integrability,buffer,buffer,283,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:408,integrability,buffer,buffer,408,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:700,integrability,buffer,buffer,700,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:737,integrability,Buffer,Buffers,737,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:951,integrability,buffer,buffersMem,951,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1446,integrability,buffer,buffer,1446,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:305,interoperability,share,shared,305,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:424,interoperability,share,shared,424,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1485,interoperability,share,shared,1485,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1649,interoperability,share,shared,1649,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:176,modifiability,depend,dependent,176,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:212,performance,memor,memory,212,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:251,performance,memor,memory,251,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:292,performance,cach,cached,292,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:312,performance,memor,memory,312,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:352,performance,cach,cache,352,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:415,performance,cach,cache,415,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:540,performance,memor,memory-utilisation-of-a-linux-server-using-sar-report,540,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:659,performance,memor,memory,659,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:694,performance,cach,cache,694,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:707,performance,memor,memory,707,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:727,performance,memor,memory,727,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:747,performance,Cach,Cached,747,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:754,performance,memor,memory,754,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:921,performance,cach,cachedMem,921,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1096,performance,memor,memory,1096,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1114,performance,cach,cached,1114,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1407,performance,cach,cached,1407,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1525,performance,cach,cached,1525,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1661,performance,cach,cache,1661,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:378,reliability,sli,slightly,378,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:933,reliability,sre,sreclaimableMem,933,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1365,reliability,availab,available,1365,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1567,reliability,sla,slab,1567,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1667,reliability,availab,available,1667,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:176,safety,depend,dependent,176,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:773,safety,manag,managed,773,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1365,safety,avail,available,1365,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1667,safety,avail,available,1667,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1978,safety,test,tested,1978,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:437,security,auth,author,437,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1365,security,availab,available,1365,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1667,security,availab,available,1667,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:176,testability,depend,dependent,176,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1978,testability,test,tested,1978,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:212,usability,memor,memory,212,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:251,usability,memor,memory,251,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:312,usability,memor,memory,312,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:540,usability,memor,memory-utilisation-of-a-linux-server-using-sar-report,540,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:659,usability,memor,memory,659,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:707,usability,memor,memory,707,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:727,usability,memor,memory,727,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:754,usability,memor,memory,754,"[TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14695:1096,usability,memor,memory,1096,"TUnix] RAM stats (gSystem->GetMemInfo) to htop/procps style; @vepadulano @dpiparo . This PR fixes. - https://github.com/root-project/root/issues/7196. This issue is very case-dependent. When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:. `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree. - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```. const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;. host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;. ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. This PR implements the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```. Int_t fMemAvailable; // available RAM in MB. Int_t fMemCached; // cached RAM in MB. Int_t fMemBuffer; // buffer RAM in MB. Int_t fMemShared; // shared RAM in MB. Int_t fSwapCached; // cached swap in MB. Int_t fSReclaimable // slab that might be reclaimed. ```. Results:. ```. ➜ ROOT free -h. total used free shared buff/cache available. Mem: 23Gi 3.4Gi 7.4Gi 214Mi 12Gi 19Gi. Swap: 7.6Gi 2.1Gi 5.5Gi. ```. ```. ➜ ROOT root -l. root [0] MemInfo_t memInfo; gSystem->GetMemInfo(&memInfo);. root [1] cout << memInfo.fMemTotal << "" "" << memInfo.fMemUsed << "" "" << memInfo.fMemFree << endl;. 23877 2786 7562. root [2] . ```. Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14695
https://github.com/root-project/root/pull/14696:45,usability,document,documentation,45,[skip-ci] add clarification to TH1::Chi2Test documentation; This PR fixes #12290 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14696
https://github.com/root-project/root/issues/14697:22,availability,failur,failure,22,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:145,availability,error,errors,145,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:685,availability,Operat,Operating,685,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:16,deployability,build,build,16,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:22,deployability,fail,failure,22,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:112,deployability,fail,fails,112,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:121,deployability,build,build,121,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:274,deployability,patch,patching,274,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:295,deployability,patch,patching,295,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:462,deployability,build,build,462,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:477,deployability,continu,continue,477,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:533,deployability,build,build,533,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:566,deployability,patch,patch,566,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:602,deployability,build,build,602,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:624,deployability,version,version,624,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:652,deployability,Instal,Installation,652,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:716,deployability,RELEAS,RELEASE,716,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:624,integrability,version,version,624,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:624,modifiability,version,version,624,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:22,performance,failur,failure,22,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:145,performance,error,errors,145,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:22,reliability,fail,failure,22,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:112,reliability,fail,fails,112,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:243,reliability,doe,does,243,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:145,safety,error,errors,145,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:274,safety,patch,patching,274,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:295,safety,patch,patching,295,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:566,safety,patch,patch,566,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:274,security,patch,patching,274,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:295,security,patch,patching,295,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:566,security,patch,patch,566,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:740,testability,context,context,740,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:145,usability,error,errors,145,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/issues/14697:190,usability,tool,tooling,190,"[FreeBSD] davix build failure; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. davix fails to build with (so far) two errors related to differences in GNU and BSD tooling:. `sed -i` requires an argument in BSD land, does not in GNU (that requires patching an internal patching script). `make -j` also needs an argument on BSDs (not sure yet what the proper way to fix it is, probably an explicit `BUILD_COMMAND ""make""` would fix it as build seems to continue just fine after manually issuing `make` in the build directory). I'll propose a patch soon. ### Reproducer. cmake --build . -j4. ### ROOT version. recent master. ### Installation method. source. ### Operating system. FreeBSD 14.0-RELEASE. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14697
https://github.com/root-project/root/pull/14698:225,deployability,version,versions,225,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:329,deployability,automat,automatically,329,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:459,deployability,version,version,459,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:612,deployability,updat,updated,612,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:225,integrability,version,versions,225,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:343,integrability,transform,transform,343,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:459,integrability,version,version,459,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:208,interoperability,standard,standard,208,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:343,interoperability,transform,transform,343,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:225,modifiability,version,versions,225,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:459,modifiability,version,version,459,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:581,safety,test,tested,581,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:612,safety,updat,updated,612,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:394,security,token,token,394,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:612,security,updat,updated,612,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:329,testability,automat,automatically,329,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:581,testability,test,tested,581,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:13,usability,support,support,13,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14698:76,usability,support,support,76,"[VecOps] Add support PascalCase name math funcs; # This Pull request:. Adds support for VecOps mathematical functions with PascalCase naming. This is to better distinguish the math functions of RVec from the standard library versions, and it aligns with the naming of the functions in TMath. Unfortunately, it is not possible to automatically transform the first letter of a preprocessor macro token to uppercase, so we have to manually define the PascalCase version of the names. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7697. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14698
https://github.com/root-project/root/pull/14699:45,deployability,Unload,Unload,45,[core][aclic] Improve CleanCompiledMacros(); Unload the library before deleting it (might be needed on Windows). Delete also the associated files generated with CompileMacro(). Fixes https://github.com/root-project/root/issues/10395.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14699
https://github.com/root-project/root/pull/14699:1,energy efficiency,core,core,1,[core][aclic] Improve CleanCompiledMacros(); Unload the library before deleting it (might be needed on Windows). Delete also the associated files generated with CompileMacro(). Fixes https://github.com/root-project/root/issues/10395.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14699
https://github.com/root-project/root/pull/14700:172,deployability,updat,updated,172,[Core] Allow for whitespace between quotes and outer braces; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes . Removes additional whitespace between quotes and braces. @pcanal .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14700
https://github.com/root-project/root/pull/14700:1,energy efficiency,Core,Core,1,[Core] Allow for whitespace between quotes and outer braces; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes . Removes additional whitespace between quotes and braces. @pcanal .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14700
https://github.com/root-project/root/pull/14700:140,safety,test,tested,140,[Core] Allow for whitespace between quotes and outer braces; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes . Removes additional whitespace between quotes and braces. @pcanal .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14700
https://github.com/root-project/root/pull/14700:172,safety,updat,updated,172,[Core] Allow for whitespace between quotes and outer braces; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes . Removes additional whitespace between quotes and braces. @pcanal .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14700
https://github.com/root-project/root/pull/14700:172,security,updat,updated,172,[Core] Allow for whitespace between quotes and outer braces; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes . Removes additional whitespace between quotes and braces. @pcanal .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14700
https://github.com/root-project/root/pull/14700:140,testability,test,tested,140,[Core] Allow for whitespace between quotes and outer braces; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes . Removes additional whitespace between quotes and braces. @pcanal .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14700
https://github.com/root-project/root/pull/14702:194,deployability,Updat,Updates,194,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:283,deployability,updat,updated,283,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:194,safety,Updat,Updates,194,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:253,safety,test,tested,253,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:283,safety,updat,updated,283,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:194,security,Updat,Updates,194,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:283,security,updat,updated,283,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:253,testability,test,tested,253,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14702:202,usability,document,documentation,202,"Removed skipping of 0 (zero) in TRandom3.Rndm(); # This Pull request: Removes skipping of 0 (zero) in TRandom3.Rndm(). ## Changes or fixes:. * Removes skipping of 0 (zero) in TRandom3.Rndm(). * Updates documentation, adds warnings. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14702
https://github.com/root-project/root/pull/14703:16,deployability,patch,patch,16,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:26,deployability,version,versioned,26,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:113,deployability,build,build,113,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:209,deployability,patch,patch,209,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:398,deployability,modul,module,398,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:359,energy efficiency,reduc,reduces,359,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:26,integrability,version,versioned,26,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:26,modifiability,version,versioned,26,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:324,modifiability,variab,variables,324,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:398,modifiability,modul,module,398,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:367,performance,overhead,overhead,367,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:16,safety,patch,patch,16,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:209,safety,patch,patch,209,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:297,safety,avoid,avoids,297,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:398,safety,modul,module,398,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:16,security,patch,patch,16,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:209,security,patch,patch,209,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:177,usability,support,supported,177,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:237,usability,help,helps,237,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14703:256,usability,close,closer,256,"[PyROOT] Revert patch for versioned PyROOT libraries; First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14703
https://github.com/root-project/root/pull/14704:256,deployability,releas,released,256,"[ntuple] add RFieldBase::CreateObject(); A templated factory method for the field's type. Returns a unique_ptr<T>. If called with void, returns a unique pointer with a deleter that complains when called. The `unique_ptr<void>` is supposed to be explicitly released (ownership transfer). @Nowakus FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14704
https://github.com/root-project/root/pull/14704:181,safety,compl,complains,181,"[ntuple] add RFieldBase::CreateObject(); A templated factory method for the field's type. Returns a unique_ptr<T>. If called with void, returns a unique pointer with a deleter that complains when called. The `unique_ptr<void>` is supposed to be explicitly released (ownership transfer). @Nowakus FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14704
https://github.com/root-project/root/pull/14704:181,security,compl,complains,181,"[ntuple] add RFieldBase::CreateObject(); A templated factory method for the field's type. Returns a unique_ptr<T>. If called with void, returns a unique pointer with a deleter that complains when called. The `unique_ptr<void>` is supposed to be explicitly released (ownership transfer). @Nowakus FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14704
https://github.com/root-project/root/pull/14705:98,deployability,manag,managed,98,[ntuple] add REntry::EmplaceNewValue(); Makes it easy to have an entry whose values are partially managed by RNTuple and partially be the application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14705
https://github.com/root-project/root/pull/14705:98,energy efficiency,manag,managed,98,[ntuple] add REntry::EmplaceNewValue(); Makes it easy to have an entry whose values are partially managed by RNTuple and partially be the application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14705
https://github.com/root-project/root/pull/14705:98,safety,manag,managed,98,[ntuple] add REntry::EmplaceNewValue(); Makes it easy to have an entry whose values are partially managed by RNTuple and partially be the application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14705
https://github.com/root-project/root/pull/14706:585,deployability,version,version,585,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:645,deployability,manag,manage,645,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:645,energy efficiency,manag,manage,645,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:585,integrability,version,version,585,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:585,modifiability,version,version,585,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:108,performance,cach,caching,108,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:205,performance,cach,cached,205,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:351,performance,cach,cached,351,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:55,safety,test,tests,55,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:645,safety,manag,manage,645,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:766,safety,review,review,766,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:55,testability,test,tests,55,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14706:766,testability,review,review,766,"[PyROOT] Relax overly pedantic `getattr` pythonization tests; The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14706
https://github.com/root-project/root/pull/14707:157,deployability,updat,updated,157,[cling] Implement value printing for `std::filesystem::path`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9672 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14707
https://github.com/root-project/root/pull/14707:127,safety,test,tested,127,[cling] Implement value printing for `std::filesystem::path`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9672 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14707
https://github.com/root-project/root/pull/14707:157,safety,updat,updated,157,[cling] Implement value printing for `std::filesystem::path`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9672 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14707
https://github.com/root-project/root/pull/14707:157,security,updat,updated,157,[cling] Implement value printing for `std::filesystem::path`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9672 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14707
https://github.com/root-project/root/pull/14707:127,testability,test,tested,127,[cling] Implement value printing for `std::filesystem::path`; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #9672 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14707
https://github.com/root-project/root/issues/14708:128,deployability,configurat,configuration,128,"GitHub Actions stuck on mac12 and mac13; Recently there are some stuck jobs on the new `mac12` and `mac13` nodes during `cmake` configuration that time out after 6 hours. From a quick survey among affected developers and confirmed in one case on the node, they are blocking on trying to clone a forked `roottest` which doesn't exist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14708
https://github.com/root-project/root/issues/14708:128,integrability,configur,configuration,128,"GitHub Actions stuck on mac12 and mac13; Recently there are some stuck jobs on the new `mac12` and `mac13` nodes during `cmake` configuration that time out after 6 hours. From a quick survey among affected developers and confirmed in one case on the node, they are blocking on trying to clone a forked `roottest` which doesn't exist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14708
https://github.com/root-project/root/issues/14708:128,modifiability,configur,configuration,128,"GitHub Actions stuck on mac12 and mac13; Recently there are some stuck jobs on the new `mac12` and `mac13` nodes during `cmake` configuration that time out after 6 hours. From a quick survey among affected developers and confirmed in one case on the node, they are blocking on trying to clone a forked `roottest` which doesn't exist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14708
https://github.com/root-project/root/issues/14708:147,performance,time,time,147,"GitHub Actions stuck on mac12 and mac13; Recently there are some stuck jobs on the new `mac12` and `mac13` nodes during `cmake` configuration that time out after 6 hours. From a quick survey among affected developers and confirmed in one case on the node, they are blocking on trying to clone a forked `roottest` which doesn't exist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14708
https://github.com/root-project/root/issues/14708:319,reliability,doe,doesn,319,"GitHub Actions stuck on mac12 and mac13; Recently there are some stuck jobs on the new `mac12` and `mac13` nodes during `cmake` configuration that time out after 6 hours. From a quick survey among affected developers and confirmed in one case on the node, they are blocking on trying to clone a forked `roottest` which doesn't exist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14708
https://github.com/root-project/root/issues/14708:128,security,configur,configuration,128,"GitHub Actions stuck on mac12 and mac13; Recently there are some stuck jobs on the new `mac12` and `mac13` nodes during `cmake` configuration that time out after 6 hours. From a quick survey among affected developers and confirmed in one case on the node, they are blocking on trying to clone a forked `roottest` which doesn't exist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14708
https://github.com/root-project/root/issues/14708:221,usability,confirm,confirmed,221,"GitHub Actions stuck on mac12 and mac13; Recently there are some stuck jobs on the new `mac12` and `mac13` nodes during `cmake` configuration that time out after 6 hours. From a quick survey among affected developers and confirmed in one case on the node, they are blocking on trying to clone a forked `roottest` which doesn't exist.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14708
https://github.com/root-project/root/pull/14709:56,usability,Close,Closes,56,"[ntuple] RColumn: Distinguish ConnectPage{Sink,Source}; Closes #12959",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14709
https://github.com/root-project/root/issues/14710:713,availability,Operat,Operating,713,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:295,deployability,build,builds,295,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:302,deployability,fail,fails,302,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:641,deployability,version,version,641,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:669,deployability,Instal,Installation,669,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:690,deployability,Build,Build,690,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:641,integrability,version,version,641,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:355,interoperability,bind,bindings,355,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:355,modifiability,bind,bindings,355,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:641,modifiability,version,version,641,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:302,reliability,fail,fails,302,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:178,safety,test,test,178,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:199,safety,test,tests,199,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:331,safety,test,test,331,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:386,safety,test,test,386,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:491,safety,test,test,491,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:546,safety,test,test,546,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:232,security,expos,exposed,232,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:178,testability,test,test,178,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:199,testability,test,tests,199,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:331,testability,test,test,331,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:386,testability,test,test,386,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:491,testability,test,test,491,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:546,testability,test,test,546,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/issues/14710:755,testability,context,context,755,`std::set` not working in Windows PyROOT; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. During https://github.com/root-project/root/pull/14669 a new test was added which tests `std::set` in PyROOT. This exposed an issue where creating a set in PyROOT on the windows builds fails. A conditional windows test skip was added in `bindings/pyroot/pythonizations/test/CMakeLists.txt` to fix this (where the `stl_set.py` is added). Whenever this issue is resolved this test skip should also be removed. - [ ] Remove windows test skip for `stl_set.py`. ### Reproducer. `s = ROOT.std.set['int']()` (in windows). ### ROOT version. 6.31/01 (dev). ### Installation method. Build from source. ### Operating system. Windows. ### Additional context. _No response_,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14710
https://github.com/root-project/root/pull/14711:36,integrability,sub,subsets,36,"[tree] Further clarify how to clone subsets of branches; This PR fixes #14550. I've opted for now to just clarify the documentation, mostly because I'm not sure to what extent we can and want to change the TTree interface at this point.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14711
https://github.com/root-project/root/pull/14711:212,integrability,interfac,interface,212,"[tree] Further clarify how to clone subsets of branches; This PR fixes #14550. I've opted for now to just clarify the documentation, mostly because I'm not sure to what extent we can and want to change the TTree interface at this point.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14711
https://github.com/root-project/root/pull/14711:212,interoperability,interfac,interface,212,"[tree] Further clarify how to clone subsets of branches; This PR fixes #14550. I've opted for now to just clarify the documentation, mostly because I'm not sure to what extent we can and want to change the TTree interface at this point.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14711
https://github.com/root-project/root/pull/14711:169,modifiability,exten,extent,169,"[tree] Further clarify how to clone subsets of branches; This PR fixes #14550. I've opted for now to just clarify the documentation, mostly because I'm not sure to what extent we can and want to change the TTree interface at this point.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14711
https://github.com/root-project/root/pull/14711:212,modifiability,interfac,interface,212,"[tree] Further clarify how to clone subsets of branches; This PR fixes #14550. I've opted for now to just clarify the documentation, mostly because I'm not sure to what extent we can and want to change the TTree interface at this point.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14711
https://github.com/root-project/root/pull/14711:118,usability,document,documentation,118,"[tree] Further clarify how to clone subsets of branches; This PR fixes #14550. I've opted for now to just clarify the documentation, mostly because I'm not sure to what extent we can and want to change the TTree interface at this point.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14711
https://github.com/root-project/root/pull/14712:233,energy efficiency,profil,profile,233,[hist] Better handle axes with labels when projecting; * Protect the axes with labels from being extended by `FindBin` when filling the histogram projected from TH2 and TH3. * Transfer the axes' attributes and labels when creating a profile from TH2 and TH3. This PR resolves #6658 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14712
https://github.com/root-project/root/pull/14712:97,modifiability,exten,extended,97,[hist] Better handle axes with labels when projecting; * Protect the axes with labels from being extended by `FindBin` when filling the histogram projected from TH2 and TH3. * Transfer the axes' attributes and labels when creating a profile from TH2 and TH3. This PR resolves #6658 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14712
https://github.com/root-project/root/pull/14712:233,performance,profil,profile,233,[hist] Better handle axes with labels when projecting; * Protect the axes with labels from being extended by `FindBin` when filling the histogram projected from TH2 and TH3. * Transfer the axes' attributes and labels when creating a profile from TH2 and TH3. This PR resolves #6658 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14712
https://github.com/root-project/root/pull/14713:184,deployability,updat,updated,184,"[hist] Add SaveAs method to TH1; # This Pull request:. ## Changes or fixes:. Add SaveAs method to TH1, saving to .csv, .tsv or .txt. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10474 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14713
https://github.com/root-project/root/pull/14713:154,safety,test,tested,154,"[hist] Add SaveAs method to TH1; # This Pull request:. ## Changes or fixes:. Add SaveAs method to TH1, saving to .csv, .tsv or .txt. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10474 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14713
https://github.com/root-project/root/pull/14713:184,safety,updat,updated,184,"[hist] Add SaveAs method to TH1; # This Pull request:. ## Changes or fixes:. Add SaveAs method to TH1, saving to .csv, .tsv or .txt. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10474 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14713
https://github.com/root-project/root/pull/14713:184,security,updat,updated,184,"[hist] Add SaveAs method to TH1; # This Pull request:. ## Changes or fixes:. Add SaveAs method to TH1, saving to .csv, .tsv or .txt. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10474 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14713
https://github.com/root-project/root/pull/14713:154,testability,test,tested,154,"[hist] Add SaveAs method to TH1; # This Pull request:. ## Changes or fixes:. Add SaveAs method to TH1, saving to .csv, .tsv or .txt. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10474 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14713
https://github.com/root-project/root/pull/14714:22,usability,document,documentation,22,"[root{cp,mv}] Improve documentation of compression settings; Fixes https://github.com/root-project/root/issues/6349.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14714
https://github.com/root-project/root/issues/14715:314,availability,Operat,Operating,314,"Remove unnecessary `R__LOAD_LIBRARY` from tutorials; ### Explain what you would like to see improved and how. This is a follow-up of #14684. There are more occurences of `R__LOAD_LIBRARY` outside of the RNTuple tutorials, so we should remove those as well. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14715
https://github.com/root-project/root/issues/14715:266,deployability,version,version,266,"Remove unnecessary `R__LOAD_LIBRARY` from tutorials; ### Explain what you would like to see improved and how. This is a follow-up of #14684. There are more occurences of `R__LOAD_LIBRARY` outside of the RNTuple tutorials, so we should remove those as well. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14715
https://github.com/root-project/root/issues/14715:284,deployability,Instal,Installation,284,"Remove unnecessary `R__LOAD_LIBRARY` from tutorials; ### Explain what you would like to see improved and how. This is a follow-up of #14684. There are more occurences of `R__LOAD_LIBRARY` outside of the RNTuple tutorials, so we should remove those as well. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14715
https://github.com/root-project/root/issues/14715:266,integrability,version,version,266,"Remove unnecessary `R__LOAD_LIBRARY` from tutorials; ### Explain what you would like to see improved and how. This is a follow-up of #14684. There are more occurences of `R__LOAD_LIBRARY` outside of the RNTuple tutorials, so we should remove those as well. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14715
https://github.com/root-project/root/issues/14715:266,modifiability,version,version,266,"Remove unnecessary `R__LOAD_LIBRARY` from tutorials; ### Explain what you would like to see improved and how. This is a follow-up of #14684. There are more occurences of `R__LOAD_LIBRARY` outside of the RNTuple tutorials, so we should remove those as well. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14715
https://github.com/root-project/root/issues/14715:352,testability,context,context,352,"Remove unnecessary `R__LOAD_LIBRARY` from tutorials; ### Explain what you would like to see improved and how. This is a follow-up of #14684. There are more occurences of `R__LOAD_LIBRARY` outside of the RNTuple tutorials, so we should remove those as well. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14715
https://github.com/root-project/root/pull/14716:162,deployability,updat,updated,162,Allow for whitespace between last brace and quote; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes #14462 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14716
https://github.com/root-project/root/pull/14716:130,safety,test,tested,130,Allow for whitespace between last brace and quote; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes #14462 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14716
https://github.com/root-project/root/pull/14716:162,safety,updat,updated,162,Allow for whitespace between last brace and quote; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes #14462 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14716
https://github.com/root-project/root/pull/14716:162,security,updat,updated,162,Allow for whitespace between last brace and quote; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes #14462 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14716
https://github.com/root-project/root/pull/14716:130,testability,test,tested,130,Allow for whitespace between last brace and quote; # This Pull request:. ## Changes or fixes:. Fixes #14462. ## Checklist:. - [x] tested changes locally. - [n/a] updated the docs (if necessary). This PR fixes #14462 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14716
https://github.com/root-project/root/pull/14717:23,deployability,automat,automatically,23,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:148,deployability,api,api,148,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:558,deployability,updat,updated,558,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:645,deployability,fail,failing,645,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:895,deployability,stack,stack,895,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:1698,deployability,updat,updated,1698,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:343,energy efficiency,draw,draw,343,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:635,energy efficiency,current,currently,635,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:148,integrability,api,api,148,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:836,integrability,transform,transformation,836,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:148,interoperability,api,api,148,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:595,interoperability,convers,conversion,595,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:836,interoperability,transform,transformation,836,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:819,performance,overhead,overhead,819,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:270,reliability,pra,practically,270,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:645,reliability,fail,failing,645,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:558,safety,updat,updated,558,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:574,safety,test,tests,574,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:1668,safety,test,tested,1668,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:1698,safety,updat,updated,1698,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:558,security,updat,updated,558,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:1698,security,updat,updated,1698,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:23,testability,automat,automatically,23,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:574,testability,test,tests,574,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:1668,testability,test,tested,1668,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:418,usability,clear,clear,418,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:684,usability,confirm,confirmation,684,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:995,usability,user,user,995,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14717:1507,usability,user,user,1507,"[PyROOT][DF] `AsNumpy` automatically converts to numpy arrays; # This Pull request:. ## Changes or fixes:. Calling `AsNumpy` on a dataframe (python api) now read `RVec` entries and `std::vector` as `numpy.ndarray` of the corresponding type. The implementation should be practically free besides some type checking. It's not inmediate where to draw the line between what to convert into a `numpy.ndarray`. An `RVec` is clear but I also chose to convert `std::vector`, but not things such as `std::array`. Maybe `std::vector` shouldn't be converted. I haven't updated all the tests related to the conversion of `std::vector` so they are currently failing (I would like to have official confirmation). We could also return a 2D (or N-D) regular array in the case the data is regular. This can be checked also without much overhead and the transformation into a regular array can be done via `numpy.stack`. From the offline discussions we decided that we would leave this final optional step to the user. There are some consequences of these changes: for instance when dealing with string data, if we have a vector of strings of different length, it won't be converted into a numpy array. We could optionaly check for this and return a numpy array of objects. (there is a deprecation warning when you try to make an array from jagged data). In the case where all strings are the same length, the output of `np.asarray` is to convert them into multidimensional arrays of chars, which may not agree with what the user is expecting. Perhaps we could handle the `std::string` case separately but in this case what other cases should we handle separately? ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/7685.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14717
https://github.com/root-project/root/pull/14718:150,deployability,updat,updated,150,WIP - [TExecutor] Usability of TExecutor::MapReduce; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary). This PR fixes # . #7871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14718
https://github.com/root-project/root/pull/14718:119,safety,test,tested,119,WIP - [TExecutor] Usability of TExecutor::MapReduce; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary). This PR fixes # . #7871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14718
https://github.com/root-project/root/pull/14718:150,safety,updat,updated,150,WIP - [TExecutor] Usability of TExecutor::MapReduce; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary). This PR fixes # . #7871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14718
https://github.com/root-project/root/pull/14718:150,security,updat,updated,150,WIP - [TExecutor] Usability of TExecutor::MapReduce; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary). This PR fixes # . #7871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14718
https://github.com/root-project/root/pull/14718:119,testability,test,tested,119,WIP - [TExecutor] Usability of TExecutor::MapReduce; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary). This PR fixes # . #7871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14718
https://github.com/root-project/root/pull/14718:18,usability,Usab,Usability,18,WIP - [TExecutor] Usability of TExecutor::MapReduce; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ x] updated the docs (if necessary). This PR fixes # . #7871.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14718
https://github.com/root-project/root/pull/14719:21,performance,memor,memory,21,[TMVA] TSpline2: fix memory issues; * Avoids deleting non-owned pointer in destructor. * In a case where the graph does not have enough points for interpolation graph values are returned directly and a warning is emitted; this avoids heap overflow when trying to address graph points outside of the point array range. This PR resolves #8021 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14719
https://github.com/root-project/root/pull/14719:115,reliability,doe,does,115,[TMVA] TSpline2: fix memory issues; * Avoids deleting non-owned pointer in destructor. * In a case where the graph does not have enough points for interpolation graph values are returned directly and a warning is emitted; this avoids heap overflow when trying to address graph points outside of the point array range. This PR resolves #8021 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14719
https://github.com/root-project/root/pull/14719:38,safety,Avoid,Avoids,38,[TMVA] TSpline2: fix memory issues; * Avoids deleting non-owned pointer in destructor. * In a case where the graph does not have enough points for interpolation graph values are returned directly and a warning is emitted; this avoids heap overflow when trying to address graph points outside of the point array range. This PR resolves #8021 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14719
https://github.com/root-project/root/pull/14719:227,safety,avoid,avoids,227,[TMVA] TSpline2: fix memory issues; * Avoids deleting non-owned pointer in destructor. * In a case where the graph does not have enough points for interpolation graph values are returned directly and a warning is emitted; this avoids heap overflow when trying to address graph points outside of the point array range. This PR resolves #8021 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14719
https://github.com/root-project/root/pull/14719:21,usability,memor,memory,21,[TMVA] TSpline2: fix memory issues; * Avoids deleting non-owned pointer in destructor. * In a case where the graph does not have enough points for interpolation graph values are returned directly and a warning is emitted; this avoids heap overflow when trying to address graph points outside of the point array range. This PR resolves #8021 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14719
https://github.com/root-project/root/pull/14720:182,deployability,build,builds,182,"[DF,io,eve7,math,rcanvas] Remove `R__LOAD_LIBRARY` call from tutorials; This PR is a follow-up from #14570 and fixes #14715. It turns out that this is not required anymore, even for builds/platforms without runtime modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14720
https://github.com/root-project/root/pull/14720:215,deployability,modul,modules,215,"[DF,io,eve7,math,rcanvas] Remove `R__LOAD_LIBRARY` call from tutorials; This PR is a follow-up from #14570 and fixes #14715. It turns out that this is not required anymore, even for builds/platforms without runtime modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14720
https://github.com/root-project/root/pull/14720:189,interoperability,platform,platforms,189,"[DF,io,eve7,math,rcanvas] Remove `R__LOAD_LIBRARY` call from tutorials; This PR is a follow-up from #14570 and fixes #14715. It turns out that this is not required anymore, even for builds/platforms without runtime modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14720
https://github.com/root-project/root/pull/14720:215,modifiability,modul,modules,215,"[DF,io,eve7,math,rcanvas] Remove `R__LOAD_LIBRARY` call from tutorials; This PR is a follow-up from #14570 and fixes #14715. It turns out that this is not required anymore, even for builds/platforms without runtime modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14720
https://github.com/root-project/root/pull/14720:17,reliability,rca,rcanvas,17,"[DF,io,eve7,math,rcanvas] Remove `R__LOAD_LIBRARY` call from tutorials; This PR is a follow-up from #14570 and fixes #14715. It turns out that this is not required anymore, even for builds/platforms without runtime modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14720
https://github.com/root-project/root/pull/14720:215,safety,modul,modules,215,"[DF,io,eve7,math,rcanvas] Remove `R__LOAD_LIBRARY` call from tutorials; This PR is a follow-up from #14570 and fixes #14715. It turns out that this is not required anymore, even for builds/platforms without runtime modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14720
https://github.com/root-project/root/pull/14721:226,deployability,updat,updated,226,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:196,safety,test,tested,196,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:226,safety,updat,updated,226,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:226,security,updat,updated,226,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:196,testability,test,tested,196,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:15,usability,Document,Document,15,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:24,usability,prefer,preference,24,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:81,usability,Document,Documents,81,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:91,usability,prefer,preference,91,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14721:160,usability,Document,Documentation,160,"[doc][skip-ci] Document preference for std::regex, #14585; # This Pull request:. Documents preference for std::regex rather than TRegexp. ## Changes or fixes:. Documentation. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #14585.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14721
https://github.com/root-project/root/pull/14722:25,deployability,build,build,25,"[WIP][FreeBSD] fix davix build; # This Pull request:. is a proposal. - fixes the use of sed - the in place option requires a suffix argument as opposed to gnu sed where this is optional. - explicitly calls gmake for davix. This may or may not be the thing to do - the problem is cmake calls ""make -j --"" which again relies on a gnu make behaviour where the -j option does not require and argument. BSD make does. so either somehow a number needs to be supplied there or gmake gets called explicitly like in this PR. This PR fixes # . #14697 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14722
https://github.com/root-project/root/pull/14722:367,reliability,doe,does,367,"[WIP][FreeBSD] fix davix build; # This Pull request:. is a proposal. - fixes the use of sed - the in place option requires a suffix argument as opposed to gnu sed where this is optional. - explicitly calls gmake for davix. This may or may not be the thing to do - the problem is cmake calls ""make -j --"" which again relies on a gnu make behaviour where the -j option does not require and argument. BSD make does. so either somehow a number needs to be supplied there or gmake gets called explicitly like in this PR. This PR fixes # . #14697 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14722
https://github.com/root-project/root/pull/14722:407,reliability,doe,does,407,"[WIP][FreeBSD] fix davix build; # This Pull request:. is a proposal. - fixes the use of sed - the in place option requires a suffix argument as opposed to gnu sed where this is optional. - explicitly calls gmake for davix. This may or may not be the thing to do - the problem is cmake calls ""make -j --"" which again relies on a gnu make behaviour where the -j option does not require and argument. BSD make does. so either somehow a number needs to be supplied there or gmake gets called explicitly like in this PR. This PR fixes # . #14697 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14722
https://github.com/root-project/root/pull/14722:337,usability,behavi,behaviour,337,"[WIP][FreeBSD] fix davix build; # This Pull request:. is a proposal. - fixes the use of sed - the in place option requires a suffix argument as opposed to gnu sed where this is optional. - explicitly calls gmake for davix. This may or may not be the thing to do - the problem is cmake calls ""make -j --"" which again relies on a gnu make behaviour where the -j option does not require and argument. BSD make does. so either somehow a number needs to be supplied there or gmake gets called explicitly like in this PR. This PR fixes # . #14697 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14722
https://github.com/root-project/root/pull/14723:186,deployability,updat,updated,186,TEff doc - axis customisation; # This Pull request:. ## Changes or fixes:. Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10139 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14723
https://github.com/root-project/root/pull/14723:156,safety,test,tested,156,TEff doc - axis customisation; # This Pull request:. ## Changes or fixes:. Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10139 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14723
https://github.com/root-project/root/pull/14723:186,safety,updat,updated,186,TEff doc - axis customisation; # This Pull request:. ## Changes or fixes:. Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10139 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14723
https://github.com/root-project/root/pull/14723:186,security,updat,updated,186,TEff doc - axis customisation; # This Pull request:. ## Changes or fixes:. Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10139 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14723
https://github.com/root-project/root/pull/14723:156,testability,test,tested,156,TEff doc - axis customisation; # This Pull request:. ## Changes or fixes:. Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10139 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14723
https://github.com/root-project/root/pull/14723:16,usability,custom,customisation,16,TEff doc - axis customisation; # This Pull request:. ## Changes or fixes:. Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10139 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14723
https://github.com/root-project/root/pull/14723:104,usability,custom,customisation,104,TEff doc - axis customisation; # This Pull request:. ## Changes or fixes:. Add text and example on axis customisation for TEfficiency. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes #10139 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14723
https://github.com/root-project/root/pull/14724:33,availability,error,error,33,[skip-ci][doc] TProfile: clarify error calculation formula; fixes #12592.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14724
https://github.com/root-project/root/pull/14724:33,performance,error,error,33,[skip-ci][doc] TProfile: clarify error calculation formula; fixes #12592.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14724
https://github.com/root-project/root/pull/14724:33,safety,error,error,33,[skip-ci][doc] TProfile: clarify error calculation formula; fixes #12592.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14724
https://github.com/root-project/root/pull/14724:33,usability,error,error,33,[skip-ci][doc] TProfile: clarify error calculation formula; fixes #12592.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14724
https://github.com/root-project/root/pull/14726:367,deployability,updat,updated,367,"[DF] fix SaveGraph display and Describe printout for unnamed TChain; # This Pull request:. ## Changes or fixes:. In `ROOT::RDF::SaveGraph`, write ""TChain"" in the output `.dot` if the `TChain` is unnamed, instead of a blank. In `ROOT::RDF::RInterfaceBase::Describe`, if the `TChain` is unnamed, do not write a blank. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#10928](https://github.com/root-project/root/issues/10928).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14726
https://github.com/root-project/root/pull/14726:337,safety,test,tested,337,"[DF] fix SaveGraph display and Describe printout for unnamed TChain; # This Pull request:. ## Changes or fixes:. In `ROOT::RDF::SaveGraph`, write ""TChain"" in the output `.dot` if the `TChain` is unnamed, instead of a blank. In `ROOT::RDF::RInterfaceBase::Describe`, if the `TChain` is unnamed, do not write a blank. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#10928](https://github.com/root-project/root/issues/10928).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14726
https://github.com/root-project/root/pull/14726:367,safety,updat,updated,367,"[DF] fix SaveGraph display and Describe printout for unnamed TChain; # This Pull request:. ## Changes or fixes:. In `ROOT::RDF::SaveGraph`, write ""TChain"" in the output `.dot` if the `TChain` is unnamed, instead of a blank. In `ROOT::RDF::RInterfaceBase::Describe`, if the `TChain` is unnamed, do not write a blank. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#10928](https://github.com/root-project/root/issues/10928).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14726
https://github.com/root-project/root/pull/14726:367,security,updat,updated,367,"[DF] fix SaveGraph display and Describe printout for unnamed TChain; # This Pull request:. ## Changes or fixes:. In `ROOT::RDF::SaveGraph`, write ""TChain"" in the output `.dot` if the `TChain` is unnamed, instead of a blank. In `ROOT::RDF::RInterfaceBase::Describe`, if the `TChain` is unnamed, do not write a blank. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#10928](https://github.com/root-project/root/issues/10928).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14726
https://github.com/root-project/root/pull/14726:337,testability,test,tested,337,"[DF] fix SaveGraph display and Describe printout for unnamed TChain; # This Pull request:. ## Changes or fixes:. In `ROOT::RDF::SaveGraph`, write ""TChain"" in the output `.dot` if the `TChain` is unnamed, instead of a blank. In `ROOT::RDF::RInterfaceBase::Describe`, if the `TChain` is unnamed, do not write a blank. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes [#10928](https://github.com/root-project/root/issues/10928).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14726
https://github.com/root-project/root/pull/14727:22,energy efficiency,model,model,22,"[ntuple] Allow inline model definition in RNTupleWriter::Recreate; Fixes https://github.com/root-project/root/issues/8711. It was suggested in the issue to enable something like:. ```cpp. auto ntuple = RNTupleWriter::Recreate({. RField<std::uint32_t>(""id""),. RField<std::vector<float>>(""vpx""),. RField<std::vector<float>>(""vpy""),. RField<std::vector<float>>(""vpz""). }, ""NTuple"", kNTupleFileName);. ```. However, `std::initializer_list` needs homogeneous types, so after discussion with @jblomer , I tried an approach with the list of the pairs of strings, i.e.:. ```cpp. auto writer = RNTupleWriter::Recreate({. {""std::uint32_t"", ""id""},. {""std::vector<float>"", ""vpx""},. {""std::vector<float>"", ""vpy""},. {""std::vector<float>"", ""vpz""},. }, ""NTuple"", fileGuard.GetPath());. ```. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14727
https://github.com/root-project/root/pull/14727:22,security,model,model,22,"[ntuple] Allow inline model definition in RNTupleWriter::Recreate; Fixes https://github.com/root-project/root/issues/8711. It was suggested in the issue to enable something like:. ```cpp. auto ntuple = RNTupleWriter::Recreate({. RField<std::uint32_t>(""id""),. RField<std::vector<float>>(""vpx""),. RField<std::vector<float>>(""vpy""),. RField<std::vector<float>>(""vpz""). }, ""NTuple"", kNTupleFileName);. ```. However, `std::initializer_list` needs homogeneous types, so after discussion with @jblomer , I tried an approach with the list of the pairs of strings, i.e.:. ```cpp. auto writer = RNTupleWriter::Recreate({. {""std::uint32_t"", ""id""},. {""std::vector<float>"", ""vpx""},. {""std::vector<float>"", ""vpy""},. {""std::vector<float>"", ""vpz""},. }, ""NTuple"", fileGuard.GetPath());. ```. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14727
https://github.com/root-project/root/pull/14728:342,deployability,API,API,342,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:272,energy efficiency,model,model,272,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:342,integrability,API,API,342,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:342,interoperability,API,API,342,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:359,interoperability,XML,XML,359,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:516,interoperability,standard,standard,516,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:705,interoperability,format,format,705,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:175,performance,I/O,I/O,175,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:442,performance,time,time,442,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:525,performance,I/O,I/O,525,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:641,performance,I/O,I/O,641,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:700,performance,disk,disk,700,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:617,reliability,doe,does,617,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:363,safety,input,input,363,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:272,security,model,model,272,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:9,usability,minim,minimal,9,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:17,usability,support,support,17,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:363,usability,input,input,363,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14728:596,usability,custom,custom,596,"[ntuple] minimal support for unsplit fields; Introduces a new RFieldBase descendant, `RUnsplitField`. This field uses an offset column and an `std::byte` column to store ROOT I/O streamed objects. To create unsplit fields one can. - directly add an `RUnsplitField` to the model . or. - set the `rntuple.split=false` class attribute (`TClass` API or selection XML input to genreflex). Note that the unsplit comment (`//||`) is ignored for the time being. The ""rntuple.split=true"" attribute can be used to use RNTuple standard I/O on classes that have `CanSplit() = false`. E.g. for classes with a custom streamer that does not impact RNTuple I/O. Adds a new field structure type, ""unsplit"", in the on-disk format. The streaming needs more work, e.g. to store the streamer information. We can also consider using a different comment marker.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14728
https://github.com/root-project/root/pull/14729:127,deployability,updat,updated,127,Fix issue 7740; # This Pull request:. ## Changes or fixes:. Tutorial added. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14729
https://github.com/root-project/root/pull/14729:97,safety,test,tested,97,Fix issue 7740; # This Pull request:. ## Changes or fixes:. Tutorial added. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14729
https://github.com/root-project/root/pull/14729:127,safety,updat,updated,127,Fix issue 7740; # This Pull request:. ## Changes or fixes:. Tutorial added. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14729
https://github.com/root-project/root/pull/14729:127,security,updat,updated,127,Fix issue 7740; # This Pull request:. ## Changes or fixes:. Tutorial added. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14729
https://github.com/root-project/root/pull/14729:97,testability,test,tested,97,Fix issue 7740; # This Pull request:. ## Changes or fixes:. Tutorial added. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14729
https://github.com/root-project/root/pull/14730:4,deployability,integr,integrator,4,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:172,deployability,integr,integrator,172,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:236,deployability,updat,updated,236,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:4,integrability,integr,integrator,4,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:172,integrability,integr,integrator,172,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:4,interoperability,integr,integrator,4,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:172,interoperability,integr,integrator,172,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:4,modifiability,integr,integrator,4,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:172,modifiability,integr,integrator,172,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:4,reliability,integr,integrator,4,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:172,reliability,integr,integrator,172,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:206,safety,test,tested,206,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:236,safety,updat,updated,236,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:4,security,integr,integrator,4,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:172,security,integr,integrator,172,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:236,security,updat,updated,236,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:4,testability,integr,integrator,4,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:172,testability,integr,integrator,172,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14730:206,testability,test,tested,206,Add integrator multi dim tutorial; Fixes https://github.com/root-project/root/issues/7740. # This Pull request:. ## Changes or fixes:. Add tutorial about multi dimensional integrator. ## Checklist:. - [x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # . https://github.com/root-project/root/issues/7740.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14730
https://github.com/root-project/root/pull/14731:9,energy efficiency,reduc,reduce,9,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:23,energy efficiency,alloc,allocations,23,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:332,energy efficiency,alloc,allocation,332,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:38,interoperability,Bind,BindRawPtr,38,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:63,interoperability,share,shared,63,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:99,interoperability,share,shared,99,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:161,interoperability,Bind,BindRawPtr,161,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:192,interoperability,share,shared,192,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:222,interoperability,share,shares,222,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:262,interoperability,share,shared,262,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:376,interoperability,Bind,BindRawPtr,376,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:38,modifiability,Bind,BindRawPtr,38,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:161,modifiability,Bind,BindRawPtr,161,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:376,modifiability,Bind,BindRawPtr,376,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:16,performance,memor,memory,16,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:325,performance,memor,memory,325,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:371,performance,time,time,371,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:317,safety,avoid,avoid,317,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:124,security,control,control,124,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:233,security,control,control,233,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:351,security,control,control,351,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:124,testability,control,control,124,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:233,testability,control,control,233,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:351,testability,control,control,351,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:16,usability,memor,memory,16,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14731:325,usability,memor,memory,325,"[ntuple] reduce memory allocations in BindRawPtr; Adds a dummy shared pointer to RValue: the dummy shared pointer holds the control block with a noop deleter if BindRawPtr is used. The object shared pointer, in this case, shares the control block with the dummy shared pointer (aliasing constructor). In this way, we avoid a memory allocation for the control block every time BindRawPtr is called. Also some minor improvements to the internals of REntry. @Dr15Jones FYI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14731
https://github.com/root-project/root/pull/14732:121,availability,operat,operator,121,[hist] Implement Copy for TH2Poly; Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes #13075.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14732
https://github.com/root-project/root/pull/14732:184,deployability,updat,updated,184,[hist] Implement Copy for TH2Poly; Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes #13075.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14732
https://github.com/root-project/root/pull/14732:153,safety,test,tested,153,[hist] Implement Copy for TH2Poly; Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes #13075.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14732
https://github.com/root-project/root/pull/14732:184,safety,updat,updated,184,[hist] Implement Copy for TH2Poly; Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes #13075.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14732
https://github.com/root-project/root/pull/14732:184,security,updat,updated,184,[hist] Implement Copy for TH2Poly; Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes #13075.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14732
https://github.com/root-project/root/pull/14732:153,testability,test,tested,153,[hist] Implement Copy for TH2Poly; Add TH2Poly::Copy function and implement also using Copy the copy ctor and assignment operator. ## Checklist:. - [ x] tested changes locally. - [x ] updated the docs (if necessary). This PR fixes #13075.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14732
https://github.com/root-project/root/pull/14733:247,deployability,updat,updated,247,[HS3] Fixes for stability & RooRealIntegral; # This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers. - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14733
https://github.com/root-project/root/pull/14733:123,interoperability,prox,proxy,123,[HS3] Fixes for stability & RooRealIntegral; # This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers. - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14733
https://github.com/root-project/root/pull/14733:16,reliability,stabil,stability,16,[HS3] Fixes for stability & RooRealIntegral; # This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers. - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14733
https://github.com/root-project/root/pull/14733:217,safety,test,tested,217,[HS3] Fixes for stability & RooRealIntegral; # This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers. - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14733
https://github.com/root-project/root/pull/14733:247,safety,updat,updated,247,[HS3] Fixes for stability & RooRealIntegral; # This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers. - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14733
https://github.com/root-project/root/pull/14733:247,security,updat,updated,247,[HS3] Fixes for stability & RooRealIntegral; # This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers. - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14733
https://github.com/root-project/root/pull/14733:217,testability,test,tested,217,[HS3] Fixes for stability & RooRealIntegral; # This Pull request:. - Adds protection when exporting workspaces with defuct proxy pointers. - Adds import and export facilities for RooRealIntegral. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14733
https://github.com/root-project/root/pull/14734:100,integrability,repositor,repository,100,Fix GitHub Actions stuck on mac12 and mac13; This ought to fix the mac12/13 hanging on checking the repository (that does not exist). FIx #14708,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14734
https://github.com/root-project/root/pull/14734:100,interoperability,repositor,repository,100,Fix GitHub Actions stuck on mac12 and mac13; This ought to fix the mac12/13 hanging on checking the repository (that does not exist). FIx #14708,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14734
https://github.com/root-project/root/pull/14734:117,reliability,doe,does,117,Fix GitHub Actions stuck on mac12 and mac13; This ought to fix the mac12/13 hanging on checking the repository (that does not exist). FIx #14708,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14734
https://github.com/root-project/root/pull/14735:203,deployability,updat,updated,203,[genvector] Add Dimension field; # This Pull request:. This PR implements requested changes in [ROOT-8384](https://its.cern.ch/jira/browse/ROOT-8384) . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14735
https://github.com/root-project/root/pull/14735:173,safety,test,tested,173,[genvector] Add Dimension field; # This Pull request:. This PR implements requested changes in [ROOT-8384](https://its.cern.ch/jira/browse/ROOT-8384) . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14735
https://github.com/root-project/root/pull/14735:203,safety,updat,updated,203,[genvector] Add Dimension field; # This Pull request:. This PR implements requested changes in [ROOT-8384](https://its.cern.ch/jira/browse/ROOT-8384) . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14735
https://github.com/root-project/root/pull/14735:203,security,updat,updated,203,[genvector] Add Dimension field; # This Pull request:. This PR implements requested changes in [ROOT-8384](https://its.cern.ch/jira/browse/ROOT-8384) . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14735
https://github.com/root-project/root/pull/14735:173,testability,test,tested,173,[genvector] Add Dimension field; # This Pull request:. This PR implements requested changes in [ROOT-8384](https://its.cern.ch/jira/browse/ROOT-8384) . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14735
https://github.com/root-project/root/pull/14736:323,deployability,updat,updated,323,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:25,safety,compl,complex,25,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:143,safety,compl,complex,143,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:229,safety,test,test,229,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:293,safety,test,tested,293,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:323,safety,updat,updated,323,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:9,security,Modif,Modify,9,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:25,security,compl,complex,25,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:143,security,compl,complex,143,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:323,security,updat,updated,323,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:229,testability,test,test,229,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14736:293,testability,test,tested,293,"[matrix] Modify Sort for complex conjugate pairs; # This Pull request:. Sorting of eigenvalues of real general matrices now takes into account complex conjugate pairs, considering first the eigenvalue with imaginary part >0. . A test has been added to check this feature. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes [ROOT-8919](https://its.cern.ch/jira/browse/ROOT-8919).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14736
https://github.com/root-project/root/pull/14737:256,availability,consist,consistent,256,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:99,deployability,configurat,configurations,99,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:99,integrability,configur,configurations,99,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:99,modifiability,configur,configurations,99,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:99,security,configur,configurations,99,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:115,testability,assert,assert,115,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:278,testability,assert,assertions,278,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:85,usability,minim,minimal,85,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14737:256,usability,consist,consistent,256,"[ntuple] Use `R__ASSERT` in `RArrayAsRVecField::GenerateColumnsImpl`; With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14737
https://github.com/root-project/root/pull/14738:187,deployability,fail,fail,187,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14738:187,reliability,fail,fail,187,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14738:7,safety,Compl,Completely,7,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14738:44,safety,Test,TestSofieModels,44,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14738:163,safety,test,test,163,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14738:7,security,Compl,Completely,7,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14738:44,testability,Test,TestSofieModels,44,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14738:163,testability,test,test,163,"[tmva] Completely relax float comparison in TestSofieModels; Follow up to https://github.com/root-project/root/pull/14535 , apply the same rule in the rest of the test since it may still fail as seen e.g. in this PR https://github.com/root-project/root/pull/14666",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14738
https://github.com/root-project/root/pull/14739:141,interoperability,convers,conversion,141,"[ntuple] Allow MakeField with a std::string; `NameWithDescription_t` takes a `std::string_view`, but the compiler only attempts one implicit conversion so `std::string` -> `std::string_view` and then to `NameWithDescription_t` doesn't work. Enabling this overload is particularly helpful for programmatically generated field names, as demonstrated by the `Limits_ManyFields` test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14739
https://github.com/root-project/root/pull/14739:227,reliability,doe,doesn,227,"[ntuple] Allow MakeField with a std::string; `NameWithDescription_t` takes a `std::string_view`, but the compiler only attempts one implicit conversion so `std::string` -> `std::string_view` and then to `NameWithDescription_t` doesn't work. Enabling this overload is particularly helpful for programmatically generated field names, as demonstrated by the `Limits_ManyFields` test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14739
https://github.com/root-project/root/pull/14739:375,safety,test,test,375,"[ntuple] Allow MakeField with a std::string; `NameWithDescription_t` takes a `std::string_view`, but the compiler only attempts one implicit conversion so `std::string` -> `std::string_view` and then to `NameWithDescription_t` doesn't work. Enabling this overload is particularly helpful for programmatically generated field names, as demonstrated by the `Limits_ManyFields` test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14739
https://github.com/root-project/root/pull/14739:375,testability,test,test,375,"[ntuple] Allow MakeField with a std::string; `NameWithDescription_t` takes a `std::string_view`, but the compiler only attempts one implicit conversion so `std::string` -> `std::string_view` and then to `NameWithDescription_t` doesn't work. Enabling this overload is particularly helpful for programmatically generated field names, as demonstrated by the `Limits_ManyFields` test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14739
https://github.com/root-project/root/pull/14739:280,usability,help,helpful,280,"[ntuple] Allow MakeField with a std::string; `NameWithDescription_t` takes a `std::string_view`, but the compiler only attempts one implicit conversion so `std::string` -> `std::string_view` and then to `NameWithDescription_t` doesn't work. Enabling this overload is particularly helpful for programmatically generated field names, as demonstrated by the `Limits_ManyFields` test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14739
https://github.com/root-project/root/pull/14740:164,availability,operat,operator,164,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:189,availability,operat,operator,189,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:546,availability,error,error,546,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:1021,availability,operat,operator,1021,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:604,energy efficiency,Adapt,Adaptive,604,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:1120,energy efficiency,Adapt,Adaptive,1120,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:604,integrability,Adapt,Adaptive,604,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:1120,integrability,Adapt,Adaptive,1120,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:604,interoperability,Adapt,Adaptive,604,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:1120,interoperability,Adapt,Adaptive,1120,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:604,modifiability,Adapt,Adaptive,604,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:1120,modifiability,Adapt,Adaptive,1120,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:546,performance,error,error,546,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:546,safety,error,error,546,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14740:546,usability,error,error,546,"[hist] Using TKDE::Fill works with empty tkde; This PR fixes. - https://github.com/root-project/root/issues/7808. This is happening because in when the parentheses operator overload `TKDE::operator()(Double_t x)` calls ReInit `(const_cast<TKDE*>(this))->ReInit()` it returns before setting the fKernel in the case of new data. One approach is to call SetKernel here:. ```cpp. if (fNewData) {. InitFromNewData();. SetKernel();. return;. }. ```. or call it at the end of InitFromNewData(). When that happens, the fKernel is no longer null but this error is reproducible with both iterative options -. With Adaptive we get **NaN** and Fixed we get **inf**. This is because the weight calculation is using the nSum that is 0 when binning is not used. Inversing that gives the infinity in the Iteration:Fixed case. This fix:. - adds the call to SetBinCountData() in InitFromNewData(). - recreates the kernel fun pointer (previously fKernel ends up a `nullptr`). - calculating nSum as fNEvents if not binning in TKDE::TKernel::operator(). Results:. ```cpp. auto kde = new TKDE(0, nullptr, 0, 5, ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", 1);. for (unsigned int i = 0; i < 100; i++) { kde->Fill(gRandom->Gaus(2,1)); }. std::cout<<kde->GetValue(2)<<""\n""; . ```. Gives . 0.487581.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14740
https://github.com/root-project/root/pull/14741:64,deployability,version,versions,64,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:186,deployability,updat,updated,186,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:332,deployability,version,version,332,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:64,integrability,version,versions,64,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:236,integrability,complian,compliant,236,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:272,integrability,schema,schema,272,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:332,integrability,version,version,332,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:20,interoperability,format,format,20,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:39,interoperability,compatib,compatibility,39,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:206,interoperability,format,format,206,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:350,interoperability,format,format,350,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:64,modifiability,version,versions,64,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:332,modifiability,version,version,332,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:186,safety,updat,updated,186,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:236,safety,compl,compliant,236,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:448,safety,test,tested,448,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:120,security,auth,authored,120,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:186,security,updat,updated,186,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:236,security,compl,compliant,236,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:5,testability,Simpl,Simplify,5,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:363,testability,simpl,simplify,363,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:448,testability,test,tested,448,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:5,usability,Simpl,Simplify,5,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:363,usability,simpl,simplify,363,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14741:393,usability,behavi,behaviour,393,[ci] Simplify clang-format options for compatibility with older versions; # This Pull request:. ## Changes or fixes:. I authored PR https://github.com/root-project/root/pull/14690 which updated some .clang-format options which were not compliant with the (atleast) latest schema. Some of these options appear not to work with older version of `clang-format` so I simplify them in this PR. the behaviour should remain the same. ## Checklist:. - [x] tested changes locally.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14741
https://github.com/root-project/root/pull/14742:14,energy efficiency,CPU,CPU,14,[RF] Make new CPU evaluation backend the default; Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14742
https://github.com/root-project/root/pull/14742:133,energy efficiency,green,green,133,[RF] Make new CPU evaluation backend the default; Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14742
https://github.com/root-project/root/pull/14742:14,performance,CPU,CPU,14,[RF] Make new CPU evaluation backend the default; Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14742
https://github.com/root-project/root/pull/14742:139,safety,test,tests,139,[RF] Make new CPU evaluation backend the default; Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14742
https://github.com/root-project/root/pull/14742:62,testability,plan,plan,62,[RF] Make new CPU evaluation backend the default; Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14742
https://github.com/root-project/root/pull/14742:139,testability,test,tests,139,[RF] Make new CPU evaluation backend the default; Part of the plan of work 2024. The first two commits are final bugfixes to get all-green tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14742
https://github.com/root-project/root/pull/14743:184,safety,Test,TestNonCentral,184,"[RF] Convert 4 RooStat tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Converts HybridStandardForm.C, HybridInstructional.C, TwoSidedFrequentistUpperLimitWithBands.C, TestNonCentral.C, and CreateExampleFile.C to Python. ## Checklist:. - [ x] tested changes locally. Contributes to https://github.com/root-project/root/issues/8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14743
https://github.com/root-project/root/pull/14743:259,safety,test,tested,259,"[RF] Convert 4 RooStat tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Converts HybridStandardForm.C, HybridInstructional.C, TwoSidedFrequentistUpperLimitWithBands.C, TestNonCentral.C, and CreateExampleFile.C to Python. ## Checklist:. - [ x] tested changes locally. Contributes to https://github.com/root-project/root/issues/8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14743
https://github.com/root-project/root/pull/14743:184,testability,Test,TestNonCentral,184,"[RF] Convert 4 RooStat tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Converts HybridStandardForm.C, HybridInstructional.C, TwoSidedFrequentistUpperLimitWithBands.C, TestNonCentral.C, and CreateExampleFile.C to Python. ## Checklist:. - [ x] tested changes locally. Contributes to https://github.com/root-project/root/issues/8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14743
https://github.com/root-project/root/pull/14743:259,testability,test,tested,259,"[RF] Convert 4 RooStat tutorials to PyROOT; # This Pull request:. ## Changes or fixes:. Converts HybridStandardForm.C, HybridInstructional.C, TwoSidedFrequentistUpperLimitWithBands.C, TestNonCentral.C, and CreateExampleFile.C to Python. ## Checklist:. - [ x] tested changes locally. Contributes to https://github.com/root-project/root/issues/8758.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14743
https://github.com/root-project/root/pull/14745:13,safety,Compl,Completely,13,[6.28][tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14745
https://github.com/root-project/root/pull/14745:50,safety,Test,TestSofieModels,50,[6.28][tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14745
https://github.com/root-project/root/pull/14745:13,security,Compl,Completely,13,[6.28][tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14745
https://github.com/root-project/root/pull/14745:50,testability,Test,TestSofieModels,50,[6.28][tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14745
https://github.com/root-project/root/pull/14746:14,safety,Compl,Completely,14,[6.30] [tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14746
https://github.com/root-project/root/pull/14746:51,safety,Test,TestSofieModels,51,[6.30] [tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14746
https://github.com/root-project/root/pull/14746:14,security,Compl,Completely,14,[6.30] [tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14746
https://github.com/root-project/root/pull/14746:51,testability,Test,TestSofieModels,51,[6.30] [tmva] Completely relax float comparison in TestSofieModels; Backport of https://github.com/root-project/root/pull/14738,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14746
https://github.com/root-project/root/pull/14747:326,deployability,updat,updated,326,"[core] Do not skip libCore when finding out to what library the class belongs; . # This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14747
https://github.com/root-project/root/pull/14747:1,energy efficiency,core,core,1,"[core] Do not skip libCore when finding out to what library the class belongs; . # This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14747
https://github.com/root-project/root/pull/14747:256,energy efficiency,core,core,256,"[core] Do not skip libCore when finding out to what library the class belongs; . # This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14747
https://github.com/root-project/root/pull/14747:296,safety,test,tested,296,"[core] Do not skip libCore when finding out to what library the class belongs; . # This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14747
https://github.com/root-project/root/pull/14747:326,safety,updat,updated,326,"[core] Do not skip libCore when finding out to what library the class belongs; . # This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14747
https://github.com/root-project/root/pull/14747:326,security,updat,updated,326,"[core] Do not skip libCore when finding out to what library the class belongs; . # This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14747
https://github.com/root-project/root/pull/14747:296,testability,test,tested,296,"[core] Do not skip libCore when finding out to what library the class belongs; . # This Pull request:. ## Changes or fixes:. Bug introduced in commit from 2019 Jun 2nd, where gInterpreter->GetClassSharedLibs() returns nullptr for any class inside the ROOT core base classes. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Fixes https://github.com/root-project/root/issues/11667.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14747
https://github.com/root-project/root/issues/14748:2564,availability,Operat,Operating,2564,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:182,deployability,contain,contains,182,"[ntuple] `Show` and `PrintInfo` does not work for friend RNTuples; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:. ```. no type name specified for Field ntpl1 (unchecked RResult access!). At:. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2516,deployability,version,version,2516,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2534,deployability,Instal,Installation,2534,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:1901,energy efficiency,model,model,1901,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:1945,energy efficiency,model,model,1945,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2026,energy efficiency,model,model,2026,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2101,energy efficiency,model,model,2101,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2145,energy efficiency,model,model,2145,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2226,energy efficiency,model,model,2226,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2516,integrability,version,version,2516,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:250,interoperability,specif,specified,250,"[ntuple] `Show` and `PrintInfo` does not work for friend RNTuples; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:. ```. no type name specified for Field ntpl1 (unchecked RResult access!). At:. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:955,interoperability,bind,bind,955,"[ntuple] `Show` and `PrintInfo` does not work for friend RNTuples; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:. ```. no type name specified for Field ntpl1 (unchecked RResult access!). At:. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:955,modifiability,bind,bind,955,"[ntuple] `Show` and `PrintInfo` does not work for friend RNTuples; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:. ```. no type name specified for Field ntpl1 (unchecked RResult access!). At:. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2516,modifiability,version,version,2516,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:32,reliability,doe,does,32,"[ntuple] `Show` and `PrintInfo` does not work for friend RNTuples; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:. ```. no type name specified for Field ntpl1 (unchecked RResult access!). At:. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:220,safety,except,exception,220,"[ntuple] `Show` and `PrintInfo` does not work for friend RNTuples; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:. ```. no type name specified for Field ntpl1 (unchecked RResult access!). At:. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:295,security,access,access,295,"[ntuple] `Show` and `PrintInfo` does not work for friend RNTuples; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Calling `Show` on an RNTupleReader that contains friends raises the following exception:. ```. no type name specified for Field ntpl1 (unchecked RResult access!). At:. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:493]. static ROOT::Experimental::RResult<std::unique_ptr<ROOT::Experimental::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:1901,security,model,model,1901,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:1945,security,model,model,1945,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2026,security,model,model,2026,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2101,security,model,model,2101,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2145,security,model,model,2145,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2226,security,model,model,2226,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/issues/14748:2602,testability,context,context,2602,"ntal::RFieldBase> > ROOT::Experimental::RFieldBase::Create(const std::string&, const std::string&) [/home/florine/cern/root/src/tree/ntuple/v7/src/RField.cxx:485]. ```. The reason for this is that RNTuple friends are (virtually) represented as untyped record fields. One solution could be to create an artificial `RRecordField` to bind the fields to, in a similar fashion to what is done here: https://github.com/root-project/root/blob/f3fc75b2078cec442c0f6060d2bfd4e86cf83b06/tree/ntuple/v7/src/RNTupleDescriptor.cxx#L65-L77. With the reproducer below this would result in the following:. ``` . // Show. {. ""ntpl1"": {. ""foo"": 3.14. },. ""ntpl2"": {. ""bar"": 2.72. }. }. // PrintInfo. ************************************ NTUPLE ************************************. * N-Tuple : _friends *. * Entries : 10 *. ********************************************************************************. * Field 1 : ntuple1 *. * Field 1.1 : x (std::int32_t) *. * Field 2 : ntuple2 *. * Field 2.1 : y (std::int32_t) *. ********************************************************************************. ```. As a quick fix this is fine, but it might be nicer to have a representation that better respects the meaning of befriended RNTuples. ### Reproducer. ```cpp. void show_friends() {. {. auto model = RNTupleModel::Create();. auto foo = model->MakeField<float>(""foo"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl1"", ""ntpl1.root"");. *foo = 3.14;. writer->Fill();. }. {. auto model = RNTupleModel::Create();. auto bar = model->MakeField<float>(""bar"");. auto writer = RNTupleWriter::Recreate(std::move(model), ""ntpl2"", ""ntpl2.root"");. *bar = 2.72;. writer->Fill();. }. std::vector<RNTupleReader::ROpenSpec> friends = {{""ntpl1"", ""ntpl1.root""},. {""ntpl2"", ""ntpl2.root""}};. auto ntuple = RNTupleReader::OpenFriends(friends);. ntuple->Show(0);. // same for ntuple->PrintInfo();. }. ```. ### ROOT version. any. ### Installation method. any. ### Operating system. any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14748
https://github.com/root-project/root/pull/14749:83,availability,down,down,83,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:442,deployability,updat,updated,442,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:351,interoperability,bind,bind,351,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:351,modifiability,bind,bind,351,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:412,safety,test,tested,412,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:442,safety,updat,updated,442,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:442,security,updat,updated,442,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:412,testability,test,tested,412,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14749:197,usability,user,user,197,"[ntuple] Fix field construction for friends; This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14749
https://github.com/root-project/root/pull/14750:120,deployability,fail,fails,120,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:205,deployability,updat,update,205,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:57,energy efficiency,current,currently,57,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:159,performance,time,time,159,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:1,reliability,rca,rcanvas,1,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:94,reliability,RCa,RCanvas,94,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:120,reliability,fail,fails,120,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:205,safety,updat,update,205,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14750:205,security,updat,update,205,[rcanvas] Comment out SaveAs() in last tutorial; This is currently the only tutorial calling `RCanvas::SaveAs()` and it fails very often (more than 90% of the time) on fedora38 and fedora39 since the last update of chromium.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14750
https://github.com/root-project/root/pull/14751:1352,availability,reliab,reliable,1352,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:513,deployability,log,logarithmic,513,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:798,interoperability,specif,specify,798,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:56,modifiability,exten,extended,56,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:148,modifiability,exten,extended,148,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:285,modifiability,exten,extended,285,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:400,modifiability,exten,extended,400,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:469,modifiability,exten,extended,469,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:616,modifiability,paramet,parameter,616,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:673,modifiability,paramet,parameter,673,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:775,modifiability,paramet,parameters,775,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:1352,reliability,reliab,reliable,1352,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:513,safety,log,logarithmic,513,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:960,safety,test,tested,960,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:513,security,log,logarithmic,513,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:513,testability,log,logarithmic,513,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:960,testability,test,tested,960,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:926,usability,prefer,preferrable,926,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14751:1395,usability,behavi,behaviour,1395,[RF] Determine asymptotically correct uncertainties for extended unbinned maximum likelihood fits; # This Pull request:. Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method. . ## Changes or fixes:. -Added extended term to asymptotically correct method to allow for weighted extended maximum likelihood fits. -Usage of logarithmic PDFs for derivatives may have some numerical benefits. -Fixed RooDerivative to not use the parameter range in the step size calculation in case the parameter supplied has no range. This now allows to use the method (and RooDerivative in general) for parameters that do not specify a range. . -Added warning in case of binned fits. In this case a chi2 fit using the std. treatment of weights should be preferrable. ## Checklist:. - [x] tested changes locally. This PR fixes # . resolves https://its.cern.ch/jira/browse/ROOT-10827. resolves https://its.cern.ch/jira/browse/ROOT-10866. related #11660 . note https://github.com/root-project/root/issues/11112 can not be fixed since the resulting minuit covariance matrix is not positive definite (set PrintLevel(0) to see this). Calculations with the inverse Hessians are thus not reliable. High stats fit show the expected behaviour.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14751
https://github.com/root-project/root/pull/14753:1,energy efficiency,core,core,1,[core] Improve Include PATH handling & add test; Should fix https://github.com/root-project/root/issues/10866,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14753
https://github.com/root-project/root/pull/14753:43,safety,test,test,43,[core] Improve Include PATH handling & add test; Should fix https://github.com/root-project/root/issues/10866,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14753
https://github.com/root-project/root/pull/14753:43,testability,test,test,43,[core] Improve Include PATH handling & add test; Should fix https://github.com/root-project/root/issues/10866,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14753
https://github.com/root-project/root/pull/14754:220,deployability,updat,updated,220,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:26,integrability,messag,messages,26,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:117,integrability,messag,messages,117,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:26,interoperability,messag,messages,26,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:117,interoperability,messag,messages,117,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:190,safety,test,tested,190,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:220,safety,updat,updated,220,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:220,security,updat,updated,220,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14754:190,testability,test,tested,190,[skip-ci] add deprecation messages to outdated classes; # This Pull request:. ## Changes or fixes:. Adds deprecation messages to classes that are no longer recommended. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/14582. Fixes https://its.cern.ch/jira/browse/ROOT-8594.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14754
https://github.com/root-project/root/pull/14755:193,energy efficiency,CPU,CPU,193,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:308,energy efficiency,CPU,CPU,308,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:140,interoperability,compatib,compatible,140,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:338,interoperability,compatib,compatible,338,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:193,performance,CPU,CPU,193,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:308,performance,CPU,CPU,308,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:54,safety,test,testRooRealL,54,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:93,safety,test,test,93,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:164,safety,test,test,164,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:293,safety,test,tests,293,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:463,safety,test,tests,463,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:54,testability,test,testRooRealL,54,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:93,testability,test,test,93,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:164,testability,test,test,164,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:293,testability,test,tests,293,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14755:463,testability,test,tests,463,"[RF] Explicitly use legacy backend for references in `testRooRealL`; The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14755
https://github.com/root-project/root/pull/14758:97,availability,error,errors,97,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:323,deployability,updat,updated,323,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:1,energy efficiency,core,core,1,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:97,performance,error,errors,97,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:10,safety,Prevent,Prevent,10,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:97,safety,error,errors,97,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:293,safety,test,tested,293,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:323,safety,updat,updated,323,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:10,security,Preven,Prevent,10,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:323,security,updat,updated,323,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:293,testability,test,tested,293,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14758:97,usability,error,errors,97,"[core,io] Prevent out-of-bond writing in TString and increase severity of MaxSize-related raised errors; # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/14552. Fixes https://its.cern.ch/jira/browse/ROOT-5114 by @devdanielsun. ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14758
https://github.com/root-project/root/pull/14759:179,deployability,patch,patches,179,[RF] Set workspace on imported roofit objects; Imported RooAbsArgs should have their workspace set to the workspace they are being imported to. Can we please sweep this into 6.30 patches too please.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14759
https://github.com/root-project/root/pull/14759:179,safety,patch,patches,179,[RF] Set workspace on imported roofit objects; Imported RooAbsArgs should have their workspace set to the workspace they are being imported to. Can we please sweep this into 6.30 patches too please.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14759
https://github.com/root-project/root/pull/14759:179,security,patch,patches,179,[RF] Set workspace on imported roofit objects; Imported RooAbsArgs should have their workspace set to the workspace they are being imported to. Can we please sweep this into 6.30 patches too please.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14759
https://github.com/root-project/root/pull/14760:212,deployability,updat,updated,212,[core] use one instead of two lookups within TClass::Init(); # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7123. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14760
https://github.com/root-project/root/pull/14760:1,energy efficiency,core,core,1,[core] use one instead of two lookups within TClass::Init(); # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7123. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14760
https://github.com/root-project/root/pull/14760:182,safety,test,tested,182,[core] use one instead of two lookups within TClass::Init(); # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7123. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14760
https://github.com/root-project/root/pull/14760:212,safety,updat,updated,212,[core] use one instead of two lookups within TClass::Init(); # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7123. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14760
https://github.com/root-project/root/pull/14760:212,security,updat,updated,212,[core] use one instead of two lookups within TClass::Init(); # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7123. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14760
https://github.com/root-project/root/pull/14760:182,testability,test,tested,182,[core] use one instead of two lookups within TClass::Init(); # This Pull request:. ## Changes or fixes:. Fixes https://github.com/root-project/root/issues/7123. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14760
https://github.com/root-project/root/pull/14761:54,deployability,contain,container,54,[ntuple] remove ENTupleContainerFormat; The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14761
https://github.com/root-project/root/pull/14761:129,integrability,pub,public,129,[ntuple] remove ENTupleContainerFormat; The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14761
https://github.com/root-project/root/pull/14761:136,integrability,interfac,interface,136,[ntuple] remove ENTupleContainerFormat; The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14761
https://github.com/root-project/root/pull/14761:136,interoperability,interfac,interface,136,[ntuple] remove ENTupleContainerFormat; The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14761
https://github.com/root-project/root/pull/14761:136,modifiability,interfac,interface,136,[ntuple] remove ENTupleContainerFormat; The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14761
https://github.com/root-project/root/pull/14761:81,safety,test,testing,81,[ntuple] remove ENTupleContainerFormat; The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14761
https://github.com/root-project/root/pull/14761:81,testability,test,testing,81,[ntuple] remove ENTupleContainerFormat; The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14761
https://github.com/root-project/root/pull/14762:134,energy efficiency,draw,drawn,134,[RF] Fix for display of canvases in jupyter notebooks; This change needs backporting into 6.30. It fixes issues with display of plots drawn by xRooFit in jupyter notebooks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14762
https://github.com/root-project/root/pull/14763:387,deployability,log,log-likelihood,387,"[math][fit] Change FitFCN/SetFCN to pass a flag for the type of fit; In the FitFCN/SetFCN functions use a flag for the fit type instead of passing a boolean for the chi2 fit. The flag is by default 0 (undefined type), but can be 1 (for chi2 fit), so compatible as passing a boolean as before, 2 for unbinned likelihood and 3 for binned likelihood (FCN is defined to be the Baker-Cousins log-likelihood ratio). By passing the correct flag the function FitResult::Chi2() returns the corresponding Chi2() and the Baker-Cousins chi2 equivalent in case a binned likelihood fits. This PR fixes #11143.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14763
https://github.com/root-project/root/pull/14763:250,interoperability,compatib,compatible,250,"[math][fit] Change FitFCN/SetFCN to pass a flag for the type of fit; In the FitFCN/SetFCN functions use a flag for the fit type instead of passing a boolean for the chi2 fit. The flag is by default 0 (undefined type), but can be 1 (for chi2 fit), so compatible as passing a boolean as before, 2 for unbinned likelihood and 3 for binned likelihood (FCN is defined to be the Baker-Cousins log-likelihood ratio). By passing the correct flag the function FitResult::Chi2() returns the corresponding Chi2() and the Baker-Cousins chi2 equivalent in case a binned likelihood fits. This PR fixes #11143.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14763
https://github.com/root-project/root/pull/14763:387,safety,log,log-likelihood,387,"[math][fit] Change FitFCN/SetFCN to pass a flag for the type of fit; In the FitFCN/SetFCN functions use a flag for the fit type instead of passing a boolean for the chi2 fit. The flag is by default 0 (undefined type), but can be 1 (for chi2 fit), so compatible as passing a boolean as before, 2 for unbinned likelihood and 3 for binned likelihood (FCN is defined to be the Baker-Cousins log-likelihood ratio). By passing the correct flag the function FitResult::Chi2() returns the corresponding Chi2() and the Baker-Cousins chi2 equivalent in case a binned likelihood fits. This PR fixes #11143.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14763
https://github.com/root-project/root/pull/14763:387,security,log,log-likelihood,387,"[math][fit] Change FitFCN/SetFCN to pass a flag for the type of fit; In the FitFCN/SetFCN functions use a flag for the fit type instead of passing a boolean for the chi2 fit. The flag is by default 0 (undefined type), but can be 1 (for chi2 fit), so compatible as passing a boolean as before, 2 for unbinned likelihood and 3 for binned likelihood (FCN is defined to be the Baker-Cousins log-likelihood ratio). By passing the correct flag the function FitResult::Chi2() returns the corresponding Chi2() and the Baker-Cousins chi2 equivalent in case a binned likelihood fits. This PR fixes #11143.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14763
https://github.com/root-project/root/pull/14763:387,testability,log,log-likelihood,387,"[math][fit] Change FitFCN/SetFCN to pass a flag for the type of fit; In the FitFCN/SetFCN functions use a flag for the fit type instead of passing a boolean for the chi2 fit. The flag is by default 0 (undefined type), but can be 1 (for chi2 fit), so compatible as passing a boolean as before, 2 for unbinned likelihood and 3 for binned likelihood (FCN is defined to be the Baker-Cousins log-likelihood ratio). By passing the correct flag the function FitResult::Chi2() returns the corresponding Chi2() and the Baker-Cousins chi2 equivalent in case a binned likelihood fits. This PR fixes #11143.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14763
https://github.com/root-project/root/issues/14765:366,availability,state,states,366,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1258,availability,Operat,Operating,1258,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1127,deployability,version,version,1127,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1214,deployability,Instal,Installation,1214,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:116,integrability,event,event,116,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:366,integrability,state,states,366,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:720,integrability,event,event,720,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:980,integrability,event,events,980,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1127,integrability,version,version,1127,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:199,interoperability,distribut,distribution,199,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:864,interoperability,distribut,distribution,864,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1127,modifiability,version,version,1127,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1298,safety,test,tested,1298,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1006,testability,simpl,simplest,1006,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1298,testability,test,tested,1298,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1376,testability,context,context,1376,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:599,usability,document,documented,599,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1006,usability,simpl,simplest,1006,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14765:1161,usability,behavi,behavior,1161,"TGenPhaseSpace weight normalization; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. The event weight obtained from `TGenPhaseSpace::Generate()` that is used to get a flat distribution is not normalized to 1. The number rather seems to correspond to the square of the portion of the phase space occupied by the kinematically allowed final states, e.g., for three massless particles, the shape is a triangle that occupies 1/2 of the m_{12}^2 and m_{23}. ^2 ranges, and the normalization is indeed 1/4 (instead of 1). Maybe this is a feature and not a bug, but it should be documented in the `TGenPhaseSpace::Generate()` method. It would also be useful to have a method that returns the correct event weight. At the moment, in order to get a correctly normalized weight, one can run a Monte Carlo to obtain an overall normalization of the distribution for chosen masses and then apply this normalization as a correction on individual weights of generated events. ### Reproducer. A simplest example can be the tutorial macro: [PhaseSpace.C](https://root.cern.ch/doc/master/PhaseSpace_8C.html). ### ROOT version. Present in v6.30 but the behavior was the same in v5 and possibly before. ### Installation method. built from source. ### Operating system. Probably all systems (tested on Linux Centos 7, Centos 8, Rocky 9, macOS Sonoma 14). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14765
https://github.com/root-project/root/issues/14766:169,availability,operat,operators-for-the-ttree-project-conditions,169,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1836,availability,Operat,Operating,1836,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1154,deployability,API,API,1154,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1774,deployability,API,API,1774,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1788,deployability,version,version,1788,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1806,deployability,Instal,Installation,1806,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:374,energy efficiency,Draw,DrawStuff,374,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1099,energy efficiency,Draw,Draw,1099,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1146,energy efficiency,current,current,1146,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:983,integrability,Filter,Filter,983,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1154,integrability,API,API,1154,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1393,integrability,messag,message,1393,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1774,integrability,API,API,1774,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1788,integrability,version,version,1788,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:30,interoperability,share,share,30,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1154,interoperability,API,API,1154,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1393,interoperability,messag,message,1393,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1455,interoperability,share,shared,1455,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1502,interoperability,standard,standard,1502,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1774,interoperability,API,API,1774,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1788,modifiability,version,version,1788,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1124,reliability,doe,doesn,1124,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1226,reliability,doe,does,1226,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1874,testability,context,context,1874,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:721,usability,user,user,721,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1404,usability,user,users,1404,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1484,usability,clear,clearest,1484,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1638,usability,document,documentation,1638,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1670,usability,user,user,1670,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14766:1675,usability,guid,guide,1675,"RResulPtr could better convey/share ownership of pointee; ### Explain what you would like to see improved and how. This forum post https://root-forum.cern.ch/t/too-many-operators-for-the-ttree-project-conditions/58009/5 triggered a discussion that probably `RResultPtr` could better behave with respect to ownership of its pointee. For example, this function. ```cpp. TH1D *DrawStuff(const char *columnname) {. auto file = TFile::Open(""tutorials/hsimple.root"", ""READ"");. auto ntuple = file->Get<TTree>(""ntuple"");. ROOT::RDataFrame df(*ntuple);. auto ht = df.Histo1D(*h, columname);. return ht.GetPtr();. }. ```. Will return a dangling pointer since the `RResultPtr` going out of scope will destroy the pointee. The forum user presents a pattern such as. ```cpp. THStack* histStack = new THStack(""histStack"", ""Bs_MCORR"");. for(int i=0; i<sampNumb; i++) {. TFile* file = new TFile(rootList[i]);. TTree* tree = (TTree*)file->Get(""DecayTree"");. ROOT::RDataFrame df(*tree);. auto ht = df.Filter(conds[i].Data()).Histo1D(h, ""Bs_MCORR"");. histStack->Add(ht.GetPtr(), , ""HIST && E1 && EX0"");. }. histStack->Draw();. ```. Which also doesn't work with the current API. Admittedly, this example would not work in general since `THStack` does not take ownership of the passed histograms and assumes they will be kept alive by ROOT global objects. In general, for this kind of use case we could convey the message to users they can store the histograms in a vector of shared pointers which is the clearest and most standard data structure to represent the situation correctly. So we need:. * `std::shared_ptr<T> RResultPtr<T>::GetSharedPtr()`. * More documentation on the RDataFrame user guide about these use cases. * A tutorial starting from the forum post reproducer once we have the API. ### ROOT version. Any. ### Installation method. Any. ### Operating system. Any. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14766
https://github.com/root-project/root/issues/14767:334,availability,down,downloaded,334,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1320,availability,operat,operator,1320,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1443,availability,error,error,1443,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:2129,availability,down,downloaded,2129,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:2160,availability,Operat,Operating,2160,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:251,deployability,version,versions,251,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:300,deployability,Instal,Install,300,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:562,deployability,version,version,562,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1403,deployability,stack,stack,1403,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1600,deployability,version,version,1600,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:2090,deployability,Instal,Installation,2090,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1185,energy efficiency,cpu,cpu,1185,"nstead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:251,integrability,version,versions,251,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:562,integrability,version,version,562,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1600,integrability,version,version,1600,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1147,interoperability,share,shared,1147,"hould bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1232,interoperability,xml,xml,1232," fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:251,modifiability,version,versions,251,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:562,modifiability,version,version,562,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1600,modifiability,version,version,1600,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1185,performance,cpu,cpu,1185,"nstead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1443,performance,error,error,1443,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1443,safety,error,error,1443,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:477,security,session,session,477,"rootn.exe instant crash on startup; ### Check duplicate issues. - [X] Checked for duplicates. ### Description. Running `rootn.exe` from ROOT 6.30.04 should bring up the ROOT prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.q",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1171,security,ssl,ssl,1171," prompt, but instead crashes instantly on startup. . It works fine with older versions of ROOT (6.28, 6.26). ### Reproducer. - Install precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating sys",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1755,security,Team,Team,1755,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1409,testability,trace,trace,1409,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:2211,testability,context,context,2211,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
https://github.com/root-project/root/issues/14767:1443,usability,error,error,1443,"nstall precompiled ROOT 6.30.04, downloaded from root.cern, on RHEL8 or 9. - Run `thisroot.sh` to set up the runtime environment. - Type rootn.exe. - Hard crash. Transcript of session on RHEL8:. ```. % source /apps/ROOT/6.30.04/bin/thisroot.sh. % root-config --version. 6.30.04. % root-config --features. cxx17 asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_davix builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_lz4 builtin_lzma builtin_nlohmannjson builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xrootd builtin_xxhash builtin_zeromq builtin_zlib builtin_zstd clad dataframe davix fftw3 fitsio fortran gdml http imt mathmore mlp minuit2 mysql opengl pgsql proof pyroot roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shadowpw shared soversion sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore x11 xml xrootd. % which rootn.exe. /apps/ROOT/6.30.04/bin/rootn.exe. % rootn.exe. Fatal in <operator new>: with std::align_val_t is not implemented yet. aborting. ... longish stack trace ... ```. This works without error with ROOT 6.26.14 and 6.28.12 on the exact same machine. Running plain `root` 6.30.04 also works, of course. Only `rootn.exe` seems affected. ### ROOT version. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.30/04 https://root.cern |. | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jan 31 2024, 09:46:18 |. | From heads/master@tags/v6-30-04 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Installation method. pre-built binary, downloaded from root.cern. ### Operating system. Linux RHEL8 or 9. ### Additional context. Tried several different Linux hosts running RHEL8/CentOS 8, all with same result.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14767
