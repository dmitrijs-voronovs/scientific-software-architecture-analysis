id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/4761:693,modifiability,modul,modules,693,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:853,modifiability,modul,module,853,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:34,performance,time,time,34,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:414,performance,optimiz,optimize,414,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:905,performance,CPU,CPU,905,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1019,performance,profil,profiles,1019,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1231,performance,memor,memory,1231,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:860,reliability,availab,available,860,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:78,safety,modul,module,78,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:336,safety,modul,modules,336,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:576,safety,compl,complexity,576,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:601,safety,log,logic,601,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:693,safety,modul,modules,693,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:853,safety,modul,module,853,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:860,safety,avail,available,860,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1088,safety,patch,patch,1088,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:54,security,ident,identifier,54,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:98,security,ident,identifier,98,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:295,security,ident,identifier,295,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:576,security,compl,complexity,576,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:601,security,log,logic,601,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:860,security,availab,available,860,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1088,security,patch,patch,1088,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:601,testability,log,logic,601,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:827,testability,context,context,827,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4761:1231,usability,memor,memory,1231,"[cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4761
https://github.com/root-project/root/pull/4762:733,availability,sli,slightly,733,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:109,deployability,depend,depending,109,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:538,deployability,patch,patch,538,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:662,deployability,updat,updated,662,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:825,deployability,updat,updated,825,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:21,energy efficiency,draw,drawing,21,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:94,energy efficiency,draw,draw,94,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:140,energy efficiency,draw,drawn,140,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:556,energy efficiency,draw,drawing,556,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:599,energy efficiency,draw,drawing,599,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:109,integrability,depend,depending,109,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:109,modifiability,depend,depending,109,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:733,reliability,sli,slightly,733,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:109,safety,depend,depending,109,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:538,safety,patch,patch,538,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:662,safety,updat,updated,662,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:807,safety,test,testing,807,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:825,safety,updat,updated,825,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:538,security,patch,patch,538,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:662,security,updat,updated,662,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:825,security,updat,updated,825,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:109,testability,depend,depending,109,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:807,testability,test,testing,807,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4762:251,usability,user,user-images,251,"[graf2d] Unified the drawing of marker styles 3, 5 and 31; The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:. ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg). Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4762
https://github.com/root-project/root/pull/4763:31,deployability,instal,installing,31,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:61,deployability,instal,install,61,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:130,deployability,instal,installation,130,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:202,deployability,build,build,202,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:372,deployability,configurat,configuration,372,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:401,deployability,build,build,401,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:476,deployability,instal,install,476,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:524,energy efficiency,core,core,524,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:372,integrability,configur,configuration,372,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:372,modifiability,configur,configuration,372,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:359,performance,perform,performed,359,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:386,performance,time,time,386,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:322,reliability,doe,does,322,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:372,security,configur,configuration,372,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4763:359,usability,perform,performed,359,"[CMake] Temporary solution for installing pcms without using install(DIRECTORY ...); The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4763
https://github.com/root-project/root/pull/4764:14,modifiability,paramet,parameter,14,"[RF] Add mean parameter to RooGExpModel.; Contrary to the RooFit manual, the RooGExpModel doesn't have a parameter. for the mean of the Gaussian. This was therefore added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4764
https://github.com/root-project/root/pull/4764:105,modifiability,paramet,parameter,105,"[RF] Add mean parameter to RooGExpModel.; Contrary to the RooFit manual, the RooGExpModel doesn't have a parameter. for the mean of the Gaussian. This was therefore added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4764
https://github.com/root-project/root/pull/4764:90,reliability,doe,doesn,90,"[RF] Add mean parameter to RooGExpModel.; Contrary to the RooFit manual, the RooGExpModel doesn't have a parameter. for the mean of the Gaussian. This was therefore added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4764
https://github.com/root-project/root/pull/4765:610,interoperability,format,format,610,"[graf2d] Added the possibility to set the line cap method for PostScript output.; Up to now it was possible to set the line join method for PostScript output via TStyle::SetJoinLinePS. However, there was no corresponding function for the line cap method. Since both method go hand in hand, I think we should also have a TStyle::SetCapLinePS function to set the line cap method for PostScript output. I implemented this function and added the corresponding functionality to TPostScript, TPDF and TSVG. Furthermore, the SVG output ignored the line join setting up to now although it is supported by the SVG file format which is why I also added it there. The attribute fLineJoin of TPostScript was completely unused, so I removed it. There is no need to have this attribute at all since the static attribute fgLineJoin of TPostScript fulfills the same purpose.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4765
https://github.com/root-project/root/pull/4765:696,safety,compl,completely,696,"[graf2d] Added the possibility to set the line cap method for PostScript output.; Up to now it was possible to set the line join method for PostScript output via TStyle::SetJoinLinePS. However, there was no corresponding function for the line cap method. Since both method go hand in hand, I think we should also have a TStyle::SetCapLinePS function to set the line cap method for PostScript output. I implemented this function and added the corresponding functionality to TPostScript, TPDF and TSVG. Furthermore, the SVG output ignored the line join setting up to now although it is supported by the SVG file format which is why I also added it there. The attribute fLineJoin of TPostScript was completely unused, so I removed it. There is no need to have this attribute at all since the static attribute fgLineJoin of TPostScript fulfills the same purpose.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4765
https://github.com/root-project/root/pull/4765:696,security,compl,completely,696,"[graf2d] Added the possibility to set the line cap method for PostScript output.; Up to now it was possible to set the line join method for PostScript output via TStyle::SetJoinLinePS. However, there was no corresponding function for the line cap method. Since both method go hand in hand, I think we should also have a TStyle::SetCapLinePS function to set the line cap method for PostScript output. I implemented this function and added the corresponding functionality to TPostScript, TPDF and TSVG. Furthermore, the SVG output ignored the line join setting up to now although it is supported by the SVG file format which is why I also added it there. The attribute fLineJoin of TPostScript was completely unused, so I removed it. There is no need to have this attribute at all since the static attribute fgLineJoin of TPostScript fulfills the same purpose.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4765
https://github.com/root-project/root/pull/4765:584,usability,support,supported,584,"[graf2d] Added the possibility to set the line cap method for PostScript output.; Up to now it was possible to set the line join method for PostScript output via TStyle::SetJoinLinePS. However, there was no corresponding function for the line cap method. Since both method go hand in hand, I think we should also have a TStyle::SetCapLinePS function to set the line cap method for PostScript output. I implemented this function and added the corresponding functionality to TPostScript, TPDF and TSVG. Furthermore, the SVG output ignored the line join setting up to now although it is supported by the SVG file format which is why I also added it there. The attribute fLineJoin of TPostScript was completely unused, so I removed it. There is no need to have this attribute at all since the static attribute fgLineJoin of TPostScript fulfills the same purpose.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4765
https://github.com/root-project/root/pull/4766:69,deployability,build,builds,69,[Exp PyROOT] Fix warnings; Fix a few warnings in PyROOT experimental builds observed e.g. here:. https://github.com/root-project/root/pull/4753.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4766
https://github.com/root-project/root/pull/4766:76,deployability,observ,observed,76,[Exp PyROOT] Fix warnings; Fix a few warnings in PyROOT experimental builds observed e.g. here:. https://github.com/root-project/root/pull/4753.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4766
https://github.com/root-project/root/pull/4766:76,testability,observ,observed,76,[Exp PyROOT] Fix warnings; Fix a few warnings in PyROOT experimental builds observed e.g. here:. https://github.com/root-project/root/pull/4753.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4766
https://github.com/root-project/root/pull/4767:192,deployability,depend,depends,192,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:313,deployability,depend,dependency,313,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:423,deployability,depend,dependency,423,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:516,deployability,depend,dependency,516,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:596,deployability,depend,depend,596,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:747,deployability,depend,depending,747,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:116,energy efficiency,core,core,116,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:277,energy efficiency,draw,drawing,277,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:398,energy efficiency,Draw,Draw,398,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:496,energy efficiency,draw,drawing,496,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:632,energy efficiency,load,load,632,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:647,energy efficiency,draw,drawing,647,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:734,energy efficiency,load,load,734,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:82,integrability,compon,components,82,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:192,integrability,depend,depends,192,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:313,integrability,depend,dependency,313,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:423,integrability,depend,dependency,423,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:516,integrability,depend,dependency,516,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:596,integrability,depend,depend,596,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:702,integrability,configur,configurable,702,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:747,integrability,depend,depending,747,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:82,interoperability,compon,components,82,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:82,modifiability,compon,components,82,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:192,modifiability,depend,depends,192,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:313,modifiability,depend,dependency,313,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:423,modifiability,depend,dependency,423,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:516,modifiability,depend,dependency,516,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:596,modifiability,depend,depend,596,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:702,modifiability,configur,configurable,702,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:747,modifiability,depend,depending,747,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:632,performance,load,load,632,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:734,performance,load,load,734,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:296,reliability,RCa,RCanvas,296,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:406,reliability,RCa,RCanvas,406,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:507,reliability,RCa,RCanvas,507,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:192,safety,depend,depends,192,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:313,safety,depend,dependency,313,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:423,safety,depend,dependency,423,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:516,safety,depend,dependency,516,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:596,safety,depend,depend,596,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:747,safety,depend,depending,747,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:702,security,configur,configurable,702,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:192,testability,depend,depends,192,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:313,testability,depend,dependency,313,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:423,testability,depend,dependency,423,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:516,testability,depend,dependency,516,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:596,testability,depend,depend,596,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:747,testability,depend,depending,747,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:164,usability,support,support,164,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4767:380,usability,support,support,380,"[RBrowser] split code on several libs; Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO. * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7. * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree. * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7. * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class. For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4767
https://github.com/root-project/root/pull/4768:9,reliability,pra,pragma,9,Protect #pragma GCC from MSVC & comment obsolete -include:_G__cpp_set…; …upG__ on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4768
https://github.com/root-project/root/pull/4769:13,deployability,Releas,Release,13,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4769
https://github.com/root-project/root/pull/4769:41,deployability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4769
https://github.com/root-project/root/pull/4769:50,deployability,build,build,50,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4769
https://github.com/root-project/root/pull/4769:60,deployability,instal,installation,60,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4769
https://github.com/root-project/root/pull/4769:41,integrability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4769
https://github.com/root-project/root/pull/4769:41,modifiability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4769
https://github.com/root-project/root/pull/4770:13,deployability,Releas,Release,13,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4770
https://github.com/root-project/root/pull/4770:41,deployability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4770
https://github.com/root-project/root/pull/4770:50,deployability,build,build,50,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4770
https://github.com/root-project/root/pull/4770:60,deployability,instal,installation,60,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4770
https://github.com/root-project/root/pull/4770:41,integrability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4770
https://github.com/root-project/root/pull/4770:41,modifiability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4770
https://github.com/root-project/root/pull/4771:12,deployability,observ,observable,12,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:125,deployability,observ,observable,125,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:296,deployability,observ,observable,296,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:312,deployability,observ,observables,312,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:357,deployability,scale,scaled,357,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:339,energy efficiency,model,models,339,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:357,energy efficiency,scale,scaled,357,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:177,modifiability,scal,scaling,177,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:357,modifiability,scal,scaled,357,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:357,performance,scale,scaled,357,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:339,security,model,models,339,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:12,testability,observ,observable,12,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:125,testability,observ,observable,125,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:296,testability,observ,observable,296,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4771:312,testability,observ,observables,312,"[RF] Change observable type for RooResolutionModel; RooResolutionModel was using RooRealVar as the type for the convolution. observable. That is an unneccessary restriction, as scaling and shifting. using e.g. RooLinearVar is possible. By accepting the base type. RooAbsRealLValue as convolution observable, all observables of resolution. models can now be scaled and shifted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4771
https://github.com/root-project/root/pull/4772:131,availability,consist,consisting,131,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:619,deployability,instal,installation,619,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:763,deployability,build,build,763,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:88,energy efficiency,draw,draw,88,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:308,energy efficiency,current,current,308,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:552,safety,test,tested,552,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:668,safety,test,test,668,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:739,safety,test,tests,739,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:769,safety,test,test,769,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:552,testability,test,tested,552,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:668,testability,test,test,668,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:739,testability,test,tests,739,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:769,testability,test,test,769,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:131,usability,consist,consisting,131,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4772:439,usability,user,user-images,439,"[graf2d] Added additional marker styles with wider lines; Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1. I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:. ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4772
https://github.com/root-project/root/pull/4773:13,deployability,Releas,Release,13,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4773
https://github.com/root-project/root/pull/4773:41,deployability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4773
https://github.com/root-project/root/pull/4773:50,deployability,build,build,50,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4773
https://github.com/root-project/root/pull/4773:60,deployability,instal,installation,60,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4773
https://github.com/root-project/root/pull/4773:41,integrability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4773
https://github.com/root-project/root/pull/4773:41,modifiability,version,versions,41,[Exp PyROOT] Release notes: multi-Python versions build and installation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4773
https://github.com/root-project/root/pull/4774:394,availability,operat,operation,394,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:881,availability,avail,available,881,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:939,availability,operat,operation,939,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1070,availability,operat,operation,1070,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:93,deployability,modul,module,93,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:353,deployability,modul,modules,353,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:621,deployability,log,logic,621,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:713,deployability,modul,modules,713,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:874,deployability,modul,module,874,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1112,deployability,patch,patch,1112,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:432,energy efficiency,optim,optimize,432,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:927,energy efficiency,CPU,CPU,927,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1042,energy efficiency,profil,profiles,1042,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1243,energy efficiency,reduc,reduction,1243,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:289,interoperability,semant,semantically,289,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:93,modifiability,modul,module,93,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:353,modifiability,modul,modules,353,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:713,modifiability,modul,modules,713,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:874,modifiability,modul,module,874,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:49,performance,time,time,49,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:432,performance,optimiz,optimize,432,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:927,performance,CPU,CPU,927,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1042,performance,profil,profiles,1042,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1256,performance,memor,memory,1256,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:881,reliability,availab,available,881,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:93,safety,modul,module,93,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:353,safety,modul,modules,353,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:596,safety,compl,complexity,596,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:621,safety,log,logic,621,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:713,safety,modul,modules,713,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:874,safety,modul,module,874,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:881,safety,avail,available,881,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1112,safety,patch,patch,1112,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:69,security,ident,identifier,69,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:113,security,ident,identifier,113,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:312,security,ident,identifier,312,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:596,security,compl,complexity,596,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:621,security,log,logic,621,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:881,security,availab,available,881,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1112,security,patch,patch,1112,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:621,testability,log,logic,621,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:848,testability,context,context,848,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4774:1256,usability,memor,memory,1256,"[6.20-backport][cxxmodules] Improve ROOT startup time by not merging identifier tables; Each module has a set of identifier tables which aid lookup. Based on this. information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same. identifier lookup tables across multiple modules. Since lookup is a heavily used. operation in compilers clang tries to optimize it as much as possible. In case. it sees more than 4 such lookup tables it merges them together into a single. table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:. * The progam will use only a small superset of the modules it needs;. * The program will be compiled in multiple TUs and merging of tables will not. be called often;. In the interpreter context where we make all module available the merging of. such tables becomes CPU intense operation at runtime which produces a lot of. temporary reallocations. Moreover, we have seen a lot of profiles where the. merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran. locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4774
https://github.com/root-project/root/pull/4775:24,deployability,instal,installations,24,"Revert changes done for installations of pcms; Currently we are not ready for this cleanup, since we have a special PCMS are generated via rootcling call for Core as extra PCMS, that leaves no trace in ROOT build system and we can't properly control it. We need urgently move generation of special PCMs to use proper CMake targets (it will be enabled after 6.20).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4775
https://github.com/root-project/root/pull/4775:207,deployability,build,build,207,"Revert changes done for installations of pcms; Currently we are not ready for this cleanup, since we have a special PCMS are generated via rootcling call for Core as extra PCMS, that leaves no trace in ROOT build system and we can't properly control it. We need urgently move generation of special PCMs to use proper CMake targets (it will be enabled after 6.20).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4775
https://github.com/root-project/root/pull/4775:47,energy efficiency,Current,Currently,47,"Revert changes done for installations of pcms; Currently we are not ready for this cleanup, since we have a special PCMS are generated via rootcling call for Core as extra PCMS, that leaves no trace in ROOT build system and we can't properly control it. We need urgently move generation of special PCMs to use proper CMake targets (it will be enabled after 6.20).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4775
https://github.com/root-project/root/pull/4775:158,energy efficiency,Core,Core,158,"Revert changes done for installations of pcms; Currently we are not ready for this cleanup, since we have a special PCMS are generated via rootcling call for Core as extra PCMS, that leaves no trace in ROOT build system and we can't properly control it. We need urgently move generation of special PCMs to use proper CMake targets (it will be enabled after 6.20).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4775
https://github.com/root-project/root/pull/4775:242,security,control,control,242,"Revert changes done for installations of pcms; Currently we are not ready for this cleanup, since we have a special PCMS are generated via rootcling call for Core as extra PCMS, that leaves no trace in ROOT build system and we can't properly control it. We need urgently move generation of special PCMs to use proper CMake targets (it will be enabled after 6.20).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4775
https://github.com/root-project/root/pull/4775:193,testability,trace,trace,193,"Revert changes done for installations of pcms; Currently we are not ready for this cleanup, since we have a special PCMS are generated via rootcling call for Core as extra PCMS, that leaves no trace in ROOT build system and we can't properly control it. We need urgently move generation of special PCMs to use proper CMake targets (it will be enabled after 6.20).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4775
https://github.com/root-project/root/pull/4775:242,testability,control,control,242,"Revert changes done for installations of pcms; Currently we are not ready for this cleanup, since we have a special PCMS are generated via rootcling call for Core as extra PCMS, that leaves no trace in ROOT build system and we can't properly control it. We need urgently move generation of special PCMs to use proper CMake targets (it will be enabled after 6.20).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4775
https://github.com/root-project/root/pull/4776:49,deployability,instal,installations,49,[6-20-backport] Remove malicious cleanup and fix installations of rdicts.pcms ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4776
https://github.com/root-project/root/pull/4777:7,interoperability,Format,Formatted,7,"[hist] Formatted the files realted to TGraphMultiErrors; This PR serves the same purpose as this one: #4695 . However, I think that older PR was never merged, because it was opened before the hotfix #4698 and therefore was not able to compile. In this PR I simply format all code that has been added for the TGraphMultiErrors class using clang-format and the format settings file provided by ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4777
https://github.com/root-project/root/pull/4777:264,interoperability,format,format,264,"[hist] Formatted the files realted to TGraphMultiErrors; This PR serves the same purpose as this one: #4695 . However, I think that older PR was never merged, because it was opened before the hotfix #4698 and therefore was not able to compile. In this PR I simply format all code that has been added for the TGraphMultiErrors class using clang-format and the format settings file provided by ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4777
https://github.com/root-project/root/pull/4777:344,interoperability,format,format,344,"[hist] Formatted the files realted to TGraphMultiErrors; This PR serves the same purpose as this one: #4695 . However, I think that older PR was never merged, because it was opened before the hotfix #4698 and therefore was not able to compile. In this PR I simply format all code that has been added for the TGraphMultiErrors class using clang-format and the format settings file provided by ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4777
https://github.com/root-project/root/pull/4777:359,interoperability,format,format,359,"[hist] Formatted the files realted to TGraphMultiErrors; This PR serves the same purpose as this one: #4695 . However, I think that older PR was never merged, because it was opened before the hotfix #4698 and therefore was not able to compile. In this PR I simply format all code that has been added for the TGraphMultiErrors class using clang-format and the format settings file provided by ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4777
https://github.com/root-project/root/pull/4777:192,safety,hot,hotfix,192,"[hist] Formatted the files realted to TGraphMultiErrors; This PR serves the same purpose as this one: #4695 . However, I think that older PR was never merged, because it was opened before the hotfix #4698 and therefore was not able to compile. In this PR I simply format all code that has been added for the TGraphMultiErrors class using clang-format and the format settings file provided by ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4777
https://github.com/root-project/root/pull/4777:257,testability,simpl,simply,257,"[hist] Formatted the files realted to TGraphMultiErrors; This PR serves the same purpose as this one: #4695 . However, I think that older PR was never merged, because it was opened before the hotfix #4698 and therefore was not able to compile. In this PR I simply format all code that has been added for the TGraphMultiErrors class using clang-format and the format settings file provided by ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4777
https://github.com/root-project/root/pull/4777:257,usability,simpl,simply,257,"[hist] Formatted the files realted to TGraphMultiErrors; This PR serves the same purpose as this one: #4695 . However, I think that older PR was never merged, because it was opened before the hotfix #4698 and therefore was not able to compile. In this PR I simply format all code that has been added for the TGraphMultiErrors class using clang-format and the format settings file provided by ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4777
https://github.com/root-project/root/pull/4778:102,integrability,pub,public,102,"[RBrowsable] split classes in separate source files; Provide separate include for each class which is public. Most of the classes moved into ""ROOT/Browsable"" include dir. All correspondent classes belongs to ""ROOT::Experimental::Browsable"" namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4778
https://github.com/root-project/root/pull/4779:303,deployability,releas,release,303,[Exp PyROOT/thisroot.sh] Added missing part of the path that did not …; …allow 'out of the box' correct source. Checking only for the existance of 'CMakeFiles' without including. ROOTSYS in the path was causing the addition of wrong paths in case of. out-of-the-box source. This also need to go in 6.20 release branch.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4779
https://github.com/root-project/root/pull/4780:130,availability,failur,failures,130,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:130,deployability,fail,failures,130,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:251,deployability,build,build,251,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:401,deployability,build,build,401,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:551,deployability,build,build,551,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:764,deployability,updat,updated,764,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:720,energy efficiency,alloc,allocate,720,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:130,performance,failur,failures,130,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:130,reliability,fail,failures,130,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:146,safety,test,test,146,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:167,safety,test,test-TGraphMultiErrorsTests,167,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:263,safety,test,testReport,263,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:296,safety,test,test,296,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:413,safety,test,testReport,413,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:446,safety,test,test,446,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:563,safety,test,testReport,563,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:596,safety,test,test,596,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:764,safety,updat,updated,764,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:764,security,updat,updated,764,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:146,testability,test,test,146,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:167,testability,test,test-TGraphMultiErrorsTests,167,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:263,testability,test,testReport,263,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:296,testability,test,test,296,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:413,testability,test,testReport,413,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:446,testability,test,test,446,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:563,testability,test,testReport,563,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4780:596,testability,test,test,596,"[hist] Fixed a possible segmentation violation in TGraphMultiErrors; Hello,. the bug this PR is adressing could be seen by random failures of the test gtest-hist-hist-test-TGraphMultiErrorsTests:. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74654/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/74449/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. - https://epsft-jenkins.cern.ch/job/root-pullrequests-build/73886/testReport/projectroot.hist.hist/test/gtest_hist_hist_test_TGraphMultiErrorsTests/. I have to apologize for this bug. It was caused by using an attribute to allocate an array before its value had been updated. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4780
https://github.com/root-project/root/pull/4781:4,energy efficiency,draw,drawing,4,Fix drawing of axis bin labels in TEfficiency (ROOT-10493); Add axis labels in the painted graph (1D case) or histogram (2d) representing TEfficiency when the label exists in the given histograms. This fixes ROOT-10493,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4781
https://github.com/root-project/root/pull/4782:231,availability,state,state,231,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:618,deployability,updat,updated,618,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:491,energy efficiency,optim,optimal,491,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:231,integrability,state,state,231,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:618,safety,updat,updated,618,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:618,security,updat,updated,618,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:33,usability,minim,minimum,33,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:199,usability,stop,stopped,199,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:327,usability,minim,minimizing,327,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:415,usability,minim,minimum,415,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:527,usability,Minim,Minimum,527,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:557,usability,Minim,Minimizer,557,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4782:607,usability,minim,minimum,607,"Fix in Minuit2::Minos when a new minimum is found; This PR handles the case in Minos when a lower function value is found. . The iteration to find the crossing function point (in MnFunctionCross) is stopped and the new found point state with lower function value is returned. . The Minuit2Minimizer then handles the case by re-minimizing t he function from the new point and then run again Minos from the new found minimum. In the case of TMinuit this was handles, although maybe not in the optimal case. . Fix also when a new Minimum is found that both in Minimizer and Fitter that the result with the new minimum is updated. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4782
https://github.com/root-project/root/pull/4783:4,deployability,instal,installation,4,Fix installation of PCMs with pyroot_experimental; Content of install directory with this PR: . https://gist.github.com/oshadura/7737bdcc90fed501869656808a5c514a. Next step will be to move installation of PCMs in ROOT_GENERATE_DICTIONARY().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4783
https://github.com/root-project/root/pull/4783:62,deployability,instal,install,62,Fix installation of PCMs with pyroot_experimental; Content of install directory with this PR: . https://gist.github.com/oshadura/7737bdcc90fed501869656808a5c514a. Next step will be to move installation of PCMs in ROOT_GENERATE_DICTIONARY().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4783
https://github.com/root-project/root/pull/4783:189,deployability,instal,installation,189,Fix installation of PCMs with pyroot_experimental; Content of install directory with this PR: . https://gist.github.com/oshadura/7737bdcc90fed501869656808a5c514a. Next step will be to move installation of PCMs in ROOT_GENERATE_DICTIONARY().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4783
https://github.com/root-project/root/pull/4783:51,performance,Content,Content,51,Fix installation of PCMs with pyroot_experimental; Content of install directory with this PR: . https://gist.github.com/oshadura/7737bdcc90fed501869656808a5c514a. Next step will be to move installation of PCMs in ROOT_GENERATE_DICTIONARY().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4783
https://github.com/root-project/root/pull/4784:15,deployability,Releas,Release,15,[PyROOT & RDF] Release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4784
https://github.com/root-project/root/pull/4785:248,availability,error,error,248,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:27,deployability,API,API,27,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:152,energy efficiency,draw,drawing,152,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:27,integrability,API,API,27,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:27,interoperability,API,API,27,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:160,interoperability,plug,plugins,160,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:248,performance,error,error,248,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:208,safety,avoid,avoid,208,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:248,safety,error,error,248,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:255,safety,test,tests,255,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:255,testability,test,tests,255,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4785:248,usability,error,error,248,"[Browsable] unify Provider API, fix Windows compile problems; * Use only **Browsable::Provider** class for all factory methods. * Split ROOT6 and ROOT7 drawing plugins. * Rename RBrowsable -> RBrowserData to avoid confusion. * Fix Windows compiler error, tests on Windows",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4785
https://github.com/root-project/root/pull/4786:6,safety,Test,Testing,6,[WIP] Testing of buitin glew;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4786
https://github.com/root-project/root/pull/4786:6,testability,Test,Testing,6,[WIP] Testing of buitin glew;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4786
https://github.com/root-project/root/pull/4788:79,performance,I/O,I/O,79,"[RF] Fix initialisation and const-correctness of RooNDKeysPdf.; After enabling I/O for the NDKeysPdf, some members that are not being. streamed had to be initialised properly. Further, most 'mutable's have. been removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4788
https://github.com/root-project/root/pull/4789:84,deployability,patch,patch,84,"Better RedrawAxis; The option ""G"" for RedrawAxis did not work for multigraphs. This patch fixes this and restructure this method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4789
https://github.com/root-project/root/pull/4789:84,safety,patch,patch,84,"Better RedrawAxis; The option ""G"" for RedrawAxis did not work for multigraphs. This patch fixes this and restructure this method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4789
https://github.com/root-project/root/pull/4789:84,security,patch,patch,84,"Better RedrawAxis; The option ""G"" for RedrawAxis did not work for multigraphs. This patch fixes this and restructure this method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4789
https://github.com/root-project/root/pull/4790:52,availability,fault,faulty,52,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4790:52,energy efficiency,fault,faulty,52,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4790:226,integrability,messag,message,226,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4790:226,interoperability,messag,message,226,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4790:252,modifiability,paramet,parameter,252,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4790:52,performance,fault,faulty,52,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4790:52,reliability,fault,faulty,52,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4790:52,safety,fault,faulty,52,"[RF] Fix crash in RoofitUnBinnedBenchmark.; Fixed a faulty loop condition in RooAddModel that lead to a crash in. RoofitUnBinnedBenchmark. Further, fix the definition of basis functions in RooBMixDecay, which. lead to an info message about not using a parameter in a RooFormulaVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4790
https://github.com/root-project/root/pull/4791:52,safety,Avoid,Avoid,52,"Several Windows-related fixes for ROOT7 classes; 1. Avoid usage of `static constexpr` in header files. MSVC compiler is not happy about such construct. 2. Add R__LOAD_LIBRARY to test macros (like brower.cxx) to let it run in Windows. 3. Add handling of "".lnk"" files in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4791
https://github.com/root-project/root/pull/4791:178,safety,test,test,178,"Several Windows-related fixes for ROOT7 classes; 1. Avoid usage of `static constexpr` in header files. MSVC compiler is not happy about such construct. 2. Add R__LOAD_LIBRARY to test macros (like brower.cxx) to let it run in Windows. 3. Add handling of "".lnk"" files in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4791
https://github.com/root-project/root/pull/4791:178,testability,test,test,178,"Several Windows-related fixes for ROOT7 classes; 1. Avoid usage of `static constexpr` in header files. MSVC compiler is not happy about such construct. 2. Add R__LOAD_LIBRARY to test macros (like brower.cxx) to let it run in Windows. 3. Add handling of "".lnk"" files in RBrowser",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4791
https://github.com/root-project/root/pull/4792:20,deployability,instal,installation,20,"[Backport 6-20] Fix installation of PCMs; We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4792
https://github.com/root-project/root/pull/4792:128,deployability,instal,install,128,"[Backport 6-20] Fix installation of PCMs; We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4792
https://github.com/root-project/root/pull/4792:82,safety,accid,accidentaly,82,"[Backport 6-20] Fix installation of PCMs; We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4792
https://github.com/root-project/root/pull/4792:115,usability,behavi,behaviour,115,"[Backport 6-20] Fix installation of PCMs; We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4792
https://github.com/root-project/root/pull/4793:138,modifiability,extens,extension,138,RBrowser windows improvments; 1. Support .lnk file. 2. Add R__LOAD_LIBRARY to tutorials macros. 3. Use RProvider methods to check if file extension is supported,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4793
https://github.com/root-project/root/pull/4793:33,usability,Support,Support,33,RBrowser windows improvments; 1. Support .lnk file. 2. Add R__LOAD_LIBRARY to tutorials macros. 3. Use RProvider methods to check if file extension is supported,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4793
https://github.com/root-project/root/pull/4793:151,usability,support,supported,151,RBrowser windows improvments; 1. Support .lnk file. 2. Add R__LOAD_LIBRARY to tutorials macros. 3. Use RProvider methods to check if file extension is supported,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4793
https://github.com/root-project/root/pull/4794:79,usability,support,supported,79,Remove -lMultiProc from the list of libraries on Windows (MultiProc i…; …s not supported on Windows),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4794
https://github.com/root-project/root/pull/4795:61,availability,failur,failures,61,[Exp PyROOT] Fixes for 32 bits; Fixes for the following test failures:. https://github.com/root-project/root/pull/4766#issuecomment-573859694,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4795
https://github.com/root-project/root/pull/4795:61,deployability,fail,failures,61,[Exp PyROOT] Fixes for 32 bits; Fixes for the following test failures:. https://github.com/root-project/root/pull/4766#issuecomment-573859694,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4795
https://github.com/root-project/root/pull/4795:61,performance,failur,failures,61,[Exp PyROOT] Fixes for 32 bits; Fixes for the following test failures:. https://github.com/root-project/root/pull/4766#issuecomment-573859694,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4795
https://github.com/root-project/root/pull/4795:61,reliability,fail,failures,61,[Exp PyROOT] Fixes for 32 bits; Fixes for the following test failures:. https://github.com/root-project/root/pull/4766#issuecomment-573859694,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4795
https://github.com/root-project/root/pull/4795:56,safety,test,test,56,[Exp PyROOT] Fixes for 32 bits; Fixes for the following test failures:. https://github.com/root-project/root/pull/4766#issuecomment-573859694,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4795
https://github.com/root-project/root/pull/4795:56,testability,test,test,56,[Exp PyROOT] Fixes for 32 bits; Fixes for the following test failures:. https://github.com/root-project/root/pull/4766#issuecomment-573859694,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4795
https://github.com/root-project/root/pull/4796:228,deployability,build,build,228,[Fix][Windows] Fixed class TGWin32VirtualXProxy; When I made the functions GetMarkerStyleBase() and GetMarkerLineWidth() static yesterday I forgot their implementations in the class TGWin32VirtualXProxy which caused the nightly build to fail on Windows. Because these functions are now static they can be removed from TGWin32VirtualXProxy entirely. Sorry for that. :|,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4796
https://github.com/root-project/root/pull/4796:237,deployability,fail,fail,237,[Fix][Windows] Fixed class TGWin32VirtualXProxy; When I made the functions GetMarkerStyleBase() and GetMarkerLineWidth() static yesterday I forgot their implementations in the class TGWin32VirtualXProxy which caused the nightly build to fail on Windows. Because these functions are now static they can be removed from TGWin32VirtualXProxy entirely. Sorry for that. :|,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4796
https://github.com/root-project/root/pull/4796:237,reliability,fail,fail,237,[Fix][Windows] Fixed class TGWin32VirtualXProxy; When I made the functions GetMarkerStyleBase() and GetMarkerLineWidth() static yesterday I forgot their implementations in the class TGWin32VirtualXProxy which caused the nightly build to fail on Windows. Because these functions are now static they can be removed from TGWin32VirtualXProxy entirely. Sorry for that. :|,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4796
https://github.com/root-project/root/pull/4797:9,deployability,Releas,Release,9,[JSROOT] Release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4797
https://github.com/root-project/root/pull/4798:0,deployability,Releas,Releases,0,Releases notes [skip-ci];,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4798
https://github.com/root-project/root/pull/4799:0,deployability,Updat,Update,0,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4799
https://github.com/root-project/root/pull/4799:7,deployability,releas,release,7,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4799
https://github.com/root-project/root/pull/4799:0,safety,Updat,Update,0,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4799
https://github.com/root-project/root/pull/4799:0,security,Updat,Update,0,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4799
https://github.com/root-project/root/pull/4800:27,deployability,releas,release,27,[TMVA] Add new features to release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4800
https://github.com/root-project/root/pull/4801:10,deployability,Releas,Release,10,[NFC][RF] Release notes for RooFit; @Axel-Naumann Should we mention the the RooFitMore migration? [no-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4801
https://github.com/root-project/root/pull/4805:113,deployability,fail,failing,113,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:46,integrability,coupl,couple,46,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:209,integrability,Filter,Filter-out,209,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:46,modifiability,coupl,couple,46,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:113,reliability,fail,failing,113,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:12,safety,test,tests,12,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:108,safety,test,test,108,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:240,safety,test,tests,240,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:180,security,access,access,180,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:12,testability,test,tests,12,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:46,testability,coupl,couple,46,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:108,testability,test,test,108,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4805:240,testability,test,tests,240,"Fix several tests (CTest) on Windows; - Add a couple of missing symbols into the export list. - Fix several test failing on Windows, mostly due to files staying open (creates file access issues on Windows). - Filter-out several unsupported tests (will add them back once the underlying issues are fixed)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4805
https://github.com/root-project/root/pull/4806:100,availability,Error,Error,100,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:225,availability,Error,Error,225,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:88,deployability,build,build,88,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:290,deployability,build,build,290,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:100,performance,Error,Error,100,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:225,performance,Error,Error,225,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:100,safety,Error,Error,100,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:225,safety,Error,Error,225,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:100,usability,Error,Error,100,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4806:225,usability,Error,Error,225,Fix missing standalone flag for standalone Minuit2; This is missing from the standalone build - the Error.h file has:. https://github.com/root-project/root/blob/803df004f43cfbb7c16e455ca30f2c250cc7fd8d/math/mathcore/inc/Math/Error.h#L27. But this is not being added by the standalone CMake build. It seems that this was changed from `USE_ROOT_ERROR` missing to a check for `MATHCORE_STANDALONE` (https://github.com/root-project/root/pull/2545).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4806
https://github.com/root-project/root/pull/4807:30,deployability,releas,release,30,Add my RHist contributions to release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4807
https://github.com/root-project/root/pull/4808:214,energy efficiency,current,current,214,"WebEve: Improvements in REveDataTable; * fixes in layout to remove unnecessary scrollbars. * implement tabular complete, show suggestions starting with ""i."" syntax. * provide public method list for tab complete of current and derived classes. * look for predefined column definition in current and base classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4808
https://github.com/root-project/root/pull/4808:286,energy efficiency,current,current,286,"WebEve: Improvements in REveDataTable; * fixes in layout to remove unnecessary scrollbars. * implement tabular complete, show suggestions starting with ""i."" syntax. * provide public method list for tab complete of current and derived classes. * look for predefined column definition in current and base classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4808
https://github.com/root-project/root/pull/4808:175,integrability,pub,public,175,"WebEve: Improvements in REveDataTable; * fixes in layout to remove unnecessary scrollbars. * implement tabular complete, show suggestions starting with ""i."" syntax. * provide public method list for tab complete of current and derived classes. * look for predefined column definition in current and base classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4808
https://github.com/root-project/root/pull/4808:111,safety,compl,complete,111,"WebEve: Improvements in REveDataTable; * fixes in layout to remove unnecessary scrollbars. * implement tabular complete, show suggestions starting with ""i."" syntax. * provide public method list for tab complete of current and derived classes. * look for predefined column definition in current and base classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4808
https://github.com/root-project/root/pull/4808:202,safety,compl,complete,202,"WebEve: Improvements in REveDataTable; * fixes in layout to remove unnecessary scrollbars. * implement tabular complete, show suggestions starting with ""i."" syntax. * provide public method list for tab complete of current and derived classes. * look for predefined column definition in current and base classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4808
https://github.com/root-project/root/pull/4808:111,security,compl,complete,111,"WebEve: Improvements in REveDataTable; * fixes in layout to remove unnecessary scrollbars. * implement tabular complete, show suggestions starting with ""i."" syntax. * provide public method list for tab complete of current and derived classes. * look for predefined column definition in current and base classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4808
https://github.com/root-project/root/pull/4808:202,security,compl,complete,202,"WebEve: Improvements in REveDataTable; * fixes in layout to remove unnecessary scrollbars. * implement tabular complete, show suggestions starting with ""i."" syntax. * provide public method list for tab complete of current and derived classes. * look for predefined column definition in current and base classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4808
https://github.com/root-project/root/pull/4810:116,availability,redund,redundant,116,"WebEve: clairfy code; Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id). Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4810
https://github.com/root-project/root/pull/4810:116,deployability,redundan,redundant,116,"WebEve: clairfy code; Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id). Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4810
https://github.com/root-project/root/pull/4810:116,reliability,redundan,redundant,116,"WebEve: clairfy code; Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id). Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4810
https://github.com/root-project/root/pull/4810:60,safety,avoid,avoid,60,"WebEve: clairfy code; Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id). Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4810
https://github.com/root-project/root/pull/4810:116,safety,redund,redundant,116,"WebEve: clairfy code; Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id). Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4810
https://github.com/root-project/root/pull/4810:177,security,access,accessed,177,"WebEve: clairfy code; Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id). Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4810
https://github.com/root-project/root/pull/4812:99,deployability,fail,failing,99,[cxxmodules] Remove the requres objc clause allowing to load libGCoco…; …a.so. This should fix the failing roottest-root-html-runMakeIndex on OSX with. -Druntime_cxxmodules=On. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4812
https://github.com/root-project/root/pull/4812:177,deployability,Patch,Patch,177,[cxxmodules] Remove the requres objc clause allowing to load libGCoco…; …a.so. This should fix the failing roottest-root-html-runMakeIndex on OSX with. -Druntime_cxxmodules=On. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4812
https://github.com/root-project/root/pull/4812:56,energy efficiency,load,load,56,[cxxmodules] Remove the requres objc clause allowing to load libGCoco…; …a.so. This should fix the failing roottest-root-html-runMakeIndex on OSX with. -Druntime_cxxmodules=On. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4812
https://github.com/root-project/root/pull/4812:56,performance,load,load,56,[cxxmodules] Remove the requres objc clause allowing to load libGCoco…; …a.so. This should fix the failing roottest-root-html-runMakeIndex on OSX with. -Druntime_cxxmodules=On. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4812
https://github.com/root-project/root/pull/4812:99,reliability,fail,failing,99,[cxxmodules] Remove the requres objc clause allowing to load libGCoco…; …a.so. This should fix the failing roottest-root-html-runMakeIndex on OSX with. -Druntime_cxxmodules=On. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4812
https://github.com/root-project/root/pull/4812:177,safety,Patch,Patch,177,[cxxmodules] Remove the requres objc clause allowing to load libGCoco…; …a.so. This should fix the failing roottest-root-html-runMakeIndex on OSX with. -Druntime_cxxmodules=On. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4812
https://github.com/root-project/root/pull/4812:177,security,Patch,Patch,177,[cxxmodules] Remove the requres objc clause allowing to load libGCoco…; …a.so. This should fix the failing roottest-root-html-runMakeIndex on OSX with. -Druntime_cxxmodules=On. Patch by Alexander Penev (@alexander-penev)!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4812
https://github.com/root-project/root/pull/4813:0,deployability,Releas,Release,0,Release notes update; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4813
https://github.com/root-project/root/pull/4813:14,deployability,updat,update,14,Release notes update; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4813
https://github.com/root-project/root/pull/4813:14,safety,updat,update,14,Release notes update; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4813
https://github.com/root-project/root/pull/4813:14,security,updat,update,14,Release notes update; [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4813
https://github.com/root-project/root/pull/4814:14,deployability,releas,release,14,[skip-ci] Fix release notes formatting ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4814
https://github.com/root-project/root/pull/4814:28,interoperability,format,formatting,28,[skip-ci] Fix release notes formatting ;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4814
https://github.com/root-project/root/pull/4815:9,energy efficiency,reduc,reducing,9,"[RF] Fix reducing a dataset with multipe ranges.; [ROOT-10517] When reducing a RooDataSet, selecting multiple. ranges separated by ',' was ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4815
https://github.com/root-project/root/pull/4815:68,energy efficiency,reduc,reducing,68,"[RF] Fix reducing a dataset with multipe ranges.; [ROOT-10517] When reducing a RooDataSet, selecting multiple. ranges separated by ',' was ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4815
https://github.com/root-project/root/pull/4816:81,modifiability,paramet,parameter,81,[webgui] search Chrome and Firefox browsers in default dirs; Use `PATH_SUFFIXES` parameter of `find_program` macro of cmake,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4816
https://github.com/root-project/root/pull/4817:201,energy efficiency,Current,Currently,201,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4817:63,integrability,wrap,wrapper,63,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4817:63,interoperability,wrapper,wrapper,63,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4817:127,interoperability,convers,conversions,127,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4817:85,usability,navigat,navigation,85,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4817:219,usability,navigat,navigation,219,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4817:278,usability,support,support,278,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4817:290,usability,visual,visualization,290,"Tessellated shape; Implemented tessellated shape in TGeo, as a wrapper shape without navigation functionality, allowing future conversions to/from Geant4 and VecGeom done by frameworks such as DD4HEP. Currently missing navigation functionality, but having ROOT/GDML persistence support and visualization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4817
https://github.com/root-project/root/pull/4819:9,energy efficiency,reduc,reducing,9,"[RF] Fix reducing a dataset with multipe ranges.; [ROOT-10517] When reducing a RooDataSet, selecting multiple. ranges separated by ',' was ignored. (cherry picked from commit 1da7698b7cbeccccc52fd9d66f826b92fdb521b8)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4819
https://github.com/root-project/root/pull/4819:68,energy efficiency,reduc,reducing,68,"[RF] Fix reducing a dataset with multipe ranges.; [ROOT-10517] When reducing a RooDataSet, selecting multiple. ranges separated by ',' was ignored. (cherry picked from commit 1da7698b7cbeccccc52fd9d66f826b92fdb521b8)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4819
https://github.com/root-project/root/pull/4820:9,energy efficiency,reduc,reducing,9,"[RF] Fix reducing a dataset with multipe ranges.; [ROOT-10517] When reducing a RooDataSet, selecting multiple. ranges separated by ',' was ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4820
https://github.com/root-project/root/pull/4820:68,energy efficiency,reduc,reducing,68,"[RF] Fix reducing a dataset with multipe ranges.; [ROOT-10517] When reducing a RooDataSet, selecting multiple. ranges separated by ',' was ignored.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4820
https://github.com/root-project/root/pull/4822:36,modifiability,pac,package,36,[webgui] add sap.tnt lib to openui5 package; It is used now in RBrowser,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4822
https://github.com/root-project/root/pull/4823:33,deployability,version,version,33,JSROOT for ROOT 6.20; Put proper version id,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4823
https://github.com/root-project/root/pull/4823:33,integrability,version,version,33,JSROOT for ROOT 6.20; Put proper version id,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4823
https://github.com/root-project/root/pull/4823:33,modifiability,version,version,33,JSROOT for ROOT 6.20; Put proper version id,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4823
https://github.com/root-project/root/pull/4825:89,modifiability,variab,variable,89,[RF] Fix shadow warning in RooTemplateProxy.; Old gcc issues a shadow warning if a local variable and a function have the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4825
https://github.com/root-project/root/pull/4826:89,modifiability,variab,variable,89,[RF] Fix shadow warning in RooTemplateProxy.; Old gcc issues a shadow warning if a local variable and a function have the same name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4826
https://github.com/root-project/root/pull/4827:54,energy efficiency,alloc,allocator,54,In StreamerInfoActions always respect vector's custom-allocator; See https://mattermost.web.cern.ch/root/pl/4xn9mxn6hfy1zgog8ybe915sar. and https://gitlab.cern.ch/olupton/DictProblems,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4827
https://github.com/root-project/root/pull/4827:47,usability,custom,custom-allocator,47,In StreamerInfoActions always respect vector's custom-allocator; See https://mattermost.web.cern.ch/root/pl/4xn9mxn6hfy1zgog8ybe915sar. and https://gitlab.cern.ch/olupton/DictProblems,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4827
https://github.com/root-project/root/pull/4828:14,deployability,build,build,14,[skip-ci] fix build procedure documentation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4828
https://github.com/root-project/root/pull/4828:30,usability,document,documentation,30,[skip-ci] fix build procedure documentation;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4828
https://github.com/root-project/root/pull/4830:958,modifiability,paramet,parameter,958,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:1016,modifiability,paramet,parameters,1016,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:265,performance,parallel,parallel,265,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:325,performance,time,times,325,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:556,performance,content,content,556,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:931,performance,content,contents,931,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:1326,performance,content,contents,1326,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:808,safety,valid,valid,808,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:1358,security,checksum,checksum,1358,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4830:399,usability,tool,tool,399,"[TMacro] Make TMacro class ""mergeable""; Hello,. this is a rather small, but I think very useful addition. One application of the TMacro class is to store the code that generated a ROOT file in the file itself to be later able to reproduce the analysis. However, in parallel computing you often execute the same macro several times and at the end merge the resulting files using the TFileMerger or a tool like hadd. Up to now the TMacro class was not mergeable and therefore merging 1000 files would create 1000 cycles of TMacro objects with the exact same content, which makes it hard to browse the ROOT file in a TBrowser for example. Of course I am aware that you cannot actually merge two different macros, but since the name of a TMacro is usually the filename of the macro stored, I cannot think of any valid case in which two TMacro objects with the same name in two files that are supposed to be merged would have different contents. Furthermore, the parameter attribute of the class is described as ""default parameters to execute this macro"" in TMacro::SetParams, so they should also not differ for two instances of the same macro. My implementation of the Merge function for the TMacro class just compares the TMacro objects that are supposed to be merged and issues warnings if there there are differences. The file contents are compared using the checksum of the TMacro object. All the best,. Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4830
https://github.com/root-project/root/pull/4832:202,availability,error,error,202,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:782,availability,Error,Error,782,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:41,deployability,version,version,41,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:142,deployability,fail,fails,142,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:178,deployability,version,versions,178,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:239,deployability,version,version,239,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:544,deployability,version,version,544,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:660,deployability,version,version,660,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:797,deployability,modul,modules,797,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:920,deployability,Stack,Stack,920,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1421,deployability,Version,Versions,1421,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1641,deployability,Version,Versions,1641,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1832,energy efficiency,core,core,1832,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:41,integrability,version,version,41,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:151,integrability,configur,configure,151,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:178,integrability,version,versions,178,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:239,integrability,version,version,239,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:544,integrability,version,version,544,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:568,integrability,compon,components,568,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:660,integrability,version,version,660,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:840,integrability,messag,message,840,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1421,integrability,Version,Versions,1421,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1641,integrability,Version,Versions,1641,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:568,interoperability,compon,components,568,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:840,interoperability,messag,message,840,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:41,modifiability,version,version,41,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:151,modifiability,configur,configure,151,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:178,modifiability,version,versions,178,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:239,modifiability,version,version,239,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:544,modifiability,version,version,544,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:568,modifiability,compon,components,568,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:660,modifiability,version,version,660,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:797,modifiability,modul,modules,797,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:858,modifiability,pac,package,858,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1003,modifiability,variab,variables,1003,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1421,modifiability,Version,Versions,1421,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1641,modifiability,Version,Versions,1641,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1817,modifiability,pac,packages,1817,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:202,performance,error,error,202,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:782,performance,Error,Error,782,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1089,performance,CACH,CACHED,1089,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:142,reliability,fail,fails,142,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:202,safety,error,error,202,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:782,safety,Error,Error,782,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:797,safety,modul,modules,797,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:151,security,configur,configure,151,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:202,usability,error,error,202,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:221,usability,Prefer,Preferring,221,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:268,usability,User,Users,268,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:782,usability,Error,Error,782,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1104,usability,User,Users,1104,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1235,usability,User,Users,1235,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4832:1729,usability,User,Users,1729,"Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; When passing `-DPYTHON_EXECUTABLE=/my/path/to/python2` on macOS ROOT fails to configure with newer CMake versions with a bizarre error of:. ```. -- Preferring Python version 3. -- Found Python: /Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python2.7 (found version ""2.7.15"") found components: Interpreter Development. -- Could NOT find Python (missing: Development) (found version ""2.7.15""). -- Looking for OpenGL. -- Could NOT find OpenGL (missing: OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR). CMake Error at cmake/modules/SearchInstalledSoftware.cmake:610 (message):. OpenGL package (with GLU) not found and opengl option required. Call Stack (most recent call first):. CMakeLists.txt:167 (include). ```. Looking at the variables I see a weird mixture of python 2 and python 3:. ```. //. PYTHON_EXECUTABLE-CACHED:STRING=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python. // Path to a program. Python_EXECUTABLE:FILEPATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/bin/python2.7. // Path to a file. Python_INCLUDE_DIR:PATH=/usr/local/Cellar/python/3.7.6/Frameworks/Python.framework/Versions/3.7/include/python3.7m. // Path to a library. Python_LIBRARY_DEBUG:FILEPATH=Python_LIBRARY_DEBUG-NOTFOUND. // Path to a library. Python_LIBRARY_RELEASE:FILEPATH=/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/libpython3.7m.dylib. // Path to a file. Python_NumPy_INCLUDE_DIR:PATH=/Users/christopherburr/miniconda3/conda-bld/root_1579698021552/_h_env/lib/python2.7/site-packages/numpy/core/include. ```. This PR includes one way of fixing the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4832
https://github.com/root-project/root/pull/4833:139,deployability,patch,patches,139,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t…; Cherry picked from Ivana's commit f245cb4. Ivana needs this in the patches branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4833
https://github.com/root-project/root/pull/4833:139,safety,patch,patches,139,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t…; Cherry picked from Ivana's commit f245cb4. Ivana needs this in the patches branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4833
https://github.com/root-project/root/pull/4833:139,security,patch,patches,139,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t…; Cherry picked from Ivana's commit f245cb4. Ivana needs this in the patches branch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4833
https://github.com/root-project/root/pull/4834:50,deployability,version,version,50,[master] Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; Port of #4832 to `master`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4834
https://github.com/root-project/root/pull/4834:50,integrability,version,version,50,[master] Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; Port of #4832 to `master`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4834
https://github.com/root-project/root/pull/4834:50,modifiability,version,version,50,[master] Ensure PYTHON_PREFER_VERSION matches the version from PYTHON_EXECUTABLE; Port of #4832 to `master`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4834
https://github.com/root-project/root/pull/4835:149,deployability,patch,patches,149,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t…; Cherry-picked from Ivana's commit f245cb4. Ivana needs this also in v6-18-00-patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4835
https://github.com/root-project/root/pull/4835:149,safety,patch,patches,149,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t…; Cherry-picked from Ivana's commit f245cb4. Ivana needs this also in v6-18-00-patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4835
https://github.com/root-project/root/pull/4835:149,security,patch,patches,149,"Fix in TGeoMCGeometry::Mixture(Int_t& kmat, const char* name, Float_t…; Cherry-picked from Ivana's commit f245cb4. Ivana needs this also in v6-18-00-patches",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4835
https://github.com/root-project/root/pull/4836:49,deployability,build,builds,49,[Backport 6.20] Disable SetLibraryPath for RPATH builds; Backport #4757,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4836
https://github.com/root-project/root/pull/4837:218,availability,state,state,218,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:105,deployability,contain,containing,105,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:85,energy efficiency,load,loading,85,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:218,integrability,state,state,218,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:292,modifiability,refact,refactoring,292,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:85,performance,load,loading,85,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:292,performance,refactor,refactoring,292,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:79,safety,avoid,avoid,79,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:135,safety,avoid,avoids,135,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:347,safety,compl,completely,347,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:347,security,compl,completely,347,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4837:253,usability,behavi,behavior,253,"ROOT-10514: Call TClass::ReadRules before the rootmap files to be read. ; This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4837
https://github.com/root-project/root/pull/4838:72,deployability,patch,patches,72,"[Backport 6.20] Minuit 2 standalone fix; Backport #4806, targeting 6-20 patches.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4838
https://github.com/root-project/root/pull/4838:72,safety,patch,patches,72,"[Backport 6.20] Minuit 2 standalone fix; Backport #4806, targeting 6-20 patches.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4838
https://github.com/root-project/root/pull/4838:72,security,patch,patches,72,"[Backport 6.20] Minuit 2 standalone fix; Backport #4806, targeting 6-20 patches.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4838
https://github.com/root-project/root/pull/4839:0,deployability,Updat,Update,0,Update RCompressionSettings struct with enum value of ZSTD default c…; …ompression settings,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4839
https://github.com/root-project/root/pull/4839:0,safety,Updat,Update,0,Update RCompressionSettings struct with enum value of ZSTD default c…; …ompression settings,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4839
https://github.com/root-project/root/pull/4839:0,security,Updat,Update,0,Update RCompressionSettings struct with enum value of ZSTD default c…; …ompression settings,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4839
https://github.com/root-project/root/pull/4840:14,deployability,releas,release,14,[skip-ci] Add release notes O.Shadura and B.P.Bockelman;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4840
https://github.com/root-project/root/pull/4841:148,availability,error,errors,148,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4841:54,energy efficiency,alloc,allocator,54,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4841:141,performance,memor,memory,141,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4841:148,performance,error,errors,148,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4841:148,safety,error,errors,148,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4841:47,usability,custom,custom-allocator,47,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4841:141,usability,memor,memory,141,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4841:148,usability,error,errors,148,In StreamerInfoActions always respect vector's custom-allocator; Previously the handling was inconsistent resulting in mis-matches. and thus memory errors. This fixes ROOT-10526.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4841
https://github.com/root-project/root/pull/4843:1,safety,test,test-ci,1,[test-ci] Dummy changes to test CI;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4843
https://github.com/root-project/root/pull/4843:27,safety,test,test,27,[test-ci] Dummy changes to test CI;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4843
https://github.com/root-project/root/pull/4843:1,testability,test,test-ci,1,[test-ci] Dummy changes to test CI;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4843
https://github.com/root-project/root/pull/4843:27,testability,test,test,27,[test-ci] Dummy changes to test CI;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4843
https://github.com/root-project/root/pull/4844:113,usability,tool,toolbar,113,Fix Jira report #10522; With two or more pads in one canvas it was not possible to create Graphical Cut from the toolbar. This PR also maps the marker style to the one displayed in the toolbar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4844
https://github.com/root-project/root/pull/4844:185,usability,tool,toolbar,185,Fix Jira report #10522; With two or more pads in one canvas it was not possible to create Graphical Cut from the toolbar. This PR also maps the marker style to the one displayed in the toolbar.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4844
https://github.com/root-project/root/pull/4845:4,security,sign,signals,4,Add signals required for the coming experimental pyroot;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4845
https://github.com/root-project/root/pull/4846:111,deployability,contain,container,111,Fix TGLVContainer::SelectEntry(); Select the TGLVEntry given as argument and de-select the previous one if the container is not in multi-selection mode. This should fix the [issue reported on the forum](https://root-forum.cern.ch/t/getting-selection-in-tglistview/18510/18):,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4846
https://github.com/root-project/root/pull/4849:11,deployability,updat,updates,11,Eve-7: add updates in v6-20 ReleaseNotes; Insert info about Eve-7 development in 3D Graphics Libraries chapter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4849
https://github.com/root-project/root/pull/4849:28,deployability,Releas,ReleaseNotes,28,Eve-7: add updates in v6-20 ReleaseNotes; Insert info about Eve-7 development in 3D Graphics Libraries chapter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4849
https://github.com/root-project/root/pull/4849:11,safety,updat,updates,11,Eve-7: add updates in v6-20 ReleaseNotes; Insert info about Eve-7 development in 3D Graphics Libraries chapter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4849
https://github.com/root-project/root/pull/4849:11,security,updat,updates,11,Eve-7: add updates in v6-20 ReleaseNotes; Insert info about Eve-7 development in 3D Graphics Libraries chapter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4849
https://github.com/root-project/root/pull/4850:24,safety,test,tests,24,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:38,safety,test,test,38,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:141,safety,test,tests,141,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:205,safety,test,test,205,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:242,safety,Test,Test,242,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:24,testability,test,tests,24,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:38,testability,test,test,38,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:141,testability,test,tests,141,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:205,testability,test,test,205,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4850:242,testability,Test,Test,242,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string; * Split dataframe_simple.cxx by moving tests for the Display action into. dataframe_display.cxx. * Add test for displaying a std::string. * Test added due to bug reported in ROOT-10527,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4850
https://github.com/root-project/root/pull/4851:119,deployability,patch,patch,119,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4851:4,performance,memor,memory,4,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4851:119,safety,patch,patch,119,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4851:119,security,patch,patch,119,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4851:137,security,sign,signature,137,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4851:159,testability,simpl,simplify,159,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4851:4,usability,memor,memory,4,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4851:159,usability,simpl,simplify,159,Fix memory leak in TPad::Print() method; One have to delete result of gSystem->ExpandPathName() function. Or as in the patch - use other signature. Little bit simplify the code,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4851
https://github.com/root-project/root/pull/4852:1,energy efficiency,core,core,1,[core] Call TClass::ReadRules before the rootmap files to be read.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4852
https://github.com/root-project/root/pull/4853:9,performance,memor,memory,9,Fix many memory leaks with gSystem->ExpandPathName() in GUI classes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4853
https://github.com/root-project/root/pull/4853:9,usability,memor,memory,9,Fix many memory leaks with gSystem->ExpandPathName() in GUI classes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4853
https://github.com/root-project/root/pull/4854:30,performance,memor,memory,30,Fix gSystem->ExpandPathName() memory leaks in TProof classes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4854
https://github.com/root-project/root/pull/4854:30,usability,memor,memory,30,Fix gSystem->ExpandPathName() memory leaks in TProof classes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4854
https://github.com/root-project/root/pull/4855:219,deployability,instal,installed,219,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:39,integrability,batch,batch,39,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:145,interoperability,format,formats,145,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:39,performance,batch,batch,39,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:1,reliability,RCa,RCanvas,1,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:236,safety,test,test,236,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:251,safety,Test,Tested,251,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:236,testability,test,test,236,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:251,testability,Test,Tested,251,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4855:157,usability,support,supported,157,"[RCanvas] new way to produce images in batch mode; Use headless Chrome browser, running from file system. No any HTTP server required. Following formats are supported: png, pdf, svg, jpeg, webp. Requires that chrome is installed on all test machines. Tested on Linux, Mac and Windows. Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4855
https://github.com/root-project/root/pull/4856:132,deployability,automat,automatically,132,"Fix gSystem->ExpandPathName() memory leak in roofitcore; Actual fix is in very end of PR, all others are formatting changes applied automatically by my editor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4856
https://github.com/root-project/root/pull/4856:105,interoperability,format,formatting,105,"Fix gSystem->ExpandPathName() memory leak in roofitcore; Actual fix is in very end of PR, all others are formatting changes applied automatically by my editor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4856
https://github.com/root-project/root/pull/4856:30,performance,memor,memory,30,"Fix gSystem->ExpandPathName() memory leak in roofitcore; Actual fix is in very end of PR, all others are formatting changes applied automatically by my editor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4856
https://github.com/root-project/root/pull/4856:132,testability,automat,automatically,132,"Fix gSystem->ExpandPathName() memory leak in roofitcore; Actual fix is in very end of PR, all others are formatting changes applied automatically by my editor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4856
https://github.com/root-project/root/pull/4856:30,usability,memor,memory,30,"Fix gSystem->ExpandPathName() memory leak in roofitcore; Actual fix is in very end of PR, all others are formatting changes applied automatically by my editor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4856
https://github.com/root-project/root/pull/4857:65,deployability,log,logic,65,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:134,deployability,modul,module,134,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:227,deployability,modul,modules,227,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:333,deployability,modul,module,333,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:486,deployability,modul,module-builtins,486,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:547,deployability,modul,module,547,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:693,deployability,fail,fail,693,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:134,modifiability,modul,module,134,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:227,modifiability,modul,modules,227,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:333,modifiability,modul,module,333,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:486,modifiability,modul,module-builtins,486,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:547,modifiability,modul,module,547,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:600,reliability,doe,does,600,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:693,reliability,fail,fail,693,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:65,safety,log,logic,65,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:134,safety,modul,module,134,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:227,safety,modul,modules,227,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:333,safety,modul,module,333,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:486,safety,modul,module-builtins,486,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:547,safety,modul,module,547,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:65,security,log,logic,65,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4857:65,testability,log,logic,65,"[Exp PyROOT][ROOT-10159] Revise check for IPython shell; The new logic checks if we are in the IPython shell only via the. `builtins` module, thus eliminating the second condition check,. given that IPython can also be in `sys.modules` if it is imported. from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via. ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,. and in the latter case it does not have `'__IPYTHON__'` as attribute,. which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4857
https://github.com/root-project/root/pull/4858:33,deployability,build,building,33,Backport #4749: [ROOT-10472] Fix building clingutils; Backport #4749: [ROOT-10472] Fix building clingutils,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4858
https://github.com/root-project/root/pull/4858:87,deployability,build,building,87,Backport #4749: [ROOT-10472] Fix building clingutils; Backport #4749: [ROOT-10472] Fix building clingutils,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4858
https://github.com/root-project/root/pull/4859:4,performance,memor,memory,4,Fix memory leak in TPad::Print() 6.20; Apply #4851 to v6.20,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4859
https://github.com/root-project/root/pull/4859:4,usability,memor,memory,4,Fix memory leak in TPad::Print() 6.20; Apply #4851 to v6.20,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4859
https://github.com/root-project/root/pull/4862:55,performance,memor,memory,55,"Initialize gProgName, gProgPath globals, fix potential memory leaks;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4862
https://github.com/root-project/root/pull/4862:55,usability,memor,memory,55,"Initialize gProgName, gProgPath globals, fix potential memory leaks;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4862
https://github.com/root-project/root/pull/4863:76,deployability,releas,released,76,"Fix memory leak in TMapFile; char* members fName, fTitle, fOption should be released in destructor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4863
https://github.com/root-project/root/pull/4863:4,performance,memor,memory,4,"Fix memory leak in TMapFile; char* members fName, fTitle, fOption should be released in destructor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4863
https://github.com/root-project/root/pull/4863:4,usability,memor,memory,4,"Fix memory leak in TMapFile; char* members fName, fTitle, fOption should be released in destructor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4863
https://github.com/root-project/root/pull/4866:11,performance,memor,memory,11,THtml: fix memory leak with ConcatFileName; Return value should be deleted,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4866
https://github.com/root-project/root/pull/4866:11,usability,memor,memory,11,THtml: fix memory leak with ConcatFileName; Return value should be deleted,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4866
https://github.com/root-project/root/pull/4867:16,performance,memor,memory,16,TClassTree: fix memory leak after gSystem->Which() call;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4867
https://github.com/root-project/root/pull/4867:16,usability,memor,memory,16,TClassTree: fix memory leak after gSystem->Which() call;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4867
https://github.com/root-project/root/pull/4868:66,integrability,interfac,interface,66,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:195,integrability,interfac,interface,195,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:309,integrability,interfac,interface,309,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:66,interoperability,interfac,interface,66,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:195,interoperability,interfac,interface,195,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:309,interoperability,interfac,interface,309,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:66,modifiability,interfac,interface,66,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:195,modifiability,interfac,interface,195,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:220,modifiability,responsibil,responsibility,220,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:309,modifiability,interfac,interface,309,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:134,safety,safe,safely,134,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4868:215,usability,user,user,215,Deprecate TInterpreter::EnableAutoLoading.; The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4868
https://github.com/root-project/root/pull/4869:108,deployability,build,build,108,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:183,deployability,build,build,183,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:274,deployability,build,build,274,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:474,deployability,build,build,474,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:648,deployability,build,build,648,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:398,energy efficiency,Cpu,Cpu,398,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:572,energy efficiency,Cpu,Cpu,572,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:746,energy efficiency,Cpu,Cpu,746,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:384,interoperability,Architectur,Architectures,384,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:558,interoperability,Architectur,Architectures,558,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:732,interoperability,Architectur,Architectures,732,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:398,performance,Cpu,Cpu,398,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:572,performance,Cpu,Cpu,572,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:746,performance,Cpu,Cpu,746,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:13,reliability,pra,pragma,13,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:447,reliability,pra,pragma,447,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:621,reliability,pra,pragma,621,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:795,reliability,pra,pragma,795,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:93,usability,User,Users,93,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:168,usability,User,Users,168,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:259,usability,User,Users,259,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:340,usability,User,Users,340,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:459,usability,User,Users,459,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:514,usability,User,Users,514,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:633,usability,User,Users,633,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4869:688,usability,User,Users,688,"Fix ""unknown pragma"" warnings on Windows; This fixes the following Warnings on Windows:. ""C:\Users\bellenot\build\debug\ALL_BUILD.vcxproj"" (default target) (1) ->. ""C:\Users\bellenot\build\debug\math\genetic\G__Genetic.vcxproj"" (default target) (322) ->. ""C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj"" (default target) (323) ->. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(25,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(26,9): warning C4068: unknown pragma. [C:\Users\bellenot\build\debug\tmva\tmva\TMVA.vcxproj]. C:\Users\bellenot\git\master\tmva\tmva\src\DNN\Architectures\Cpu/Arithmetic.hxx(30,9): warning C4068: unknown pragma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4869
https://github.com/root-project/root/pull/4871:326,availability,down,down,326,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:398,availability,down,down,398,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:463,availability,Restor,Restore,463,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:552,availability,state,state,552,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:626,availability,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:738,availability,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:901,availability,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:924,availability,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1131,availability,state,state,1131,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1252,availability,state,state,1252,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1277,availability,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1288,availability,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:177,deployability,stack,stack,177,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:360,deployability,patch,patch,360,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:978,deployability,stack,stack,978,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1155,deployability,continu,continues,1155,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:552,integrability,state,state,552,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1131,integrability,state,state,1131,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1252,integrability,state,state,1252,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:626,performance,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:738,performance,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:901,performance,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:924,performance,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1277,performance,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1288,performance,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:463,reliability,Restor,Restore,463,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:754,reliability,pra,practice,754,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:29,safety,except,exception,29,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:59,safety,except,exception,59,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:200,safety,except,exception,200,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:360,safety,patch,patch,360,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:626,safety,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:652,safety,except,exception,652,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:738,safety,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:901,safety,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:924,safety,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:951,safety,except,exception,951,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1059,safety,except,exception,1059,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1277,safety,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1288,safety,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1311,safety,except,exception,1311,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1346,safety,except,exception,1346,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:360,security,patch,patch,360,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:607,usability,custom,customize,607,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:626,usability,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:738,usability,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:901,usability,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:924,usability,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1069,usability,support,support,1069,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1277,usability,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4871:1288,usability,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4871
https://github.com/root-project/root/pull/4872:7,energy efficiency,alloc,alloc,7,Custom alloc vector v618;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4872
https://github.com/root-project/root/pull/4872:0,usability,Custom,Custom,0,Custom alloc vector v618;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4872
https://github.com/root-project/root/pull/4873:7,energy efficiency,alloc,alloc,7,Custom alloc vector v618;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4873
https://github.com/root-project/root/pull/4873:0,usability,Custom,Custom,0,Custom alloc vector v618;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4873
https://github.com/root-project/root/pull/4874:8,integrability,interfac,interface,8,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:448,integrability,interfac,interface,448,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:8,interoperability,interfac,interface,8,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:448,interoperability,interfac,interface,448,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:8,modifiability,interfac,interface,8,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:448,modifiability,interfac,interface,448,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:1101,modifiability,refact,refactored,1101,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:319,performance,memor,memory,319,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:860,performance,memor,memory,860,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:1101,performance,refactor,refactored,1101,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:286,reliability,doe,does,286,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:476,safety,safe,safe,476,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:319,usability,memor,memory,319,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4874:860,usability,memor,memory,860,"TSystem interface improvements; There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:. * `ExapndPathName()`. * `DirName()` (Windows only, actually a bug). * `Which()`. * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks. I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods. Means return TString instead of `char *` or `const char *`. Keep old methods for a while, but replace in ROOT code to new one. Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4874
https://github.com/root-project/root/pull/4875:31,integrability,interfac,interfaces,31,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4875:236,integrability,interfac,interface,236,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4875:31,interoperability,interfac,interfaces,31,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4875:236,interoperability,interfac,interface,236,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4875:31,modifiability,interfac,interfaces,31,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4875:236,modifiability,interfac,interface,236,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4875:124,performance,time,time,124,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4875:13,usability,document,documentation,13,[RF] Improve documentation and interfaces.; Collection of three short improvements:. - Better docs for SPlot. - Shorten run time of rf402 tutorial by removing unnecessary printouts. - [ROOT-10521] Better const-correctness in RooAbsData interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4875
https://github.com/root-project/root/pull/4876:127,availability,error,error,127,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:166,availability,Error,Error,166,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:37,deployability,configurat,configuration,37,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:92,deployability,configurat,configuration,92,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:37,integrability,configur,configuration,37,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:92,integrability,configur,configuration,92,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:37,modifiability,configur,configuration,37,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:92,modifiability,configur,configuration,92,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:51,performance,time,time,51,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:106,performance,time,time,106,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:127,performance,error,error,127,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:166,performance,Error,Error,166,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:114,safety,avoid,avoid,114,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:127,safety,error,error,127,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:166,safety,Error,Error,166,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:37,security,configur,configuration,37,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:92,security,configur,configuration,92,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:127,usability,error,error,127,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4876:166,usability,Error,Error,166,[ROOT-10529] Copy class.rules during configuration time; We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4876
https://github.com/root-project/root/pull/4877:303,deployability,infrastructur,infrastructure,303,"Move RRawFile from Experimental::Detail to Internal; In preparation for fixing ROOT-10520, this PR moves the `RRawFile` classes out of the `Experimental` namespace into `Internal`. A follow-up pull request will modify the RDF SQLite data source such that it uses RRawFile, which in turn uses the plugin infrastructure to load the Davix libraries when necessary. Should be merged before #4878.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4877
https://github.com/root-project/root/pull/4877:321,energy efficiency,load,load,321,"Move RRawFile from Experimental::Detail to Internal; In preparation for fixing ROOT-10520, this PR moves the `RRawFile` classes out of the `Experimental` namespace into `Internal`. A follow-up pull request will modify the RDF SQLite data source such that it uses RRawFile, which in turn uses the plugin infrastructure to load the Davix libraries when necessary. Should be merged before #4878.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4877
https://github.com/root-project/root/pull/4877:296,interoperability,plug,plugin,296,"Move RRawFile from Experimental::Detail to Internal; In preparation for fixing ROOT-10520, this PR moves the `RRawFile` classes out of the `Experimental` namespace into `Internal`. A follow-up pull request will modify the RDF SQLite data source such that it uses RRawFile, which in turn uses the plugin infrastructure to load the Davix libraries when necessary. Should be merged before #4878.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4877
https://github.com/root-project/root/pull/4877:321,performance,load,load,321,"Move RRawFile from Experimental::Detail to Internal; In preparation for fixing ROOT-10520, this PR moves the `RRawFile` classes out of the `Experimental` namespace into `Internal`. A follow-up pull request will modify the RDF SQLite data source such that it uses RRawFile, which in turn uses the plugin infrastructure to load the Davix libraries when necessary. Should be merged before #4878.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4877
https://github.com/root-project/root/pull/4877:211,security,modif,modify,211,"Move RRawFile from Experimental::Detail to Internal; In preparation for fixing ROOT-10520, this PR moves the `RRawFile` classes out of the `Experimental` namespace into `Internal`. A follow-up pull request will modify the RDF SQLite data source such that it uses RRawFile, which in turn uses the plugin infrastructure to load the Davix libraries when necessary. Should be merged before #4878.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4877
https://github.com/root-project/root/pull/4878:99,deployability,depend,dependency,99,[DF] Use RRawFile in SQlite data source; This is the follow-up to #4877. It removes the hard Davix dependency from RDataFrame.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4878
https://github.com/root-project/root/pull/4878:99,integrability,depend,dependency,99,[DF] Use RRawFile in SQlite data source; This is the follow-up to #4877. It removes the hard Davix dependency from RDataFrame.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4878
https://github.com/root-project/root/pull/4878:99,modifiability,depend,dependency,99,[DF] Use RRawFile in SQlite data source; This is the follow-up to #4877. It removes the hard Davix dependency from RDataFrame.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4878
https://github.com/root-project/root/pull/4878:99,safety,depend,dependency,99,[DF] Use RRawFile in SQlite data source; This is the follow-up to #4877. It removes the hard Davix dependency from RDataFrame.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4878
https://github.com/root-project/root/pull/4878:99,testability,depend,dependency,99,[DF] Use RRawFile in SQlite data source; This is the follow-up to #4877. It removes the hard Davix dependency from RDataFrame.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4878
https://github.com/root-project/root/pull/4879:448,deployability,log,logic,448,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4879:440,energy efficiency,current,current,440,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4879:454,reliability,doe,does,454,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4879:54,safety,test,test,54,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4879:448,safety,log,logic,448,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4879:448,security,log,logic,448,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4879:54,testability,test,test,54,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4879:448,testability,log,logic,448,[ROOT-10508] Fix TTreeProcessorMT with friends; Add a test to reproduce the issue described in [ROOT-10508](https://sft.its.cern.ch/jira/browse/ROOT-10508?jql=project%20%3D%20ROOT%20AND%20issuetype%20%3D%20Bug%20AND%20status%20%3D%20Open%20AND%20resolution%20%3D%20Unresolved%20AND%20text%20~%20%22RDataFrame%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC). Fixed the issue for the case if the friend chain is unnamed since then the current logic does not retrieve the name of the underlying tree correctly. See the jira ticket for the full discussion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4879
https://github.com/root-project/root/pull/4880:24,availability,error,error,24,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:70,availability,failur,failure,70,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:53,deployability,instal,installed,53,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:70,deployability,fail,failure,70,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:155,interoperability,plug,plugins,155,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:24,performance,error,error,24,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:70,performance,failur,failure,70,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:70,reliability,fail,failure,70,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:24,safety,error,error,24,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:64,safety,Avoid,Avoid,64,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4880:24,usability,error,error,24,WebGui - do not produce error output when chrome not installed; Avoid failure of v7/line.cxx tutorial in such case. Disable headless in CEF and QWebEngine plugins. Both do not provide any functionality without X-server running,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4880
https://github.com/root-project/root/pull/4881:35,availability,operat,operator,35,Fix in TGApplication; Wrong delete operator was used (it is @a5db401 commit). To avoid any confusion in the future - just use TString instead,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4881
https://github.com/root-project/root/pull/4881:81,safety,avoid,avoid,81,Fix in TGApplication; Wrong delete operator was used (it is @a5db401 commit). To avoid any confusion in the future - just use TString instead,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4881
https://github.com/root-project/root/pull/4882:33,availability,state,state,33,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:193,availability,failur,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1532,availability,state,state,1532,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1719,availability,state,state,1719,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1946,availability,state,state,1946,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2016,availability,state,state,2016,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2142,availability,state,state,2142,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2180,availability,state,state,2180,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:193,deployability,fail,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:301,energy efficiency,load,loading,301,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:941,energy efficiency,load,loading,941,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:33,integrability,state,state,33,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1532,integrability,state,state,1532,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1719,integrability,state,state,1719,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1946,integrability,state,state,1946,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2016,integrability,state,state,2016,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2142,integrability,state,state,2142,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2180,integrability,state,state,2180,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:845,interoperability,convers,conversion,845,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2100,modifiability,concern,concerned,2100,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:193,performance,failur,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:301,performance,load,loading,301,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:941,performance,load,loading,941,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:16,reliability,Diagno,DiagnosticEngine,16,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:193,reliability,fail,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:656,reliability,pra,pragma,656,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:667,reliability,diagno,diagnostic,667,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:709,reliability,pra,pragma,709,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:720,reliability,diagno,diagnostic,720,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:807,reliability,pra,pragma,807,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:818,reliability,diagno,diagnostic,818,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1087,reliability,pra,pragma,1087,"0504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1100,reliability,diagno,diagnostic,1100,"t:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is conce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1188,reliability,pra,pragma,1188,"t failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state chang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1201,reliability,diagno,diagnostic,1201,"ay. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing proces",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1293,reliability,pra,pragma,1293,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1306,reliability,diagno,diagnostic,1306,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1415,reliability,pra,pragma,1415,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1426,reliability,diagno,diagnostic,1426,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1850,reliability,pra,pragma,1850,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:16,testability,Diagno,DiagnosticEngine,16,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:186,testability,assert,assert,186,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:667,testability,diagno,diagnostic,667,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:720,testability,diagno,diagnostic,720,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:818,testability,diagno,diagnostic,818,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1100,testability,diagno,diagnostic,1100,"t:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is conce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1201,testability,diagno,diagnostic,1201,"ay. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing proces",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1306,testability,diagno,diagnostic,1306,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1426,testability,diagno,diagnostic,1426,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1498,testability,assert,assert,1498,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2100,testability,concern,concerned,2100,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:4,usability,support,support,4,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:564,usability,interact,interactive,564,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:988,usability,interact,interactive,988,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1615,usability,interact,interactive,1615,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:1783,usability,interact,interactive,1783,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4882:2066,usability,interact,interactive,2066,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4882
https://github.com/root-project/root/pull/4883:33,availability,state,state,33,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:193,availability,failur,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1532,availability,state,state,1532,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1719,availability,state,state,1719,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1946,availability,state,state,1946,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2016,availability,state,state,2016,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2142,availability,state,state,2142,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2180,availability,state,state,2180,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:193,deployability,fail,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:301,energy efficiency,load,loading,301,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:941,energy efficiency,load,loading,941,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:33,integrability,state,state,33,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1532,integrability,state,state,1532,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1719,integrability,state,state,1719,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1946,integrability,state,state,1946,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2016,integrability,state,state,2016,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2142,integrability,state,state,2142,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2180,integrability,state,state,2180,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:845,interoperability,convers,conversion,845,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2100,modifiability,concern,concerned,2100,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:193,performance,failur,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:301,performance,load,loading,301,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:941,performance,load,loading,941,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:16,reliability,Diagno,DiagnosticEngine,16,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:193,reliability,fail,failure,193,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:656,reliability,pra,pragma,656,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:667,reliability,diagno,diagnostic,667,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:709,reliability,pra,pragma,709,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:720,reliability,diagno,diagnostic,720,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:807,reliability,pra,pragma,807,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:818,reliability,diagno,diagnostic,818,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1087,reliability,pra,pragma,1087,"0504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line include",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1100,reliability,diagno,diagnostic,1100,"t:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is conce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1188,reliability,pra,pragma,1188,"t failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state chang",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1201,reliability,diagno,diagnostic,1201,"ay. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing proces",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1293,reliability,pra,pragma,1293,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1306,reliability,diagno,diagnostic,1306,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1415,reliability,pra,pragma,1415,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1426,reliability,diagno,diagnostic,1426,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1850,reliability,pra,pragma,1850,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:16,testability,Diagno,DiagnosticEngine,16,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:186,testability,assert,assert,186,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:667,testability,diagno,diagnostic,667,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:720,testability,diagno,diagnostic,720,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:818,testability,diagno,diagnostic,818,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1100,testability,diagno,diagnostic,1100,"t:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is conce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1201,testability,diagno,diagnostic,1201,"ay. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing proces",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1306,testability,diagno,diagnostic,1306,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1426,testability,diagno,diagnostic,1426,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1498,testability,assert,assert,1498,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2100,testability,concern,concerned,2100,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:4,usability,support,support,4,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:564,usability,interact,interactive,564,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:988,usability,interact,interactive,988,"Add support for DiagnosticEngine state change within recursive parsing.; This fixes ROOT-10504. the script:. ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away. struct TTUBE {};. }}. ```. reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1615,usability,interact,interactive,1615,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:1783,usability,interact,interactive,1783,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4883:2066,usability,interact,interactive,2066,"'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:. ```. static const char* fwdDeclCode = R""DICTFWDDCLS(. extern int __Cling_Autoloading_Map;. .... ```. The order of parsing is (with many ellipsis):. ```. ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”. standalone.C : line 1 : #pragma GCC diagnostic push. standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map. standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map. standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string. input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map. input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map. input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map. ```. The last line triggers the assert because when recording the state change, it records it as being from. ```. standalone.C : line 12. ""<<< cling interactive line includer >>>"" : line 9. ```. but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),. which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interactive line includer >>>"" is concerned. For that pseudo-file, the last state change happened line 10 but the state change bbeing processed happens line 9 (where Standalone.C is being included).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4883
https://github.com/root-project/root/pull/4885:298,availability,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4885
https://github.com/root-project/root/pull/4885:313,energy efficiency,model,model,313,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4885
https://github.com/root-project/root/pull/4885:195,performance,time,times,195,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4885
https://github.com/root-project/root/pull/4885:298,performance,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4885
https://github.com/root-project/root/pull/4885:298,safety,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4885
https://github.com/root-project/root/pull/4885:313,security,model,model,313,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4885
https://github.com/root-project/root/pull/4885:298,usability,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4885
https://github.com/root-project/root/pull/4886:298,availability,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4886
https://github.com/root-project/root/pull/4886:313,energy efficiency,model,model,313,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4886
https://github.com/root-project/root/pull/4886:195,performance,time,times,195,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4886
https://github.com/root-project/root/pull/4886:298,performance,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4886
https://github.com/root-project/root/pull/4886:298,safety,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4886
https://github.com/root-project/root/pull/4886:313,security,model,model,313,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4886
https://github.com/root-project/root/pull/4886:298,usability,error,errors,298,"[RF] Fix fits with multiple ranges in RooChi2Var.; [ROOT-10518] Due to overwriting a function-local static, range strings. for multi-range fits would be lost. The full range was fitted multiple. times. This results in exactly the same coefficients as when fitting the. full range, but in different errors, as the model is fitted repeatedly. (cherry picked from commit 4f53b0fd7e01a4ba40656940359eaa5567072d75)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4886
https://github.com/root-project/root/pull/4887:83,deployability,manag,management,83,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:83,energy efficiency,manag,management,83,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:97,energy efficiency,alloc,allocated,97,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:115,integrability,buffer,buffers,115,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:14,performance,memor,memory,14,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:83,safety,manag,management,83,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:148,safety,detect,detect,148,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:148,security,detect,detect,148,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4887:14,usability,memor,memory,14,Fix different memory leaks in GUI and related classes; Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4887
https://github.com/root-project/root/pull/4888:49,availability,sla,slashes,49,Fix for ROOT-10494; TUrl silently removes double slashes ('//') in the file field. This makes string comparisons later on failing unless everything is done with TUrl derived quantities.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4888
https://github.com/root-project/root/pull/4888:122,deployability,fail,failing,122,Fix for ROOT-10494; TUrl silently removes double slashes ('//') in the file field. This makes string comparisons later on failing unless everything is done with TUrl derived quantities.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4888
https://github.com/root-project/root/pull/4888:49,reliability,sla,slashes,49,Fix for ROOT-10494; TUrl silently removes double slashes ('//') in the file field. This makes string comparisons later on failing unless everything is done with TUrl derived quantities.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4888
https://github.com/root-project/root/pull/4888:122,reliability,fail,failing,122,Fix for ROOT-10494; TUrl silently removes double slashes ('//') in the file field. This makes string comparisons later on failing unless everything is done with TUrl derived quantities.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4888
https://github.com/root-project/root/pull/4889:104,safety,avoid,avoid,104,Replace Which() with FindFile() calls; Replace gSystem->Which() with gSystem->FindFile() calls. Idea to avoid methods which returns `char *` value which should be deleted. While there is already alternative - use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4889
https://github.com/root-project/root/pull/4890:0,deployability,Updat,Update,0,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4890:18,deployability,patch,patch,18,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4890:27,reliability,Diagno,DiagnosticsEngine,27,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4890:0,safety,Updat,Update,0,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4890:18,safety,patch,patch,18,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4890:0,security,Updat,Update,0,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4890:18,security,patch,patch,18,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4890:27,testability,Diagno,DiagnosticsEngine,27,Update comment in patch to DiagnosticsEngine::DiagStateMap::append;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4890
https://github.com/root-project/root/pull/4891:12,safety,except,exception,12,Interpreter exception v620;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4891
https://github.com/root-project/root/pull/4892:325,availability,down,down,325,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:397,availability,down,down,397,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:462,availability,Restor,Restore,462,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:551,availability,state,state,551,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:625,availability,error,error,625,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:737,availability,error,error,737,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:900,availability,error,error,900,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:923,availability,error,error,923,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1130,availability,state,state,1130,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1251,availability,state,state,1251,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1276,availability,Error,Error,1276,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1287,availability,Error,Error,1287,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:176,deployability,stack,stack,176,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:359,deployability,patch,patch,359,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:977,deployability,stack,stack,977,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1154,deployability,continu,continues,1154,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:551,integrability,state,state,551,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1130,integrability,state,state,1130,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1251,integrability,state,state,1251,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:625,performance,error,error,625,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:737,performance,error,error,737,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:900,performance,error,error,900,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:923,performance,error,error,923,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1276,performance,Error,Error,1276,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1287,performance,Error,Error,1287,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:462,reliability,Restor,Restore,462,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:753,reliability,pra,practice,753,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:29,safety,except,exception,29,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:59,safety,except,exception,59,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:199,safety,except,exception,199,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:359,safety,patch,patch,359,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:625,safety,error,error,625,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:651,safety,except,exception,651,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:737,safety,error,error,737,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:900,safety,error,error,900,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:923,safety,error,error,923,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:950,safety,except,exception,950,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1058,safety,except,exception,1058,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1276,safety,Error,Error,1276,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1287,safety,Error,Error,1287,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1310,safety,except,exception,1310,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1345,safety,except,exception,1345,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:359,security,patch,patch,359,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:606,usability,custom,customize,606,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:625,usability,error,error,625,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:737,usability,error,error,737,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:900,usability,error,error,900,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:923,usability,error,error,923,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1068,usability,support,support,1068,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1276,usability,Error,Error,1276,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4892:1287,usability,Error,Error,1287,"Compile Interpreter.cpp with exception on. Fix script with exception with ROOT Mutex on.; . Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4892
https://github.com/root-project/root/pull/4893:326,availability,down,down,326,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:398,availability,down,down,398,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:463,availability,Restor,Restore,463,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:552,availability,state,state,552,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:626,availability,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:738,availability,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:901,availability,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:924,availability,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1131,availability,state,state,1131,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1252,availability,state,state,1252,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1277,availability,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1288,availability,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:177,deployability,stack,stack,177,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:360,deployability,patch,patch,360,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:978,deployability,stack,stack,978,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1155,deployability,continu,continues,1155,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:552,integrability,state,state,552,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1131,integrability,state,state,1131,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1252,integrability,state,state,1252,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:626,performance,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:738,performance,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:901,performance,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:924,performance,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1277,performance,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1288,performance,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:463,reliability,Restor,Restore,463,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:754,reliability,pra,practice,754,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:29,safety,except,exception,29,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:59,safety,except,exception,59,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:200,safety,except,exception,200,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:360,safety,patch,patch,360,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:626,safety,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:652,safety,except,exception,652,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:738,safety,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:901,safety,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:924,safety,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:951,safety,except,exception,951,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1059,safety,except,exception,1059,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1277,safety,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1288,safety,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1311,safety,except,exception,1311,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1346,safety,except,exception,1346,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:360,security,patch,patch,360,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:607,usability,custom,customize,607,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:626,usability,error,error,626,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:738,usability,error,error,738,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:901,usability,error,error,901,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:924,usability,error,error,924,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1069,usability,support,support,1069,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1277,usability,Error,Error,1277,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4893:1288,usability,Error,Error,1288,"Compile Interpreter.cpp with exception on. Fix script with exception…; … with ROOT Mutex on. Compiling Interpreter.cpp allows RunFunction and friends to be actually seen during stack unwind after an. exception has been thrown, directly or indirectly, by interpreter code. This allows for the RAII objects to be. properly tear down. In particular, without this patch, EnterUserCodeRAII was not tear down and thus the callbacks were not executed. Consequently the ""Restore the ROOT global Mutex"" callback was not executed leaving the Mutex in an invalid state. In case of ART application, in most cases, they customize the ROOT error handler to throw an exception. This. resulted (without this fix) in crash when import a GDML file with an error in it. In practice what we have is:. call to TGeo Import. which calls the interpreter for some of its functionality. which calls gdml code. which reports an error. which leads the error handler to thrown an exception. ... some of the stack are properly unwound ... some are not (because they were not compiled with exception support on) .... ... so the ROOT Mutex goes into an incorrect state ... ... unwinding continues. ... unwinding reached a frame that Unlock the mutex. Mutex notices it is an incorrect state. so it reports the Error. the Error handler throw an exception ....... and because this exception is being thrown during the unwind, it is fatal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4893
https://github.com/root-project/root/pull/4894:9,deployability,Updat,Update,9,[skip-ci]Update documentation for enum ROOT::RCompressionSetting::ELevel::EValues;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4894
https://github.com/root-project/root/pull/4894:9,safety,Updat,Update,9,[skip-ci]Update documentation for enum ROOT::RCompressionSetting::ELevel::EValues;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4894
https://github.com/root-project/root/pull/4894:9,security,Updat,Update,9,[skip-ci]Update documentation for enum ROOT::RCompressionSetting::ELevel::EValues;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4894
https://github.com/root-project/root/pull/4894:16,usability,document,documentation,16,[skip-ci]Update documentation for enum ROOT::RCompressionSetting::ELevel::EValues;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4894
https://github.com/root-project/root/pull/4895:480,availability,failur,failures,480,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:480,deployability,fail,failures,480,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:21,integrability,Inject,Inject,21,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:480,performance,failur,failures,480,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:480,reliability,fail,failures,480,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:112,safety,compl,completed,112,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:474,safety,test,tests,474,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:21,security,Inject,Inject,21,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:112,security,compl,completed,112,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4895:474,testability,test,tests,474,"[PyROOT][ROOT-10109] Inject missing overloads in TH2 and more; In order to solve ROOT-10109, and until #3640 is completed and merged, we temporarily add a pythonisation both in PyROOT and experimental PyROOT to get the overloads for GetBinErrorUp. and GetBinErrorLow of TH1 obtained via using declarations from TH2. On the other hand (and unrelated to the change above), we eliminate the use of `TInterpreter::EnableAutoLoading` from cppyy in experimental PyROOT, given the tests failures seen last night:. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/393/. due to the deprecation introduced by https://github.com/root-project/root/pull/4868",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4895
https://github.com/root-project/root/pull/4896:4,performance,memor,memory,4,Fix memory leaks with gSystem->ConcatFileName() calls;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4896
https://github.com/root-project/root/pull/4896:4,usability,memor,memory,4,Fix memory leaks with gSystem->ConcatFileName() calls;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4896
https://github.com/root-project/root/pull/4897:108,availability,error,error,108,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:79,deployability,releas,released,79,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:65,integrability,buffer,buffer,65,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:139,integrability,repositor,repository,139,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:35,interoperability,Platform,PlatformWin,35,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:139,interoperability,repositor,repository,139,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:4,performance,memor,memory,4,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:108,performance,error,error,108,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:108,safety,error,error,108,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:4,usability,memor,memory,4,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4897:108,usability,error,error,108,"Fix memory leak in cling/lib/Utils/PlatformWin.cpp; Seems to be, buffer is not released correctly. I guess, error should be fixed in cling repository first",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4897
https://github.com/root-project/root/pull/4899:106,deployability,releas,released,106,"Prevent potential leak when TLinearFitter::SetFormula called; If fFormula already allocated, it should be released",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4899
https://github.com/root-project/root/pull/4899:82,energy efficiency,alloc,allocated,82,"Prevent potential leak when TLinearFitter::SetFormula called; If fFormula already allocated, it should be released",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4899
https://github.com/root-project/root/pull/4899:0,safety,Prevent,Prevent,0,"Prevent potential leak when TLinearFitter::SetFormula called; If fFormula already allocated, it should be released",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4899
https://github.com/root-project/root/pull/4899:0,security,Preven,Prevent,0,"Prevent potential leak when TLinearFitter::SetFormula called; If fFormula already allocated, it should be released",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4899
https://github.com/root-project/root/pull/4900:14,performance,memor,memory,14,Fix different memory leaks;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4900
https://github.com/root-project/root/pull/4900:14,usability,memor,memory,14,Fix different memory leaks;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4900
https://github.com/root-project/root/pull/4901:35,availability,error,error,35,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4901:80,deployability,releas,released,80,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4901:65,integrability,buffer,buffer,65,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4901:4,performance,memor,memory,4,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4901:35,performance,error,error,35,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4901:35,safety,error,error,35,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4901:4,usability,memor,memory,4,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4901:35,usability,error,error,35,Fix memory leak in TLatex; In most error situations preallocated buffer was not released,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4901
https://github.com/root-project/root/pull/4902:105,deployability,releas,released,105,"Fix small leak in TLeaf::GenerateOffsetArrayBase; Appears when method returns nullptr, but buffer is not released. Also improve TTreeRow methods concerning reallocation or cleaning of memory",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4902
https://github.com/root-project/root/pull/4902:91,integrability,buffer,buffer,91,"Fix small leak in TLeaf::GenerateOffsetArrayBase; Appears when method returns nullptr, but buffer is not released. Also improve TTreeRow methods concerning reallocation or cleaning of memory",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4902
https://github.com/root-project/root/pull/4902:145,modifiability,concern,concerning,145,"Fix small leak in TLeaf::GenerateOffsetArrayBase; Appears when method returns nullptr, but buffer is not released. Also improve TTreeRow methods concerning reallocation or cleaning of memory",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4902
https://github.com/root-project/root/pull/4902:184,performance,memor,memory,184,"Fix small leak in TLeaf::GenerateOffsetArrayBase; Appears when method returns nullptr, but buffer is not released. Also improve TTreeRow methods concerning reallocation or cleaning of memory",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4902
https://github.com/root-project/root/pull/4902:145,testability,concern,concerning,145,"Fix small leak in TLeaf::GenerateOffsetArrayBase; Appears when method returns nullptr, but buffer is not released. Also improve TTreeRow methods concerning reallocation or cleaning of memory",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4902
https://github.com/root-project/root/pull/4902:184,usability,memor,memory,184,"Fix small leak in TLeaf::GenerateOffsetArrayBase; Appears when method returns nullptr, but buffer is not released. Also improve TTreeRow methods concerning reallocation or cleaning of memory",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4902
https://github.com/root-project/root/pull/4903:47,availability,operat,operator,47,Fix leak in testUnfold6.C macro - wrong delete operator used;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4903
https://github.com/root-project/root/pull/4906:179,modifiability,deco,decomposition,179,Improve TDecompQRH: add function for computing the correct orthogonal Q matrix; Improve TDecompQRH by implementing a method returning the orthogonal matrix Q obtained from the QR decomposition. The internal matrix fQ is instead not the orthogonal matrix as one would expect. It is used instead to compute the correct Q in the new function. TDecompQRH::GetOrthogonalMatrix(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4906
https://github.com/root-project/root/pull/4908:85,deployability,releas,released,85,"Fix memory leak in TUrl::SetUrl(); When url has options before, it was not correctly released. Following code always produced memory leak:. TUrl url;. url.SetUrl(""http://server/file?arg=1&arg2=2"");. url.SetUrl(""http://server/file?arg=1&arg2=2"");. Simplify handling of options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4908
https://github.com/root-project/root/pull/4908:4,performance,memor,memory,4,"Fix memory leak in TUrl::SetUrl(); When url has options before, it was not correctly released. Following code always produced memory leak:. TUrl url;. url.SetUrl(""http://server/file?arg=1&arg2=2"");. url.SetUrl(""http://server/file?arg=1&arg2=2"");. Simplify handling of options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4908
https://github.com/root-project/root/pull/4908:126,performance,memor,memory,126,"Fix memory leak in TUrl::SetUrl(); When url has options before, it was not correctly released. Following code always produced memory leak:. TUrl url;. url.SetUrl(""http://server/file?arg=1&arg2=2"");. url.SetUrl(""http://server/file?arg=1&arg2=2"");. Simplify handling of options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4908
https://github.com/root-project/root/pull/4908:247,testability,Simpl,Simplify,247,"Fix memory leak in TUrl::SetUrl(); When url has options before, it was not correctly released. Following code always produced memory leak:. TUrl url;. url.SetUrl(""http://server/file?arg=1&arg2=2"");. url.SetUrl(""http://server/file?arg=1&arg2=2"");. Simplify handling of options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4908
https://github.com/root-project/root/pull/4908:4,usability,memor,memory,4,"Fix memory leak in TUrl::SetUrl(); When url has options before, it was not correctly released. Following code always produced memory leak:. TUrl url;. url.SetUrl(""http://server/file?arg=1&arg2=2"");. url.SetUrl(""http://server/file?arg=1&arg2=2"");. Simplify handling of options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4908
https://github.com/root-project/root/pull/4908:126,usability,memor,memory,126,"Fix memory leak in TUrl::SetUrl(); When url has options before, it was not correctly released. Following code always produced memory leak:. TUrl url;. url.SetUrl(""http://server/file?arg=1&arg2=2"");. url.SetUrl(""http://server/file?arg=1&arg2=2"");. Simplify handling of options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4908
https://github.com/root-project/root/pull/4908:247,usability,Simpl,Simplify,247,"Fix memory leak in TUrl::SetUrl(); When url has options before, it was not correctly released. Following code always produced memory leak:. TUrl url;. url.SetUrl(""http://server/file?arg=1&arg2=2"");. url.SetUrl(""http://server/file?arg=1&arg2=2"");. Simplify handling of options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4908
https://github.com/root-project/root/pull/4909:67,interoperability,convers,conversion,67,Apply fixes in MethodPyKeras for Python3; Fix in MethodPyKeras the conversion from PyObject representing strings in Python to strings in C++. . The way of converting is different between Python2 and Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4909
https://github.com/root-project/root/pull/4910:0,performance,Improve perform,Improve performance,0,"Improve performance of TBase64 coding/encoding; Remove unnecessary checks, use R__likely macro to gain performance of. main loop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4910
https://github.com/root-project/root/pull/4910:103,performance,perform,performance,103,"Improve performance of TBase64 coding/encoding; Remove unnecessary checks, use R__likely macro to gain performance of. main loop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4910
https://github.com/root-project/root/pull/4910:8,usability,perform,performance,8,"Improve performance of TBase64 coding/encoding; Remove unnecessary checks, use R__likely macro to gain performance of. main loop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4910
https://github.com/root-project/root/pull/4910:103,usability,perform,performance,103,"Improve performance of TBase64 coding/encoding; Remove unnecessary checks, use R__likely macro to gain performance of. main loop",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4910
https://github.com/root-project/root/pull/4911:119,deployability,Integr,Integrates,119,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:179,energy efficiency,CPu,CPu,179,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:296,energy efficiency,GPU,GPU,296,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:119,integrability,Integr,Integrates,119,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:119,interoperability,Integr,Integrates,119,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:29,modifiability,Layer,Layers,29,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:65,modifiability,layer,layers,65,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:119,modifiability,Integr,Integrates,119,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:199,modifiability,exten,extends,199,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:179,performance,CPu,CPu,179,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:296,performance,GPU,GPU,296,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:119,reliability,Integr,Integrates,119,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:119,security,Integr,Integrates,119,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:119,testability,Integr,Integrates,119,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:304,testability,simpl,simple,304,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:4,usability,support,support,4,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4911:304,usability,simpl,simple,304,"Add support for LSTM and GRU Layers and add implemention all RNN layers using cuDNN; This PR replaces #3924 by Susrya. Integrates his code with the new developments (RTensor) for CPu and in addition extends his implmentation by : . - fixing backpropagation for GRU. - add cuDNN implmentation for GPU for simple RNN, LSTM and GRU",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4911
https://github.com/root-project/root/pull/4912:0,deployability,updat,update,0,update release notes for TMVA and add missing contributors;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4912
https://github.com/root-project/root/pull/4912:7,deployability,releas,release,7,update release notes for TMVA and add missing contributors;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4912
https://github.com/root-project/root/pull/4912:0,safety,updat,update,0,update release notes for TMVA and add missing contributors;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4912
https://github.com/root-project/root/pull/4912:0,security,updat,update,0,update release notes for TMVA and add missing contributors;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4912
https://github.com/root-project/root/pull/4913:122,availability,state,state,122,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:27,energy efficiency,Load,LoadTree,27,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:100,integrability,discover,discovery,100,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:122,integrability,state,state,122,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:288,integrability,coupl,coupling,288,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:100,interoperability,discover,discovery,100,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:288,modifiability,coupl,coupling,288,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:27,performance,Load,LoadTree,27,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:369,safety,test,tested,369,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:288,testability,coupl,coupling,288,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:369,testability,test,tested,369,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4913:100,usability,discov,discovery,100,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name; Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4913
https://github.com/root-project/root/pull/4916:179,deployability,automat,automatically,179,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram; From RooAbsData into RooDataSet. This pythonization will be. removed when the addition of the using overloads is automatically. handled by the bindings. Done both in current PyROOT and experimental.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4916
https://github.com/root-project/root/pull/4916:232,energy efficiency,current,current,232,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram; From RooAbsData into RooDataSet. This pythonization will be. removed when the addition of the using overloads is automatically. handled by the bindings. Done both in current PyROOT and experimental.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4916
https://github.com/root-project/root/pull/4916:20,integrability,Inject,Inject,20,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram; From RooAbsData into RooDataSet. This pythonization will be. removed when the addition of the using overloads is automatically. handled by the bindings. Done both in current PyROOT and experimental.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4916
https://github.com/root-project/root/pull/4916:209,interoperability,bind,bindings,209,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram; From RooAbsData into RooDataSet. This pythonization will be. removed when the addition of the using overloads is automatically. handled by the bindings. Done both in current PyROOT and experimental.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4916
https://github.com/root-project/root/pull/4916:209,modifiability,bind,bindings,209,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram; From RooAbsData into RooDataSet. This pythonization will be. removed when the addition of the using overloads is automatically. handled by the bindings. Done both in current PyROOT and experimental.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4916
https://github.com/root-project/root/pull/4916:20,security,Inject,Inject,20,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram; From RooAbsData into RooDataSet. This pythonization will be. removed when the addition of the using overloads is automatically. handled by the bindings. Done both in current PyROOT and experimental.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4916
https://github.com/root-project/root/pull/4916:179,testability,automat,automatically,179,[PyROOT][ROOT-7983] Inject missing overloads for createHistogram; From RooAbsData into RooDataSet. This pythonization will be. removed when the addition of the using overloads is automatically. handled by the bindings. Done both in current PyROOT and experimental.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4916
https://github.com/root-project/root/pull/4917:123,energy efficiency,current,current,123,"[Browser] Add option to run macro on double click; If enable double click on C, CPP or CXX file will run the macro, if the current that is not a code editor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4917
https://github.com/root-project/root/pull/4918:114,energy efficiency,draw,drawing,114,Several Eve7 improvments; 1. Show element title as tooltip in summary and 3D views. 2. Correctly handle dashes in drawing tracks. 3. Highlight elements when selected in summary view,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4918
https://github.com/root-project/root/pull/4918:51,usability,tool,tooltip,51,Several Eve7 improvments; 1. Show element title as tooltip in summary and 3D views. 2. Correctly handle dashes in drawing tracks. 3. Highlight elements when selected in summary view,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4918
https://github.com/root-project/root/pull/4919:50,availability,avail,available,50,Apply fixes for when RooFitMore (MathMore) is not available.; This fixes ROOT-10540 and ROOT-10536,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4919
https://github.com/root-project/root/pull/4919:50,reliability,availab,available,50,Apply fixes for when RooFitMore (MathMore) is not available.; This fixes ROOT-10540 and ROOT-10536,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4919
https://github.com/root-project/root/pull/4919:50,safety,avail,available,50,Apply fixes for when RooFitMore (MathMore) is not available.; This fixes ROOT-10540 and ROOT-10536,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4919
https://github.com/root-project/root/pull/4919:50,security,availab,available,50,Apply fixes for when RooFitMore (MathMore) is not available.; This fixes ROOT-10540 and ROOT-10536,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4919
https://github.com/root-project/root/pull/4920:50,availability,avail,available,50,Apply fixes for when RooFitMore (MathMore) is not available;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4920
https://github.com/root-project/root/pull/4920:50,reliability,availab,available,50,Apply fixes for when RooFitMore (MathMore) is not available;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4920
https://github.com/root-project/root/pull/4920:50,safety,avail,available,50,Apply fixes for when RooFitMore (MathMore) is not available;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4920
https://github.com/root-project/root/pull/4920:50,security,availab,available,50,Apply fixes for when RooFitMore (MathMore) is not available;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4920
https://github.com/root-project/root/pull/4922:4,usability,support,support,4,Add support of TGeoTessellated to JSROOT; Add to webdemo.C example,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4922
https://github.com/root-project/root/pull/4923:283,availability,operat,operator,283,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:388,availability,operat,operator,388,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:438,availability,operat,operator,438,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:581,availability,operat,operator,581,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:303,deployability,releas,release,303,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:325,energy efficiency,alloc,allocating,325,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:231,performance,memor,memory,231,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:311,performance,memor,memory,311,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:697,performance,memor,memory,697,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:238,security,access,access,238,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:80,usability,support,support,80,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:231,usability,memor,memory,231,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:311,usability,memor,memory,311,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4923:697,usability,memor,memory,697,"Fix potential memleak in TGeoFacet; I just looked in the code while want to add support of TGeoTesselated to JSROOT. Here is first attempt: https://jsroot.gsi.de/dev/examples.htm#tgeo_tess. Found and fixed issues:. * Fix potential memory access problem in new TGeoFacet. * In assign operator one should release memory before allocating new one. * `fIvert` member was not copied in assign operator. * Eliminate copy constructor and assign operator for TGeoTesselated (not used, default is ok). For several TGeo classes like TGeoPolygon, TGeoPcon, TGeoPgon one should declare assign operator and copy constructor as deleted or really implement them. Otherwise if anybody use them, this will produce memory leak / seg. violation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4923
https://github.com/root-project/root/pull/4924:40,availability,operat,operator,40,Fix mem leak in TQCommand; Wrong delete operator was used,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4924
https://github.com/root-project/root/pull/4925:4,availability,Consist,Consistency,4,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:314,deployability,updat,updated,314,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:269,performance,perform,performed,269,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:314,safety,updat,updated,314,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:314,security,updat,updated,314,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:4,usability,Consist,Consistency,4,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:269,usability,perform,performed,269,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:297,usability,document,documentation,297,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4925:410,usability,user,user,410,"Fix Consistency between TRandom1::SetSeed and TRandom1::SetSeeds; This PR fixes ROOT-10081. . When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling . TRandom1::SetSeeds( { seed, 0}, 0). With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4925
https://github.com/root-project/root/pull/4926:0,testability,Simpl,Simplify,0,Simplify ProcessRunCommand();,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4926
https://github.com/root-project/root/pull/4926:0,usability,Simpl,Simplify,0,Simplify ProcessRunCommand();,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4926
https://github.com/root-project/root/pull/4927:22,availability,failur,failure,22,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:135,availability,operat,operator,135,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:22,deployability,fail,failure,22,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:149,deployability,releas,released,149,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:11,energy efficiency,alloc,allocation,11,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:106,energy efficiency,alloc,allocated,106,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:4,performance,memor,memory,4,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:22,performance,failur,failure,22,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:94,performance,memor,memory,94,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:22,reliability,fail,failure,22,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:4,usability,memor,memory,4,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4927:94,usability,memor,memory,94,"Fix memory allocation failure in Oracle; When calling TOracleStatement::GetBinary() function, memory was. allocated with `malloc(len)` operator, but released with `delete [] buf`. Definitely wrong. Nobody was using it before - or clib was doing. something wrong. Adjust Oracle/MySQL/SQLite/ODBC/PgSQL classes to c++11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4927
https://github.com/root-project/root/pull/4928:31,availability,operat,operator,31,[code] Add missing #include to operator+= probe; Fix for 30593ff51704cdfdd22f7511200a0f0e0f70755e,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4928
https://github.com/root-project/root/pull/4928:42,deployability,probe,probe,42,[code] Add missing #include to operator+= probe; Fix for 30593ff51704cdfdd22f7511200a0f0e0f70755e,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4928
https://github.com/root-project/root/pull/4929:31,availability,operat,operator,31,[code] Add missing #include to operator+= probe; Fix for 423c8d203e3ea810c9b2d2f6606cf8f85c54916b,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4929
https://github.com/root-project/root/pull/4929:42,deployability,probe,probe,42,[code] Add missing #include to operator+= probe; Fix for 423c8d203e3ea810c9b2d2f6606cf8f85c54916b,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4929
https://github.com/root-project/root/pull/4931:8,safety,test,test,8,V7 hist test fixes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4931
https://github.com/root-project/root/pull/4931:8,testability,test,test,8,V7 hist test fixes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4931
https://github.com/root-project/root/pull/4932:119,deployability,automat,automatically,119,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in <TCanvas::Print>: eps file dataset/plots/TrainingHistory.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/TrainingHistory.png has been created. Previously read:. > Info in <TCanvas::Print>: eps file dataset/plots/.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/.png has been created. Any questions please ask.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4932
https://github.com/root-project/root/pull/4932:289,safety,Test,Test,289,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in <TCanvas::Print>: eps file dataset/plots/TrainingHistory.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/TrainingHistory.png has been created. Previously read:. > Info in <TCanvas::Print>: eps file dataset/plots/.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/.png has been created. Any questions please ask.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4932
https://github.com/root-project/root/pull/4932:119,testability,automat,automatically,119,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in <TCanvas::Print>: eps file dataset/plots/TrainingHistory.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/TrainingHistory.png has been created. Previously read:. > Info in <TCanvas::Print>: eps file dataset/plots/.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/.png has been created. Any questions please ask.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4932
https://github.com/root-project/root/pull/4932:289,testability,Test,Test,289,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in <TCanvas::Print>: eps file dataset/plots/TrainingHistory.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/TrainingHistory.png has been created. Previously read:. > Info in <TCanvas::Print>: eps file dataset/plots/.eps has been created. > Info in <TCanvas::Print>: file dataset/plots/.png has been created. Any questions please ask.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4932
https://github.com/root-project/root/pull/4933:85,energy efficiency,current,current,85,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:637,energy efficiency,Reduc,Reduces,637,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:606,integrability,topic,topic,606,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:25,modifiability,inherit,inheritance-based,25,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:392,modifiability,inherit,inheritance-based,392,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:253,performance,time,times,253,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:59,safety,test,tests,59,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:451,safety,Compl,Completely,451,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:480,safety,test,test,480,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:509,safety,test,test,509,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:1067,safety,test,testing,1067,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:1282,safety,review,review,1282,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:451,security,Compl,Completely,451,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:59,testability,test,tests,59,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:480,testability,test,test,480,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:509,testability,test,test,509,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:514,testability,coverag,coverage,514,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:1067,testability,test,testing,1067,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:1282,testability,review,review,1282,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:193,usability,user,users,193,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4933:379,usability,close,closer,379,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs; The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion). - Reduces the amount of work needed to implement a new RAxis type. - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket. - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4933
https://github.com/root-project/root/pull/4934:124,deployability,automat,automatically,124,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing from the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in TCanvas::Print: eps file dataset/plots/TrainingHistory.eps has been created. > Info in TCanvas::Print: file dataset/plots/TrainingHistory.png has been created. . Previously read:. > Info in TCanvas::Print: eps file dataset/plots/.eps has been created. > Info in TCanvas::Print: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4934
https://github.com/root-project/root/pull/4934:294,safety,Test,Test,294,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing from the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in TCanvas::Print: eps file dataset/plots/TrainingHistory.eps has been created. > Info in TCanvas::Print: file dataset/plots/TrainingHistory.png has been created. . Previously read:. > Info in TCanvas::Print: eps file dataset/plots/.eps has been created. > Info in TCanvas::Print: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4934
https://github.com/root-project/root/pull/4934:124,testability,automat,automatically,124,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing from the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in TCanvas::Print: eps file dataset/plots/TrainingHistory.eps has been created. > Info in TCanvas::Print: file dataset/plots/TrainingHistory.png has been created. . Previously read:. > Info in TCanvas::Print: eps file dataset/plots/.eps has been created. > Info in TCanvas::Print: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4934
https://github.com/root-project/root/pull/4934:294,testability,Test,Test,294,"[TMVA-Gui]Training history filename bugfix; A minor detail was missing from the merged PR #4337, the training history plots automatically saved by TMVA-Gui were missing a filename. I recommend this fix to be merged into v6-20-00 soon since the 'Training History' feature is now in that branch. Test:. ```. . bin/thisroot.sh. cd tutorials/tmva/. make. ./TMVAClassification. root -l. TMVA::TMVAGui(""TMVA.root""). //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx . ```. Result excerpt:. > Info in TCanvas::Print: eps file dataset/plots/TrainingHistory.eps has been created. > Info in TCanvas::Print: file dataset/plots/TrainingHistory.png has been created. . Previously read:. > Info in TCanvas::Print: eps file dataset/plots/.eps has been created. > Info in TCanvas::Print: file dataset/plots/.png has been created. Any questions please ask",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4934
https://github.com/root-project/root/pull/4935:4,performance,memor,memory,4,Fix memory leak in GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints; Plus fix two leaks in tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4935
https://github.com/root-project/root/pull/4935:99,safety,test,tests,99,Fix memory leak in GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints; Plus fix two leaks in tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4935
https://github.com/root-project/root/pull/4935:99,testability,test,tests,99,Fix memory leak in GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints; Plus fix two leaks in tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4935
https://github.com/root-project/root/pull/4935:4,usability,memor,memory,4,Fix memory leak in GaussLegendreIntegrator::CalcGaussLegendreSamplingPoints; Plus fix two leaks in tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4935
https://github.com/root-project/root/pull/4936:10,modifiability,exten,extend,10,"[rootfit] extend docu to prevent memory leak; Several methods in HybridPlot returns `double *`, but not mentioned that array should be deleted. Actually, no any place in ROOT using these methods. Therefore just mention `delete [] res` in methods comments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4936
https://github.com/root-project/root/pull/4936:33,performance,memor,memory,33,"[rootfit] extend docu to prevent memory leak; Several methods in HybridPlot returns `double *`, but not mentioned that array should be deleted. Actually, no any place in ROOT using these methods. Therefore just mention `delete [] res` in methods comments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4936
https://github.com/root-project/root/pull/4936:25,safety,prevent,prevent,25,"[rootfit] extend docu to prevent memory leak; Several methods in HybridPlot returns `double *`, but not mentioned that array should be deleted. Actually, no any place in ROOT using these methods. Therefore just mention `delete [] res` in methods comments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4936
https://github.com/root-project/root/pull/4936:25,security,preven,prevent,25,"[rootfit] extend docu to prevent memory leak; Several methods in HybridPlot returns `double *`, but not mentioned that array should be deleted. Actually, no any place in ROOT using these methods. Therefore just mention `delete [] res` in methods comments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4936
https://github.com/root-project/root/pull/4936:33,usability,memor,memory,33,"[rootfit] extend docu to prevent memory leak; Several methods in HybridPlot returns `double *`, but not mentioned that array should be deleted. Actually, no any place in ROOT using these methods. Therefore just mention `delete [] res` in methods comments.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4936
https://github.com/root-project/root/pull/4937:25,usability,document,documentation,25,[NFC][RDF][Doc] Add more documentation for GetNRuns; More docs :),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4937
https://github.com/root-project/root/pull/4939:43,deployability,instal,installations,43,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:462,deployability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:484,deployability,version,version,484,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:694,energy efficiency,current,current,694,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:462,integrability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:484,integrability,version,version,484,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:364,interoperability,specif,specified,364,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:462,modifiability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:484,modifiability,version,version,484,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:778,modifiability,pac,packages,778,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:874,modifiability,pac,packages,874,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:307,reliability,doe,does,307,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:462,safety,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:462,testability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:381,usability,user,user,381,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:710,usability,behavi,behavior,710,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4939:807,usability,behavi,behavior,807,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4939
https://github.com/root-project/root/pull/4940:43,deployability,instal,installations,43,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:462,deployability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:484,deployability,version,version,484,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:694,energy efficiency,current,current,694,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:462,integrability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:484,integrability,version,version,484,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:364,interoperability,specif,specified,364,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:462,modifiability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:484,modifiability,version,version,484,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:778,modifiability,pac,packages,778,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:874,modifiability,pac,packages,874,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:307,reliability,doe,does,307,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:462,safety,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:462,testability,depend,depends,462,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:381,usability,user,user,381,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:710,usability,behavi,behavior,710,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4940:807,usability,behavi,behavior,807,"[CMake][Exp PyROOT] Move search for Python installations outside Sear…; …chInstalledSoftware. This change was already proposed in PR 4647, commit b8cd32, for the. following reason: apparently, SearchInstalledSoftware is called AFTER RootInstallDirs;. the consequence of this is that CMAKE_INSTALL_PYROOTDIR does not take. the proper value ONLY IF its value is NOT specified by the user. The reason for this is that the value assigned to. CMAKE_INSTALL_PYROOTDIR depends on the Python version that is found. For this reason, the search for Python is here moved to. RootBuildOptions, which is run BEFORE RootInstallDirs, and this. guarantees that the default value is the correct one. Example of current (wrong) behavior on an Ubuntu machine:. CMAKE_INSTALL_PYROOTDIR -> lib/site-packages. Example of correct behavior (this PR):. CMAKE_INSTALL_PYROOTDIR -> lib/python2.7/dist-packages",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4940
https://github.com/root-project/root/pull/4941:13,safety,test,tests,13,[histv7] add tests for RHist: ctor;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4941
https://github.com/root-project/root/pull/4941:13,testability,test,tests,13,[histv7] add tests for RHist: ctor;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4941
https://github.com/root-project/root/pull/4943:64,energy efficiency,draw,draw,64,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:135,energy efficiency,draw,draw,135,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:186,energy efficiency,Draw,Draw,186,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:276,modifiability,deco,decoded,276,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:318,modifiability,variab,variable,318,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:39,performance,Memor,Memory,39,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:228,reliability,doe,does,228,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:215,security,ISO,ISO,215,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:39,usability,Memor,Memory,39,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4943:335,usability,clear,cleared,335,"Fix problems in hist painter (TF3); 1. Memory leak - when ""pie"" draw option is used, created TPie object is not destroyed. 2. When tf3 draw option provided to histogram, it crashes `h3->Draw(""tf3"")` . 3. ""TF3"" and ""ISO"" strings does not correctly suppressed from options when decoded. 4. TF3 pointer remains in global variable and not cleared when TF3 is deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4943
https://github.com/root-project/root/pull/4944:390,availability,avail,available,390,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:727,availability,state,state,727,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:84,deployability,patch,patch,84,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:710,deployability,unload,unloaded,710,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:736,deployability,Patch,Patch,736,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:1,energy efficiency,core,core,1,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:159,energy efficiency,load,loading,159,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:727,integrability,state,state,727,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:159,performance,load,loading,159,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:390,reliability,availab,available,390,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:84,safety,patch,patch,84,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:90,safety,avoid,avoids,90,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:390,safety,avail,available,390,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:600,safety,compl,complains,600,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:736,safety,Patch,Patch,736,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:84,security,patch,patch,84,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:390,security,availab,available,390,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:600,security,compl,complains,600,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:736,security,Patch,Patch,736,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4944:291,testability,context,context,291,"[core] The dictionary for the namespace partition and the enum may di…; …ffer. This patch avoids asking ROOT to create a TClass entry in interpreted mode when loading an enum from a given namespace. This is dangerous in case no call to TClass::GetClass(""enum::namespace"") is not called in a context where autoloading is enabled. This should fix ROOT-10528 where GaudiMath::Interpolation is available across dictionaries. When reading the LHCbMathDict_rdict.pcm we find an enum GaudiMath::Interpolation::Type. This in turn creates a never used TClass entry for GaudiMath::Interpolation for which ROOT complains at teardown with:. Fatal in <TClass::SetUnloaded>: The TClass for GaudiMath::Interpolation is being unloaded when in state 3. Patch by Marco Clemencic(@pikacic) and me! cc: @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4944
https://github.com/root-project/root/pull/4945:31,deployability,depend,dependencies,31,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:132,deployability,build,build,132,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:304,deployability,instal,installation,304,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:396,deployability,depend,dependencies,396,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:31,integrability,depend,dependencies,31,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:396,integrability,depend,dependencies,396,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:31,modifiability,depend,dependencies,31,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:169,modifiability,maintain,maintainable,169,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:396,modifiability,depend,dependencies,396,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:31,safety,depend,dependencies,31,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:169,safety,maintain,maintainable,169,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:396,safety,depend,dependencies,396,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:31,testability,depend,dependencies,31,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4945:396,testability,depend,dependencies,396,"[CMake] Start migrating strong dependencies outside SearchInstalledSoftware and deprecate 'python' option; In order to:. - make the build system less entangled and more maintainable . - give a solution to the bug mentioned in https://github.com/root-project/root/pull/4939. we move the search for Python installation in a new script called SearchRootCoreDeps, where also the search for main Root dependencies will happen at some point. The misleading 'python' option, which was basically enabling pyroot, is deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4945
https://github.com/root-project/root/pull/4947:97,deployability,manag,manager,97,"Use `EnableImplicitMT` instead of `EnableThreadSafety`; This properly initialize the thread pool manager, and fixes the crash in `gtest-tree-treeplayer-test-treeprocessormt` on Windows, but the Jira issue ROOT-10561 has still to be fixed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4947
https://github.com/root-project/root/pull/4947:97,energy efficiency,manag,manager,97,"Use `EnableImplicitMT` instead of `EnableThreadSafety`; This properly initialize the thread pool manager, and fixes the crash in `gtest-tree-treeplayer-test-treeprocessormt` on Windows, but the Jira issue ROOT-10561 has still to be fixed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4947
https://github.com/root-project/root/pull/4947:97,safety,manag,manager,97,"Use `EnableImplicitMT` instead of `EnableThreadSafety`; This properly initialize the thread pool manager, and fixes the crash in `gtest-tree-treeplayer-test-treeprocessormt` on Windows, but the Jira issue ROOT-10561 has still to be fixed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4947
https://github.com/root-project/root/pull/4947:152,safety,test,test-treeprocessormt,152,"Use `EnableImplicitMT` instead of `EnableThreadSafety`; This properly initialize the thread pool manager, and fixes the crash in `gtest-tree-treeplayer-test-treeprocessormt` on Windows, but the Jira issue ROOT-10561 has still to be fixed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4947
https://github.com/root-project/root/pull/4947:152,testability,test,test-treeprocessormt,152,"Use `EnableImplicitMT` instead of `EnableThreadSafety`; This properly initialize the thread pool manager, and fixes the crash in `gtest-tree-treeplayer-test-treeprocessormt` on Windows, but the Jira issue ROOT-10561 has still to be fixed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4947
https://github.com/root-project/root/pull/4948:57,deployability,updat,update,57,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:164,deployability,fail,failing,164,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:204,deployability,upgrad,upgrade,204,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:238,deployability,updat,updating,238,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:98,energy efficiency,optim,optimization,98,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:204,modifiability,upgrad,upgrade,204,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:98,performance,optimiz,optimization,98,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:164,reliability,fail,failing,164,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:284,reliability,doe,doesn,284,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:57,safety,updat,update,57,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:158,safety,test,tests,158,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:238,safety,updat,updating,238,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:57,security,updat,update,57,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:238,security,updat,updating,238,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:158,testability,test,tests,158,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:67,usability,Visual,Visual,67,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4948:247,usability,Visual,Visual,247,"Replace /O2 with /O1 compiler flag on Windows; After the update to Visual Studio v16.4.0, the /O2 optimization flag in the interpreter make many (25%) of the tests failing. Try to re-enable /O2 after the upgrade of llvm & clang, or after updating Visual Studio (v16.5.0-pre.2.0 still doesn't work)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4948
https://github.com/root-project/root/pull/4949:82,safety,test,tests,82,"[TChain] Fix name parsing for TChain::[Add,AddFile]; @gganis Do we have somewhere tests for the name parsing? I couldn't find them. Also, we probably want to add tests for the parsing with options or queries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4949
https://github.com/root-project/root/pull/4949:162,safety,test,tests,162,"[TChain] Fix name parsing for TChain::[Add,AddFile]; @gganis Do we have somewhere tests for the name parsing? I couldn't find them. Also, we probably want to add tests for the parsing with options or queries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4949
https://github.com/root-project/root/pull/4949:82,testability,test,tests,82,"[TChain] Fix name parsing for TChain::[Add,AddFile]; @gganis Do we have somewhere tests for the name parsing? I couldn't find them. Also, we probably want to add tests for the parsing with options or queries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4949
https://github.com/root-project/root/pull/4949:162,testability,test,tests,162,"[TChain] Fix name parsing for TChain::[Add,AddFile]; @gganis Do we have somewhere tests for the name parsing? I couldn't find them. Also, we probably want to add tests for the parsing with options or queries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4949
https://github.com/root-project/root/pull/4950:13,safety,test,tests,13,[histv7] add tests for RHist::Fill: 2D and 3D;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4950
https://github.com/root-project/root/pull/4950:13,testability,test,tests,13,[histv7] add tests for RHist::Fill: 2D and 3D;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4950
https://github.com/root-project/root/pull/4952:246,deployability,version,version,246,"""hide"" TPainter3dAlgorithms.h from public, add clipbox to TF3; TPainter3dAlgorithms used only in hist painter, therefore no need to export it to public. Add clip settings to TF3 class, but do not store them in file, therefore do not change class version. Exclude static variables, used for TF3 clipping before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4952
https://github.com/root-project/root/pull/4952:35,integrability,pub,public,35,"""hide"" TPainter3dAlgorithms.h from public, add clipbox to TF3; TPainter3dAlgorithms used only in hist painter, therefore no need to export it to public. Add clip settings to TF3 class, but do not store them in file, therefore do not change class version. Exclude static variables, used for TF3 clipping before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4952
https://github.com/root-project/root/pull/4952:145,integrability,pub,public,145,"""hide"" TPainter3dAlgorithms.h from public, add clipbox to TF3; TPainter3dAlgorithms used only in hist painter, therefore no need to export it to public. Add clip settings to TF3 class, but do not store them in file, therefore do not change class version. Exclude static variables, used for TF3 clipping before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4952
https://github.com/root-project/root/pull/4952:246,integrability,version,version,246,"""hide"" TPainter3dAlgorithms.h from public, add clipbox to TF3; TPainter3dAlgorithms used only in hist painter, therefore no need to export it to public. Add clip settings to TF3 class, but do not store them in file, therefore do not change class version. Exclude static variables, used for TF3 clipping before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4952
https://github.com/root-project/root/pull/4952:246,modifiability,version,version,246,"""hide"" TPainter3dAlgorithms.h from public, add clipbox to TF3; TPainter3dAlgorithms used only in hist painter, therefore no need to export it to public. Add clip settings to TF3 class, but do not store them in file, therefore do not change class version. Exclude static variables, used for TF3 clipping before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4952
https://github.com/root-project/root/pull/4952:270,modifiability,variab,variables,270,"""hide"" TPainter3dAlgorithms.h from public, add clipbox to TF3; TPainter3dAlgorithms used only in hist painter, therefore no need to export it to public. Add clip settings to TF3 class, but do not store them in file, therefore do not change class version. Exclude static variables, used for TF3 clipping before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4952
https://github.com/root-project/root/pull/4953:364,safety,test,test-treeprocessormt,364,"Fix Jira issue #ROOT-10561 [TTreeProcessorMT] Breaks without EnableIm…; …plicitMT on. Move the creation of `TThreadExecutor pool` before the call of `Internal::MakeClusters()`, to make sure it is properly initialized when calling `ROOT::Internal::TPoolManager::GetPoolSize()` (via `ROOT::GetImplicitMTPoolSize()`). This fix a crash with the `gtest-tree-treeplayer-test-treeprocessormt` test on Windows, due to a division by zero at line 224 in `TTreeProcessorMT`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4953
https://github.com/root-project/root/pull/4953:386,safety,test,test,386,"Fix Jira issue #ROOT-10561 [TTreeProcessorMT] Breaks without EnableIm…; …plicitMT on. Move the creation of `TThreadExecutor pool` before the call of `Internal::MakeClusters()`, to make sure it is properly initialized when calling `ROOT::Internal::TPoolManager::GetPoolSize()` (via `ROOT::GetImplicitMTPoolSize()`). This fix a crash with the `gtest-tree-treeplayer-test-treeprocessormt` test on Windows, due to a division by zero at line 224 in `TTreeProcessorMT`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4953
https://github.com/root-project/root/pull/4953:364,testability,test,test-treeprocessormt,364,"Fix Jira issue #ROOT-10561 [TTreeProcessorMT] Breaks without EnableIm…; …plicitMT on. Move the creation of `TThreadExecutor pool` before the call of `Internal::MakeClusters()`, to make sure it is properly initialized when calling `ROOT::Internal::TPoolManager::GetPoolSize()` (via `ROOT::GetImplicitMTPoolSize()`). This fix a crash with the `gtest-tree-treeplayer-test-treeprocessormt` test on Windows, due to a division by zero at line 224 in `TTreeProcessorMT`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4953
https://github.com/root-project/root/pull/4953:386,testability,test,test,386,"Fix Jira issue #ROOT-10561 [TTreeProcessorMT] Breaks without EnableIm…; …plicitMT on. Move the creation of `TThreadExecutor pool` before the call of `Internal::MakeClusters()`, to make sure it is properly initialized when calling `ROOT::Internal::TPoolManager::GetPoolSize()` (via `ROOT::GetImplicitMTPoolSize()`). This fix a crash with the `gtest-tree-treeplayer-test-treeprocessormt` test on Windows, due to a division by zero at line 224 in `TTreeProcessorMT`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4953
https://github.com/root-project/root/pull/4954:4,performance,memor,memory,4,"Fix memory leak in TGraph2DPainter::GetContourList; Also simplify LinkDef.h file for TGraph2DPainter. One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation. Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4954
https://github.com/root-project/root/pull/4954:145,safety,avoid,avoid,145,"Fix memory leak in TGraph2DPainter::GetContourList; Also simplify LinkDef.h file for TGraph2DPainter. One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation. Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4954
https://github.com/root-project/root/pull/4954:151,safety,compl,complication,151,"Fix memory leak in TGraph2DPainter::GetContourList; Also simplify LinkDef.h file for TGraph2DPainter. One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation. Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4954
https://github.com/root-project/root/pull/4954:151,security,compl,complication,151,"Fix memory leak in TGraph2DPainter::GetContourList; Also simplify LinkDef.h file for TGraph2DPainter. One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation. Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4954
https://github.com/root-project/root/pull/4954:57,testability,simpl,simplify,57,"Fix memory leak in TGraph2DPainter::GetContourList; Also simplify LinkDef.h file for TGraph2DPainter. One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation. Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4954
https://github.com/root-project/root/pull/4954:4,usability,memor,memory,4,"Fix memory leak in TGraph2DPainter::GetContourList; Also simplify LinkDef.h file for TGraph2DPainter. One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation. Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4954
https://github.com/root-project/root/pull/4954:57,usability,simpl,simplify,57,"Fix memory leak in TGraph2DPainter::GetContourList; Also simplify LinkDef.h file for TGraph2DPainter. One can use ClassDef(TGraph2DPainter,0) to avoid complication by dictionary generation. Class is not intend to be stored in the ROOT file",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4954
https://github.com/root-project/root/pull/4956:13,deployability,Fail,Fail,13,[TreeProcMT] Fail test early rather than crashing; Some builds might not be able to access files at root://eospublic.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4956
https://github.com/root-project/root/pull/4956:56,deployability,build,builds,56,[TreeProcMT] Fail test early rather than crashing; Some builds might not be able to access files at root://eospublic.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4956
https://github.com/root-project/root/pull/4956:13,reliability,Fail,Fail,13,[TreeProcMT] Fail test early rather than crashing; Some builds might not be able to access files at root://eospublic.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4956
https://github.com/root-project/root/pull/4956:18,safety,test,test,18,[TreeProcMT] Fail test early rather than crashing; Some builds might not be able to access files at root://eospublic.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4956
https://github.com/root-project/root/pull/4956:84,security,access,access,84,[TreeProcMT] Fail test early rather than crashing; Some builds might not be able to access files at root://eospublic.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4956
https://github.com/root-project/root/pull/4956:18,testability,test,test,18,[TreeProcMT] Fail test early rather than crashing; Some builds might not be able to access files at root://eospublic.cern.ch,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4956
https://github.com/root-project/root/pull/4957:19,deployability,updat,update,19,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:110,deployability,updat,updates,110,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:153,deployability,version,version,153,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:153,integrability,version,version,153,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:128,modifiability,pac,packages,128,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:153,modifiability,version,version,153,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:19,safety,updat,update,19,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:110,safety,updat,updates,110,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:588,safety,test,test,588,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:19,security,updat,update,19,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:110,security,updat,updates,110,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4957:588,testability,test,test,588,"[Exp PyROOT] Cppyy update; In preparation for the switch of experimental PyROOT to default in master, this PR updates the cppyy packages to their latest version:. - cppyy-1.6.1 (until [here](https://bitbucket.org/wlav/cppyy/commits/d7802d6e6e74c5359acfaf09443b9a1fc87baf6b)). - CPyCppyy-1.10.1 (until [here](https://bitbucket.org/wlav/cpycppyy/commits/c780f284d0cd0ff81f06007b620797cb18b0e269)) . - clingwrapper-1.10.7 (until [here](https://bitbucket.org/wlav/cppyy-backend/commits/8200a3709d76b56cf06be89d26a4682a2c9c59cd)). Moreover, the PR also introduces a few fixes and disables one test until the following TCling issue is fixed:. https://sft.its.cern.ch/jira/browse/ROOT-10488",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4957
https://github.com/root-project/root/pull/4958:13,safety,test,tests,13,[histv7] add tests for RHistConcurrentFill;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4958
https://github.com/root-project/root/pull/4958:13,testability,test,tests,13,[histv7] add tests for RHistConcurrentFill;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4958
https://github.com/root-project/root/pull/4959:24,performance,cach,caching,24,[RDF][ROOT-10563] Allow caching of aliased columns; See https://sft.its.cern.ch/jira/browse/ROOT-10563,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4959
https://github.com/root-project/root/pull/4960:145,performance,time,time,145,[RHist] Don't duplicate RHistBufferedFillBase members in RHistBufferedFill; Title says it all. I believe these data members are a remnant from a time where RHistBufferedFillBase did not exist.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4960
https://github.com/root-project/root/pull/4961:292,deployability,updat,update,292,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:7,energy efficiency,optim,optimize,7,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:42,energy efficiency,Optim,Optimize,42,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:7,performance,optimiz,optimize,7,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:42,performance,Optimiz,Optimize,42,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:292,safety,updat,update,292,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:214,security,control,controller,214,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:292,security,updat,update,292,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:214,testability,control,controller,214,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4961:251,usability,Close,Close,251,"[eve7] optimize layout, separate GED, ; * Optimize items height in SummaryView. * Use check boxes for fRnrSelf . * Handle elements highlight in SummaryView in both directions. * Move GED functionality to separated controller and view file. * Provide ""Close"" button for GED. * Handle elements update also for SummaryView and GED.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4961
https://github.com/root-project/root/pull/4964:15,availability,error,errors,15,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:131,availability,Error,Error,131,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:27,deployability,updat,updating,27,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:65,deployability,updat,update,65,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:366,deployability,updat,updating-existing-directory,366,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:15,performance,error,errors,15,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:131,performance,Error,Error,131,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:0,safety,Avoid,Avoid,0,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:15,safety,error,errors,15,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:27,safety,updat,updating,27,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:65,safety,updat,update,65,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:118,safety,compl,complains,118,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:131,safety,Error,Error,131,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:351,safety,compl,complains-when-updating-existing-directory,351,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:27,security,updat,updating,27,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:65,security,updat,update,65,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:118,security,compl,complains,118,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:351,security,compl,complains-when-updating-existing-directory,351,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:15,usability,error,errors,15,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4964:131,usability,Error,Error,131,"Avoid Snapshot errors when updating directories; If one tries to update a directory inside an existing file, Snapshot complains:. `Error in <TFile::mkdir>: An object with name hi exists already`. This fixes the problem by using the `returnExistingDirectory` option in `mkdir`. First mentioned in the forum [here](https://root-forum.cern.ch/t/snapshot-complains-when-updating-existing-directory/37935). Similar to [PR4649](https://github.com/root-project/root/pull/4649).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4964
https://github.com/root-project/root/pull/4965:44,deployability,updat,updates,44,"add fOverwrite option to Snapshot; When one updates a file using `Snapshot`, one ends up with multiple cycles:. ```python. In [10]: f.hi.ls(). TDirectoryFile*		hi	hi. KEY: TTree	there;2	there. KEY: TTree	there;1	there. ```. This adds the `fOverwrite` option to the `RSnapshotOptions` class to overwrite an existing `TTree`. First mentioned in the forum [here](https://root-forum.cern.ch/t/no-way-to-overwrite-using-snapshot/37936).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4965
https://github.com/root-project/root/pull/4965:44,safety,updat,updates,44,"add fOverwrite option to Snapshot; When one updates a file using `Snapshot`, one ends up with multiple cycles:. ```python. In [10]: f.hi.ls(). TDirectoryFile*		hi	hi. KEY: TTree	there;2	there. KEY: TTree	there;1	there. ```. This adds the `fOverwrite` option to the `RSnapshotOptions` class to overwrite an existing `TTree`. First mentioned in the forum [here](https://root-forum.cern.ch/t/no-way-to-overwrite-using-snapshot/37936).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4965
https://github.com/root-project/root/pull/4965:44,security,updat,updates,44,"add fOverwrite option to Snapshot; When one updates a file using `Snapshot`, one ends up with multiple cycles:. ```python. In [10]: f.hi.ls(). TDirectoryFile*		hi	hi. KEY: TTree	there;2	there. KEY: TTree	there;1	there. ```. This adds the `fOverwrite` option to the `RSnapshotOptions` class to overwrite an existing `TTree`. First mentioned in the forum [here](https://root-forum.cern.ch/t/no-way-to-overwrite-using-snapshot/37936).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4965
https://github.com/root-project/root/pull/4966:618,availability,repair,repair,618,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:173,energy efficiency,draw,drawings,173,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:79,integrability,configur,configured,79,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:591,interoperability,specif,specified,591,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:804,interoperability,specif,specify,804,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:61,modifiability,paramet,parameters,61,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:79,modifiability,configur,configured,79,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:306,performance,time,timeout,306,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:618,reliability,repair,repair,618,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:306,safety,timeout,timeout,306,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:79,security,configur,configured,79,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:551,testability,context,context,551,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:367,usability,mous,mouse,367,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:559,usability,menu,menu,559,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4966:686,usability,mous,mouse,686,"WebEve - use JSROOT renderer, improve highlight; Now several parameters can be configured via rootrc file:. ```. WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Provide context menu, which activate browser at specified element. Improve/repair functionality with JSROOT GeoPainter. . Provide single-click mouse handler, used for tracks/jets selection. Improve highlight handling in plain three.js mode. Make possibility to specify table row width via rootrc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4966
https://github.com/root-project/root/pull/4967:81,availability,error,errors,81,[RF] Small fixes for data classes in RooFit.; Collection of two commits:. - Make errors for RooDataSet more obvious to users when reading from ascii. - Strip down unnecessary includes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4967
https://github.com/root-project/root/pull/4967:158,availability,down,down,158,[RF] Small fixes for data classes in RooFit.; Collection of two commits:. - Make errors for RooDataSet more obvious to users when reading from ascii. - Strip down unnecessary includes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4967
https://github.com/root-project/root/pull/4967:81,performance,error,errors,81,[RF] Small fixes for data classes in RooFit.; Collection of two commits:. - Make errors for RooDataSet more obvious to users when reading from ascii. - Strip down unnecessary includes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4967
https://github.com/root-project/root/pull/4967:81,safety,error,errors,81,[RF] Small fixes for data classes in RooFit.; Collection of two commits:. - Make errors for RooDataSet more obvious to users when reading from ascii. - Strip down unnecessary includes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4967
https://github.com/root-project/root/pull/4967:81,usability,error,errors,81,[RF] Small fixes for data classes in RooFit.; Collection of two commits:. - Make errors for RooDataSet more obvious to users when reading from ascii. - Strip down unnecessary includes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4967
https://github.com/root-project/root/pull/4967:119,usability,user,users,119,[RF] Small fixes for data classes in RooFit.; Collection of two commits:. - Make errors for RooDataSet more obvious to users when reading from ascii. - Strip down unnecessary includes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4967
https://github.com/root-project/root/pull/4968:20,deployability,updat,updates,20,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:152,integrability,interfac,interfaces,152,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:152,interoperability,interfac,interfaces,152,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:152,modifiability,interfac,interfaces,152,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:374,modifiability,refact,refactor,374,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:374,performance,refactor,refactor,374,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:288,reliability,doe,doesn,288,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:20,safety,updat,updates,20,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:61,safety,Test,Tests,61,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:523,safety,test,test,523,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:20,security,updat,updates,20,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:61,testability,Test,Tests,61,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:523,testability,test,test,523,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:138,usability,document,documentation,138,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4968:445,usability,clear,clear,445,"[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests; Two fixes in CMake, which were in the way for RooFit work:. - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work. - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4968
https://github.com/root-project/root/pull/4969:43,energy efficiency,Reduc,Reduce,43,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:27,interoperability,prox,proxy,27,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:145,interoperability,prox,proxy,145,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:327,interoperability,prox,proxy,327,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:479,interoperability,prox,proxies,479,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:548,interoperability,prox,proxies,548,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:646,interoperability,compatib,compatibility,646,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:903,interoperability,prox,proxy,903,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:943,interoperability,prox,proxy,943,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1328,interoperability,prox,proxies,1328,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1357,interoperability,convers,conversion,1357,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:409,reliability,doe,does,409,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:140,safety,safe,safe,140,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:203,safety,review,reviewers,203,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:920,safety,safe,safely,920,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1238,safety,safe,safe,1238,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1297,safety,unsaf,unsafe,1297,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1350,safety,unsaf,unsafe,1350,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1446,safety,unsaf,unsafe,1446,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1609,safety,safe,safety,1609,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:203,testability,review,reviewers,203,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:533,usability,user,users,533,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:987,usability,support,support,987,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1416,usability,user,users,1416,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4969:1564,usability,behavi,behaviour,1564,"[RF] Unify multiple RooFit proxy classes.; Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:. The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class. Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4969
https://github.com/root-project/root/pull/4970:284,integrability,interfac,interface,284,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:83,interoperability,specif,specific,83,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:284,interoperability,interfac,interface,284,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:8,modifiability,Refact,Refactor,8,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:284,modifiability,interfac,interface,284,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:8,performance,Refactor,Refactor,8,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:20,security,control,controller,20,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:20,testability,control,controller,20,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4970:41,usability,support,support,41,"[EVE-7] Refactor GL.controller for clean support of different renderers.; Renderer specific code has been moved to GlViewer classes:. * GlViewer is the ""base class"". * GlViewerJSRoot for JSRoot GeoPainter. * GlViewerThree for THREE.js. * GlViewerRCore for the experimental RenderCore interface (just starting).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4970
https://github.com/root-project/root/pull/4971:0,deployability,Manag,Manage,0,Manage the the Z minimum and maximum like for the BOX option; Fix ROOT-10569,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4971
https://github.com/root-project/root/pull/4971:0,energy efficiency,Manag,Manage,0,Manage the the Z minimum and maximum like for the BOX option; Fix ROOT-10569,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4971
https://github.com/root-project/root/pull/4971:0,safety,Manag,Manage,0,Manage the the Z minimum and maximum like for the BOX option; Fix ROOT-10569,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4971
https://github.com/root-project/root/pull/4971:17,usability,minim,minimum,17,Manage the the Z minimum and maximum like for the BOX option; Fix ROOT-10569,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4971
https://github.com/root-project/root/pull/4972:66,deployability,version,version,66,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:818,deployability,depend,dependent,818,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:864,energy efficiency,load,load,864,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:66,integrability,version,version,66,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:110,integrability,configur,configured,110,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:818,integrability,depend,dependent,818,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:995,integrability,configur,configured,995,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:66,modifiability,version,version,66,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:92,modifiability,paramet,parameters,92,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:110,modifiability,configur,configured,110,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:818,modifiability,depend,dependent,818,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:995,modifiability,configur,configured,995,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:327,performance,time,timeout,327,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:864,performance,load,load,864,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:327,safety,timeout,timeout,327,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:818,safety,depend,dependent,818,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:110,security,configur,configured,110,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:995,security,configur,configured,995,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:818,testability,depend,dependent,818,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:828,testability,context,context,828,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:19,usability,support,support,19,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:388,usability,mous,mouse,388,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:678,usability,mous,mouse,678,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:836,usability,menu,menu,836,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4972:905,usability,Support,Support,905,"WebEve - correctly support different GL viewers; Rebased/improved version of #4966. Several parameters can be configured via rootrc file:. ```. WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore. WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called. WebEve.HTimeout: 200 # timeout in ms for elements highlight. WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset. WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact. ```. Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: . * Provide single-click mouse handler, used for tracks/jets selection. In `Three` viewer: . * Improve highlight handling in plain three.js mode. * provide position-dependent context menu. In `RCore` viewer:. * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4972
https://github.com/root-project/root/pull/4973:34,deployability,resourc,resources,34,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:145,deployability,resourc,resources,145,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:34,energy efficiency,resourc,resources,34,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:145,energy efficiency,resourc,resources,145,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:27,interoperability,share,shared,27,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:138,interoperability,share,shared,138,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:34,performance,resourc,resources,34,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:145,performance,resourc,resources,145,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:34,safety,resourc,resources,34,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:145,safety,resourc,resources,145,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:34,testability,resourc,resources,34,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:145,testability,resourc,resources,145,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:51,usability,document,documentation,51,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4973:109,usability,document,documentation,109,[Docs] Add paragraph about shared resources to RDF documentation.; Propose to add below paragraph to the RDF documentation to not exhaust shared resources.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4973
https://github.com/root-project/root/pull/4974:391,deployability,configurat,configuration,391,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:119,energy efficiency,current,currently,119,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:290,energy efficiency,reduc,reducing,290,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:391,integrability,configur,configuration,391,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:391,modifiability,configur,configuration,391,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:391,security,configur,configuration,391,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:426,security,ident,identical,426,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:478,testability,simpl,simpler,478,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4974:478,usability,simpl,simpler,478,"[RHist] Fix histogram merging; As reported in [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490), the way we currently merge histogram statistics in `Add(RHist, RHist)` yields incorrect results. Following discussion with @Axel-Naumann, this PR proposes to resolve this problem by reducing the scope of histogram merging, only accepting the merging of histograms with the same axis configuration (more precisely with identical axis binning), which allows use of a much simpler statistics summation rule. Once accepted, it will resolve [ROOT-10490](https://sft.its.cern.ch/jira/browse/ROOT-10490). cc @rete",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4974
https://github.com/root-project/root/pull/4975:243,integrability,interfac,interfaces,243,"[RF][ Remove unsafe casts in RooResolutionModel; RooResolutionModels can accept RooAbsRealLValue as convolution variable,. but the function convVar() just returned a c-style cast to RooRealVar&. Removing this required generalising a few other interfaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4975
https://github.com/root-project/root/pull/4975:243,interoperability,interfac,interfaces,243,"[RF][ Remove unsafe casts in RooResolutionModel; RooResolutionModels can accept RooAbsRealLValue as convolution variable,. but the function convVar() just returned a c-style cast to RooRealVar&. Removing this required generalising a few other interfaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4975
https://github.com/root-project/root/pull/4975:112,modifiability,variab,variable,112,"[RF][ Remove unsafe casts in RooResolutionModel; RooResolutionModels can accept RooAbsRealLValue as convolution variable,. but the function convVar() just returned a c-style cast to RooRealVar&. Removing this required generalising a few other interfaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4975
https://github.com/root-project/root/pull/4975:243,modifiability,interfac,interfaces,243,"[RF][ Remove unsafe casts in RooResolutionModel; RooResolutionModels can accept RooAbsRealLValue as convolution variable,. but the function convVar() just returned a c-style cast to RooRealVar&. Removing this required generalising a few other interfaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4975
https://github.com/root-project/root/pull/4975:13,safety,unsaf,unsafe,13,"[RF][ Remove unsafe casts in RooResolutionModel; RooResolutionModels can accept RooAbsRealLValue as convolution variable,. but the function convVar() just returned a c-style cast to RooRealVar&. Removing this required generalising a few other interfaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4975
https://github.com/root-project/root/pull/4976:187,energy efficiency,model,model,187,"WebEve - use fully custom item in SummaryView; One can add more elements in the future. No need special workarounds to ""hide"" HTML elements of StandardItem. Simplify data organization in model of SummaryView.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4976
https://github.com/root-project/root/pull/4976:143,interoperability,Standard,StandardItem,143,"WebEve - use fully custom item in SummaryView; One can add more elements in the future. No need special workarounds to ""hide"" HTML elements of StandardItem. Simplify data organization in model of SummaryView.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4976
https://github.com/root-project/root/pull/4976:187,security,model,model,187,"WebEve - use fully custom item in SummaryView; One can add more elements in the future. No need special workarounds to ""hide"" HTML elements of StandardItem. Simplify data organization in model of SummaryView.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4976
https://github.com/root-project/root/pull/4976:157,testability,Simpl,Simplify,157,"WebEve - use fully custom item in SummaryView; One can add more elements in the future. No need special workarounds to ""hide"" HTML elements of StandardItem. Simplify data organization in model of SummaryView.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4976
https://github.com/root-project/root/pull/4976:19,usability,custom,custom,19,"WebEve - use fully custom item in SummaryView; One can add more elements in the future. No need special workarounds to ""hide"" HTML elements of StandardItem. Simplify data organization in model of SummaryView.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4976
https://github.com/root-project/root/pull/4976:157,usability,Simpl,Simplify,157,"WebEve - use fully custom item in SummaryView; One can add more elements in the future. No need special workarounds to ""hide"" HTML elements of StandardItem. Simplify data organization in model of SummaryView.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4976
https://github.com/root-project/root/pull/4977:50,deployability,version,version,50,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:100,deployability,API,API,100,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:126,deployability,version,version,126,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:417,deployability,version,version,417,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:290,energy efficiency,GPU,GPU,290,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:50,integrability,version,version,50,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:100,integrability,API,API,100,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:126,integrability,version,version,126,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:417,integrability,version,version,417,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:100,interoperability,API,API,100,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:182,interoperability,specif,specific,182,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:50,modifiability,version,version,50,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:126,modifiability,version,version,126,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:417,modifiability,version,version,417,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:290,performance,GPU,GPU,290,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4977:217,security,session,session,217,Fix in MethodPyKeras for using the new Tensorflow version 2; Fix in MethodPyKeras for the different API when using Tensorflow version 2 as backend/. This affects the settings of the specific Tensorflow option for the session. Some of these options are for example needed when using the RTX GPU cards from NVidia. (e.g. gpu_options.allow_growth=True). . Note that for running with Tensorflow2 one needs to use a Keras version >= 2.3.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4977
https://github.com/root-project/root/pull/4978:16,modifiability,scal,scalar,16,properly handle scalar index variable. Fix ROOT-10557.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4978
https://github.com/root-project/root/pull/4978:29,modifiability,variab,variable,29,properly handle scalar index variable. Fix ROOT-10557.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4978
https://github.com/root-project/root/pull/4979:1,energy efficiency,Core,Core,1,[Core] Add 6.24/6.26 deprecation macros.; - Add new deprecation macros for 6.24 and 6.26. - Removed outdated deprecation macros.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4979
https://github.com/root-project/root/pull/4980:672,availability,operat,operation,672,"[Exp PyROOT][ROOT-9040] Don't set kMustCleanup to force RecursiveRemove; Both in current PyROOT and experimental, TMemoryRegulator sets. the kMustCleanup bit to true for objects it is tracking (proxied. objects). This is done to make sure RecursiveRemove is called on. them when they are deleted. ROOT-9040 points to a case when this is a problem: when calling. TMultiGraph::GetListOfGraphs(), the kMustCleanup bit of the returned. list is set to true (initially it was false) and this causes. the list to go through RecursiveRemove, which ends up in a crash. This commit tries to solve the issue by not setting kMustCleanup. in TMemoryRegulator nor relying on the delete operation on a. proxied object to call RecursiveRemove. Instead, the call to. RecursiveRemove is done explicitly before deleting the object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4980
https://github.com/root-project/root/pull/4980:81,energy efficiency,current,current,81,"[Exp PyROOT][ROOT-9040] Don't set kMustCleanup to force RecursiveRemove; Both in current PyROOT and experimental, TMemoryRegulator sets. the kMustCleanup bit to true for objects it is tracking (proxied. objects). This is done to make sure RecursiveRemove is called on. them when they are deleted. ROOT-9040 points to a case when this is a problem: when calling. TMultiGraph::GetListOfGraphs(), the kMustCleanup bit of the returned. list is set to true (initially it was false) and this causes. the list to go through RecursiveRemove, which ends up in a crash. This commit tries to solve the issue by not setting kMustCleanup. in TMemoryRegulator nor relying on the delete operation on a. proxied object to call RecursiveRemove. Instead, the call to. RecursiveRemove is done explicitly before deleting the object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4980
https://github.com/root-project/root/pull/4980:194,interoperability,prox,proxied,194,"[Exp PyROOT][ROOT-9040] Don't set kMustCleanup to force RecursiveRemove; Both in current PyROOT and experimental, TMemoryRegulator sets. the kMustCleanup bit to true for objects it is tracking (proxied. objects). This is done to make sure RecursiveRemove is called on. them when they are deleted. ROOT-9040 points to a case when this is a problem: when calling. TMultiGraph::GetListOfGraphs(), the kMustCleanup bit of the returned. list is set to true (initially it was false) and this causes. the list to go through RecursiveRemove, which ends up in a crash. This commit tries to solve the issue by not setting kMustCleanup. in TMemoryRegulator nor relying on the delete operation on a. proxied object to call RecursiveRemove. Instead, the call to. RecursiveRemove is done explicitly before deleting the object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4980
https://github.com/root-project/root/pull/4980:688,interoperability,prox,proxied,688,"[Exp PyROOT][ROOT-9040] Don't set kMustCleanup to force RecursiveRemove; Both in current PyROOT and experimental, TMemoryRegulator sets. the kMustCleanup bit to true for objects it is tracking (proxied. objects). This is done to make sure RecursiveRemove is called on. them when they are deleted. ROOT-9040 points to a case when this is a problem: when calling. TMultiGraph::GetListOfGraphs(), the kMustCleanup bit of the returned. list is set to true (initially it was false) and this causes. the list to go through RecursiveRemove, which ends up in a crash. This commit tries to solve the issue by not setting kMustCleanup. in TMemoryRegulator nor relying on the delete operation on a. proxied object to call RecursiveRemove. Instead, the call to. RecursiveRemove is done explicitly before deleting the object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4980
https://github.com/root-project/root/pull/4981:288,integrability,sub,subview,288,"WebEve - implement offline functions, fix small problems; Now highlight, selection, color, render flag can be changed offline - without running with the server. Allows to reasonably use stored application like this one:. https://linev.github.io/eve7/. Fix small problem with switching to subview like:. https://linev.github.io/eve7/#/view/Default",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4981
https://github.com/root-project/root/pull/4982:567,energy efficiency,model,model,567,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:103,integrability,Batch,BatchNormLayer,103,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:410,integrability,Batch,BatchNormLayer,410,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:263,interoperability,xml,xml,263,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:76,modifiability,layer,layer,76,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:133,modifiability,paramet,parameters,133,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:329,modifiability,paramet,parameters,329,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:516,modifiability,paramet,parameters,516,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:103,performance,Batch,BatchNormLayer,103,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:410,performance,Batch,BatchNormLayer,410,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4982:567,security,model,model,567,"Fix storing and retrieving the running means and variances of the BacthNorm layer; In this case of the BatchNormLayer there are some parameters (mu and variance) which are computed during training but they are not weights. . They need however to be stored in the xml file. For doing this, a virtual function to get and set extra parameters has been defined in the GeneralLayer. and it is re-implemented in the BatchNormLayer. A new function GeneralLayer::CopyParameters has been introduced and it allows to copy all parameters (weights , bias + extras) when saving a model",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4982
https://github.com/root-project/root/pull/4983:26,deployability,modul,modulemaps,26,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:55,deployability,Modul,Modulemaps,55,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:149,deployability,modul,modulemap,149,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:162,interoperability,specif,specifically,162,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:26,modifiability,modul,modulemaps,26,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:55,modifiability,Modul,Modulemaps,55,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:149,modifiability,modul,modulemap,149,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:26,safety,modul,modulemaps,26,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:55,safety,Modul,Modulemaps,55,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4983:149,safety,modul,modulemap,149,Adding boost and tinyxml2 modulemaps needed for CMSSW; Modulemaps are generated by https://github.com/Teemperor/boost-compile Raphael Isemann (boost modulemap is specifically tailored for CMSSW needs). CC: @vgvassilev @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4983
https://github.com/root-project/root/pull/4984:72,energy efficiency,draw,drawn,72,"Fix memory leak in TGraph2DPainter::PaintContour; Appears when TGrpah2D drawn with ""cont5"" option. Many TGraph objects are leaked, especially when zooming is performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4984
https://github.com/root-project/root/pull/4984:4,performance,memor,memory,4,"Fix memory leak in TGraph2DPainter::PaintContour; Appears when TGrpah2D drawn with ""cont5"" option. Many TGraph objects are leaked, especially when zooming is performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4984
https://github.com/root-project/root/pull/4984:158,performance,perform,performed,158,"Fix memory leak in TGraph2DPainter::PaintContour; Appears when TGrpah2D drawn with ""cont5"" option. Many TGraph objects are leaked, especially when zooming is performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4984
https://github.com/root-project/root/pull/4984:4,usability,memor,memory,4,"Fix memory leak in TGraph2DPainter::PaintContour; Appears when TGrpah2D drawn with ""cont5"" option. Many TGraph objects are leaked, especially when zooming is performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4984
https://github.com/root-project/root/pull/4984:158,usability,perform,performed,158,"Fix memory leak in TGraph2DPainter::PaintContour; Appears when TGrpah2D drawn with ""cont5"" option. Many TGraph objects are leaked, especially when zooming is performed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4984
https://github.com/root-project/root/pull/4985:556,availability,error,error,556,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:175,deployability,modul,module,175,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:262,deployability,patch,patch,262,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:326,deployability,modul,module,326,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:190,energy efficiency,current,currently,190,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:339,energy efficiency,current,currently,339,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:697,integrability,interfac,interface,697,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:801,integrability,interfac,interface,801,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:473,interoperability,xml,xml,473,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:697,interoperability,interfac,interface,697,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:801,interoperability,interfac,interface,801,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:80,modifiability,Exten,Extend,80,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:175,modifiability,modul,module,175,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:326,modifiability,modul,module,326,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:697,modifiability,interfac,interface,697,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:801,modifiability,interfac,interface,801,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:556,performance,error,error,556,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:19,safety,compl,complain,19,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:175,safety,modul,module,175,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:262,safety,patch,patch,262,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:326,safety,modul,module,326,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:349,safety,compl,complains,349,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:556,safety,error,error,556,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:19,security,compl,complain,19,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:262,security,patch,patch,262,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:349,security,compl,complains,349,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:120,usability,support,support,120,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4985:556,usability,error,error,556,"[cxxmodules] Don't complain about redeclaration of declared annotated…; … enum. Extend root-project/root@c14934ec983 to support the case where the enum is deserialized from a module and the currently parsed enum comes from an annotated forward declaration. This patch should allow enabling the cmssw DataFormats/PatCandidates module which currently complains with:. ```. scripts/edmCheckClassVersion -l libCondFormatsL1TObjects.so -x CondFormats/L1TObjects/src/classes_def.xml. DataFormatsL1GlobalTrigger_xr dictionary forward declarations' payload:9:216: error: enumeration previously declared with nonfixed underlying type. ...__attribute__((annotate(""$clingAutoload$DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h""))) L1GtObject : unsigned int;. ^. DataFormats/L1GlobalTrigger/interface/L1GtObject.h:28:6: note: previous declaration is here. enum L1GtObject {. ^. ```. cc: @smuzaffar, @davidlange6, @oshadura.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4985
https://github.com/root-project/root/pull/4987:61,usability,behavi,behavior,61,fix for 2nd part of ROOT-10528 ; Mainly fix TClass::GetClass behavior when AutoLoading is disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4987
https://github.com/root-project/root/pull/4988:38,deployability,releas,release,38,Remove the deprecated in the previous release code.; cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4988
https://github.com/root-project/root/pull/4989:38,testability,context,context,38,"[cling] Capture/reset expression eval context (ROOT-10511):; Without resetting the eval context to the Parser default (PotentiallyEvaluated),. recursive parsing can potentially assume wrong context and not emit referenced entities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4989
https://github.com/root-project/root/pull/4989:88,testability,context,context,88,"[cling] Capture/reset expression eval context (ROOT-10511):; Without resetting the eval context to the Parser default (PotentiallyEvaluated),. recursive parsing can potentially assume wrong context and not emit referenced entities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4989
https://github.com/root-project/root/pull/4989:190,testability,context,context,190,"[cling] Capture/reset expression eval context (ROOT-10511):; Without resetting the eval context to the Parser default (PotentiallyEvaluated),. recursive parsing can potentially assume wrong context and not emit referenced entities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4989
https://github.com/root-project/root/pull/4990:34,testability,trace,traceEvalHook,34,"[RF] Remove deprecated RooAbsPdf::traceEvalHook().; RooAbsPdf::traceEvalHook() is marked obsolete in a comment since 2001. It isn't used inside of RooFit, was deprecated in root 6.20,. and is removed entirely now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4990
https://github.com/root-project/root/pull/4990:63,testability,trace,traceEvalHook,63,"[RF] Remove deprecated RooAbsPdf::traceEvalHook().; RooAbsPdf::traceEvalHook() is marked obsolete in a comment since 2001. It isn't used inside of RooFit, was deprecated in root 6.20,. and is removed entirely now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4990
https://github.com/root-project/root/pull/4991:312,deployability,contain,contain,312,"[Exp PyROOT] Solve warnings in Python2.7, Clang and cxx17; Solve the following warnings:. https://github.com/root-project/root/pull/4945#issuecomment-583468583. due to two reasons:. 1. Not correctly matching `""AppleClang""` - use `MATCHES ""Clang""` to both match `""Clang""` and `""AppleClang""`. 2. Python2.7 headers contain the `register` keyword which is not allowed anymore in cxx17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4991
https://github.com/root-project/root/pull/4992:58,energy efficiency,model,model,58,WebEve - small improvments; Provide hook to create custom model in SummaryView. Use proper method for setting fRnrSelf field (used in checkbox). Prevent from using undefined values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4992
https://github.com/root-project/root/pull/4992:145,safety,Prevent,Prevent,145,WebEve - small improvments; Provide hook to create custom model in SummaryView. Use proper method for setting fRnrSelf field (used in checkbox). Prevent from using undefined values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4992
https://github.com/root-project/root/pull/4992:58,security,model,model,58,WebEve - small improvments; Provide hook to create custom model in SummaryView. Use proper method for setting fRnrSelf field (used in checkbox). Prevent from using undefined values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4992
https://github.com/root-project/root/pull/4992:145,security,Preven,Prevent,145,WebEve - small improvments; Provide hook to create custom model in SummaryView. Use proper method for setting fRnrSelf field (used in checkbox). Prevent from using undefined values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4992
https://github.com/root-project/root/pull/4992:36,testability,hook,hook,36,WebEve - small improvments; Provide hook to create custom model in SummaryView. Use proper method for setting fRnrSelf field (used in checkbox). Prevent from using undefined values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4992
https://github.com/root-project/root/pull/4992:51,usability,custom,custom,51,WebEve - small improvments; Provide hook to create custom model in SummaryView. Use proper method for setting fRnrSelf field (used in checkbox). Prevent from using undefined values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4992
https://github.com/root-project/root/pull/4993:16,modifiability,scal,scalar,16,properly handle scalar index variable. Fix ROOT-10557. v620;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4993
https://github.com/root-project/root/pull/4993:29,modifiability,variab,variable,29,properly handle scalar index variable. Fix ROOT-10557. v620;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4993
https://github.com/root-project/root/pull/4994:16,modifiability,scal,scalar,16,properly handle scalar index variable. Fix ROOT-10557. v620;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4994
https://github.com/root-project/root/pull/4994:29,modifiability,variab,variable,29,properly handle scalar index variable. Fix ROOT-10557. v620;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4994
https://github.com/root-project/root/pull/4995:660,availability,State,State,660,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:759,availability,avail,available,759,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:846,deployability,fail,failed,846,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:830,energy efficiency,load,loading,830,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:660,integrability,State,State,660,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:150,interoperability,semant,semantic,150,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:137,modifiability,exten,extended,137,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:436,modifiability,paramet,parameter,436,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:830,performance,load,loading,830,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:759,reliability,availab,available,759,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:846,reliability,fail,failed,846,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:6,safety,Prevent,Prevent,6,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:209,safety,prevent,preventing,209,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:759,safety,avail,available,759,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:6,security,Preven,Prevent,6,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:209,security,preven,preventing,209,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4995:759,security,availab,available,759,"meta: Prevent CheckClassInfo from autoloading if it is globally disab…; …led. Commit 04576cbe952993832153b4455f934f267a7c259e (silently) extended the semantic of 'disabling class autoloading',. in addition to preventing calls to AutoLoad it also made AutoLoad itself to return immediately when the autoloading. (i.e. ""AutoLoad"" becomes ""MaybeAutoLoad""). However, it left untouched the code in CheckClassInfo that handled its ""autoload"" parameter and which still explicitly. enabled AutoLoading when requested. This inconsistency lead to the 2nd part of ROOT-10528 where a class to TClass::GetClass for enums when the AutoLoading. was disabled lead to a broken State where an ""interpreted"" TClass (for the namespace holding the enum) even though a. library is available for it. This happened because TClass::GetClass explicit auto-loading attempt failed but. CheckClassInfo's autoloading and search for the namespace succeeded.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4995
https://github.com/root-project/root/pull/4996:4,performance,memor,memory,4,"Fix memory leak in nbmain; When copy many files, list should be deleted at the end",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4996
https://github.com/root-project/root/pull/4996:4,usability,memor,memory,4,"Fix memory leak in nbmain; When copy many files, list should be deleted at the end",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4996
https://github.com/root-project/root/pull/4997:10,performance,memor,memory,10,[gui] fix memory leak in TGFileDialog ; One should delete list of selected items,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4997
https://github.com/root-project/root/pull/4997:10,usability,memor,memory,10,[gui] fix memory leak in TGFileDialog ; One should delete list of selected items,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4997
https://github.com/root-project/root/pull/4998:15,performance,memor,memory,15,[mutiproc] fix memory leak with use of fMon.GetListOfActivities(); Returned object must be destroyed,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4998
https://github.com/root-project/root/pull/4998:15,usability,memor,memory,15,[mutiproc] fix memory leak with use of fMon.GetListOfActivities(); Returned object must be destroyed,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4998
https://github.com/root-project/root/pull/4999:73,safety,test,test,73,Fix mem leak in sqlitetest.cxx; It is not good style to keep mem leak in test macro,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4999
https://github.com/root-project/root/pull/4999:73,testability,test,test,73,Fix mem leak in sqlitetest.cxx; It is not good style to keep mem leak in test macro,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/4999
https://github.com/root-project/root/pull/5001:604,availability,Error,Error,604,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1040,availability,error,errors,1040,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:154,deployability,build,build,154,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:297,deployability,build,build,297,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:335,deployability,depend,depend,335,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:382,deployability,version,version,382,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:477,deployability,version,version,477,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:538,deployability,version,version,538,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:653,deployability,Modul,Modules,653,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:786,deployability,Stack,Stack,786,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:859,deployability,Modul,Modules,859,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:931,deployability,modul,modules,931,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1085,deployability,build,build,1085,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1120,deployability,log,log,1120,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1154,deployability,build,build,1154,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1188,deployability,log,log,1188,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1215,deployability,fail,failed,1215,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1223,deployability,Build,Build,1223,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1285,deployability,modul,modules,1285,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:335,integrability,depend,depend,335,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:382,integrability,version,version,382,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:477,integrability,version,version,477,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:538,integrability,version,version,538,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:561,integrability,compon,components,561,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:702,integrability,messag,message,702,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1016,integrability,Configur,Configuring,1016,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1200,integrability,Configur,Configure,1200,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1349,integrability,COMPON,COMPONENTS,1349,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:561,interoperability,compon,components,561,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:636,interoperability,share,share,636,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:702,interoperability,messag,message,702,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:730,interoperability,specif,specified,730,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:842,interoperability,share,share,842,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1349,interoperability,COMPON,COMPONENTS,1349,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:335,modifiability,depend,depend,335,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:382,modifiability,version,version,382,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:477,modifiability,version,version,477,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:538,modifiability,version,version,538,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:561,modifiability,compon,components,561,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:653,modifiability,Modul,Modules,653,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:859,modifiability,Modul,Modules,859,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:931,modifiability,modul,modules,931,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1016,modifiability,Configur,Configuring,1016,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1200,modifiability,Configur,Configure,1200,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1285,modifiability,modul,modules,1285,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1349,modifiability,COMPON,COMPONENTS,1349,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1486,modifiability,pac,package,1486,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:604,performance,Error,Error,604,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1040,performance,error,errors,1040,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1215,reliability,fail,failed,1215,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:335,safety,depend,depend,335,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:604,safety,Error,Error,604,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:653,safety,Modul,Modules,653,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:859,safety,Modul,Modules,859,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:931,safety,modul,modules,931,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1040,safety,error,errors,1040,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1120,safety,log,log,1120,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1188,safety,log,log,1188,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1285,safety,modul,modules,1285,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1449,safety,avoid,avoid,1449,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1016,security,Configur,Configuring,1016,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1120,security,log,log,1120,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1188,security,log,log,1188,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1200,security,Configur,Configure,1200,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:335,testability,depend,depend,335,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1120,testability,log,log,1120,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1188,testability,log,log,1188,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:139,usability,User,Users,139,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:221,usability,User,Users,221,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:282,usability,User,Users,282,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:459,usability,Prefer,Preferring,459,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:604,usability,Error,Error,604,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1040,usability,error,errors,1040,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1070,usability,User,Users,1070,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1139,usability,User,Users,1139,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5001:1455,usability,stop,stopping,1455,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb (spotted in Wi…; …ndows). This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found (?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5001
https://github.com/root-project/root/pull/5002:579,availability,Error,Error,579,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1015,availability,error,errors,1015,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:129,deployability,build,build,129,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:272,deployability,build,build,272,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:310,deployability,depend,depend,310,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:357,deployability,version,version,357,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:452,deployability,version,version,452,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:513,deployability,version,version,513,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:628,deployability,Modul,Modules,628,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:761,deployability,Stack,Stack,761,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:834,deployability,Modul,Modules,834,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:906,deployability,modul,modules,906,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1060,deployability,build,build,1060,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1095,deployability,log,log,1095,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1129,deployability,build,build,1129,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1163,deployability,log,log,1163,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1190,deployability,fail,failed,1190,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1198,deployability,Build,Build,1198,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1260,deployability,modul,modules,1260,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:310,integrability,depend,depend,310,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:357,integrability,version,version,357,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:452,integrability,version,version,452,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:513,integrability,version,version,513,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:536,integrability,compon,components,536,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:677,integrability,messag,message,677,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:991,integrability,Configur,Configuring,991,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1175,integrability,Configur,Configure,1175,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1324,integrability,COMPON,COMPONENTS,1324,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:536,interoperability,compon,components,536,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:611,interoperability,share,share,611,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:677,interoperability,messag,message,677,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:705,interoperability,specif,specified,705,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:817,interoperability,share,share,817,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1324,interoperability,COMPON,COMPONENTS,1324,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:310,modifiability,depend,depend,310,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:357,modifiability,version,version,357,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:452,modifiability,version,version,452,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:513,modifiability,version,version,513,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:536,modifiability,compon,components,536,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:628,modifiability,Modul,Modules,628,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:834,modifiability,Modul,Modules,834,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:906,modifiability,modul,modules,906,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:991,modifiability,Configur,Configuring,991,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1175,modifiability,Configur,Configure,1175,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1260,modifiability,modul,modules,1260,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1324,modifiability,COMPON,COMPONENTS,1324,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1461,modifiability,pac,package,1461,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:579,performance,Error,Error,579,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1015,performance,error,errors,1015,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1190,reliability,fail,failed,1190,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:310,safety,depend,depend,310,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:579,safety,Error,Error,579,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:628,safety,Modul,Modules,628,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:834,safety,Modul,Modules,834,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:906,safety,modul,modules,906,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1015,safety,error,errors,1015,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1095,safety,log,log,1095,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1163,safety,log,log,1163,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1260,safety,modul,modules,1260,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1424,safety,avoid,avoid,1424,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:991,security,Configur,Configuring,991,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1095,security,log,log,1095,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1163,security,log,log,1163,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1175,security,Configur,Configure,1175,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:310,testability,depend,depend,310,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1095,testability,log,log,1095,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1163,testability,log,log,1163,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:114,usability,User,Users,114,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:196,usability,User,Users,196,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:257,usability,User,Users,257,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:434,usability,Prefer,Preferring,434,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:579,usability,Error,Error,579,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1015,usability,error,errors,1015,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1045,usability,User,Users,1045,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1114,usability,User,Users,1114,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5002:1430,usability,stop,stopping,1430,"[CMake] Fix 'Numpy not found' bug introduced in 424ecb; This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date. the file 'C:/Users/sftnight/git/master/CMakeLists.txt'. is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'. result='-1'. -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299. -- Looking for python. -- Preferring Python version 3. -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development. CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):. No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(). Call Stack (most recent call first):. C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args). cmake/modules/SearchRootCoreDeps.cmake:72 (find_package). CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred! See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"". See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"". CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:. find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows. Apparently the keyword REQUIRED is not enough to avoid stopping the. compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5002
https://github.com/root-project/root/pull/5003:319,integrability,wrap,wraps,319,"[RF][ROOT-10572] Remove size limitation of RooStringVar.; RooStringVar is a class to store string values. It limits the number of. characters that can be stored, leading to a crash when trying to plot. ranges with long names. This limitation was removed by implementing. equivalent functionality with a class that just wraps a std::string. It further had an unnecessary base class, which was removed, and where. possible, #includes of RooStringVar itself were removed. It should not. be used whenever possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5003
https://github.com/root-project/root/pull/5004:27,safety,compl,complain,27,"Revert ""[cxxmodules] Don't complain about redeclaration of declared annotated enum; This reverts commit fb4583b7a74dc93ec0949b9ecd8b7f21f33aff77. Causes segmentation violation during rootcling_stage1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5004
https://github.com/root-project/root/pull/5004:27,security,compl,complain,27,"Revert ""[cxxmodules] Don't complain about redeclaration of declared annotated enum; This reverts commit fb4583b7a74dc93ec0949b9ecd8b7f21f33aff77. Causes segmentation violation during rootcling_stage1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5004
https://github.com/root-project/root/pull/5005:4,performance,memor,memory,4,Fix memory leaks in TApplicationServer;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5005
https://github.com/root-project/root/pull/5005:4,usability,memor,memory,4,Fix memory leaks in TApplicationServer;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5005
https://github.com/root-project/root/pull/5006:95,deployability,stack,stack,95,[math] fix memory leak in TSPlot::SetTreeSelection; Do not create TList dynamically - just use stack object,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5006
https://github.com/root-project/root/pull/5006:11,performance,memor,memory,11,[math] fix memory leak in TSPlot::SetTreeSelection; Do not create TList dynamically - just use stack object,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5006
https://github.com/root-project/root/pull/5006:11,usability,memor,memory,11,[math] fix memory leak in TSPlot::SetTreeSelection; Do not create TList dynamically - just use stack object,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5006
https://github.com/root-project/root/pull/5008:32,integrability,schema,schema,32,[ntuple] fix field numbering in schema printing;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5008
https://github.com/root-project/root/pull/5009:0,availability,Restor,Restore,0,Restore expected rootcling default verbosity level;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5009
https://github.com/root-project/root/pull/5009:0,reliability,Restor,Restore,0,Restore expected rootcling default verbosity level;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5009
https://github.com/root-project/root/pull/5010:16,availability,redund,redundancy,16,"TH1::Fill Avoid redundancy; Hello there. I fail to see the difference between:. ```. h->Fill(3.1415). ``` . and . ```. h->Fill(3.1415,1.). ``` . Why are we using defining different functions for both of them? I came across this when performing `h->Fill(""StringBarLabelHere"")` which fails as I always have to set the weight to `1.` in every call.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5010
https://github.com/root-project/root/pull/5010:16,deployability,redundan,redundancy,16,"TH1::Fill Avoid redundancy; Hello there. I fail to see the difference between:. ```. h->Fill(3.1415). ``` . and . ```. h->Fill(3.1415,1.). ``` . Why are we using defining different functions for both of them? I came across this when performing `h->Fill(""StringBarLabelHere"")` which fails as I always have to set the weight to `1.` in every call.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5010
https://github.com/root-project/root/pull/5010:43,deployability,fail,fail,43,"TH1::Fill Avoid redundancy; Hello there. I fail to see the difference between:. ```. h->Fill(3.1415). ``` . and . ```. h->Fill(3.1415,1.). ``` . Why are we using defining different functions for both of them? I came across this when performing `h->Fill(""StringBarLabelHere"")` which fails as I always have to set the weight to `1.` in every call.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/5010
