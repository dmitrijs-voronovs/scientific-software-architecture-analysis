id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/2391:1396,performance,error,error,1396,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1566,performance,error,error,1566,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:22,reliability,fail,failure,22,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:186,reliability,doe,does,186,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1668,reliability,fail,failed,1668,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:690,safety,except,exception,690,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1396,safety,error,error,1396,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1566,safety,error,error,1566,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1658,testability,Assert,Assertion,1658,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:53,usability,Custom,CustomBuild,53,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:85,usability,Custom,Custom,85,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:490,usability,Visual,Visual,490,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:522,usability,Tool,Tools,522,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:626,usability,Visual,Visual,626,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:658,usability,Tool,Tools,658,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:768,usability,Visual,Visual,768,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:800,usability,Tool,Tools,800,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:912,usability,Visual,Visual,912,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:944,usability,Tool,Tools,944,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1052,usability,Visual,Visual,1052,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1084,usability,Tool,Tools,1084,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1192,usability,Visual,Visual,1192,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1224,usability,Tool,Tools,1224,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1316,usability,Visual,Visual,1316,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1348,usability,Tool,Tools,1348,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1396,usability,error,error,1396,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1566,usability,error,error,1566,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2391:1836,usability,tool,tools,1836,"@bellenot The windows failure is due:. ```. 23:43:52 CustomBuild:. 23:43:52 Building Custom Rule C:/build/workspace/root-pullrequests-build/root/core/base/CMakeLists.txt. 23:43:52 CMake does not need to re-run because C:/build/workspace/root-pullrequests-build/build/core/base/CMakeFiles/generate.stamp is up-to-date. 23:43:52 Generating G__Core.cxx, ../../lib/libCore.rootmap. 23:43:52 In file included from input_line_1:1:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\new:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\exception:7:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\type_traits:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xstddef:6:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\cstddef:8:. 23:43:52 In file included from C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\xtr1common:6:. 23:43:52 80>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.14.26428\\include\yvals.h(297,5): error G47C585C4: STL1000: Unexpected compiler version, expected Clang 6 or newer. [C:\build\workspace\root-pullrequests-build\build\core\base\G__Core.vcxproj]. 23:43:52 #error STL1000: Unexpected compiler version, expected Clang 6 or newer. 23:43:52 ^. 23:43:52 Assertion failed: (DC->hasExternalVisibleStorage() || Pos != Map->end()) && ""no lookup entry for decl"", file c:\build\workspace\root-pullrequests-build\root\interpreter\llvm\src\tools\clang\lib\ast\declbase.cpp, line 1362. 23:43:52 Exit code 0xc0000409. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2391
https://github.com/root-project/root/pull/2392:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2392
https://github.com/root-project/root/pull/2392:156,interoperability,conflict,conflicts,156,"Superseded by #2430 which introduces all changes except the renames. A future PR will re-introduce the renaming of things, whenever it will cause the least conflicts for other people working on RDF.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2392
https://github.com/root-project/root/pull/2392:49,safety,except,except,49,"Superseded by #2430 which introduces all changes except the renames. A future PR will re-introduce the renaming of things, whenever it will cause the least conflicts for other people working on RDF.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2392
https://github.com/root-project/root/pull/2393:25,integrability,interfac,interface,25,This looks like a useful interface. Too bad we can return a TType (or RType) ... [since it does not exist yet :( ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2393
https://github.com/root-project/root/pull/2393:25,interoperability,interfac,interface,25,This looks like a useful interface. Too bad we can return a TType (or RType) ... [since it does not exist yet :( ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2393
https://github.com/root-project/root/pull/2393:25,modifiability,interfac,interface,25,This looks like a useful interface. Too bad we can return a TType (or RType) ... [since it does not exist yet :( ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2393
https://github.com/root-project/root/pull/2393:91,reliability,doe,does,91,This looks like a useful interface. Too bad we can return a TType (or RType) ... [since it does not exist yet :( ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2393
https://github.com/root-project/root/pull/2394:28,safety,review,review,28,Thank you @bluehood for the review! I addressed all your comments,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2394
https://github.com/root-project/root/pull/2394:28,testability,review,review,28,Thank you @bluehood for the review! I addressed all your comments,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2394
https://github.com/root-project/root/pull/2394:48,deployability,build,build,48,"@imaxoi please rebase on master and start a new build, things should be working now",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2394
https://github.com/root-project/root/pull/2396:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:57,availability,failur,failure,57,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:11,deployability,build,build,11,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:57,deployability,fail,failure,57,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:57,performance,failur,failure,57,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:57,reliability,fail,failure,57,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:46,safety,test,testKalman,46,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:46,testability,test,testKalman,46,@phsft-bot build just on mac1013/native. This testKalman failure is persistent,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:55,energy efficiency,optim,optimization,55,"The reason of `isACLiC` branch in rootclingmain is for optimization. CompileMacro is calling rootcling just because it wants to generate dictionary, which is used to initialize gAutoLoads with {symbol, library name}. In this case, we do not want to generate pcm nor check it's validity, it's just unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:55,performance,optimiz,optimization,55,"The reason of `isACLiC` branch in rootclingmain is for optimization. CompileMacro is calling rootcling just because it wants to generate dictionary, which is used to initialize gAutoLoads with {symbol, library name}. In this case, we do not want to generate pcm nor check it's validity, it's just unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:277,safety,valid,validity,277,"The reason of `isACLiC` branch in rootclingmain is for optimization. CompileMacro is calling rootcling just because it wants to generate dictionary, which is used to initialize gAutoLoads with {symbol, library name}. In this case, we do not want to generate pcm nor check it's validity, it's just unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:134,integrability,event,eventually,134,"> The reason of isACLiC branch ... we do not want to generate pcm nor check it's validity, it's just unrelated. Why wouldn't we want (eventually) to have ACLiC generate completely regular libraries including pcms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:81,safety,valid,validity,81,"> The reason of isACLiC branch ... we do not want to generate pcm nor check it's validity, it's just unrelated. Why wouldn't we want (eventually) to have ACLiC generate completely regular libraries including pcms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:169,safety,compl,completely,169,"> The reason of isACLiC branch ... we do not want to generate pcm nor check it's validity, it's just unrelated. Why wouldn't we want (eventually) to have ACLiC generate completely regular libraries including pcms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:169,security,compl,completely,169,"> The reason of isACLiC branch ... we do not want to generate pcm nor check it's validity, it's just unrelated. Why wouldn't we want (eventually) to have ACLiC generate completely regular libraries including pcms?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:180,deployability,modul,modules,180,"As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. I believe eventually we can remove this and just use modules infrastructure ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:188,deployability,infrastructur,infrastructure,188,"As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. I believe eventually we can remove this and just use modules infrastructure ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:137,integrability,event,eventually,137,"As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. I believe eventually we can remove this and just use modules infrastructure ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:180,modifiability,modul,modules,180,"As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. I believe eventually we can remove this and just use modules infrastructure ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:180,safety,modul,modules,180,"As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. I believe eventually we can remove this and just use modules infrastructure ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:342,availability,operat,operator,342,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:199,deployability,contain,contains,199,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:584,deployability,modul,module,584,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:609,deployability,contain,contains,609,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:475,energy efficiency,measur,measured,475,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:327,integrability,wrap,wrapper,327,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:318,interoperability,Prox,Proxies,318,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:327,interoperability,wrapper,wrapper,327,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:584,modifiability,modul,module,584,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:496,performance,content,content,496,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:460,safety,reme,remember,460,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:584,safety,modul,module,584,"> As far as I understood, CompileMacro is using rootcling and rootmaps only for initializing gAutoLoads, which is a huge vector. Not only, it also generate the dictionary source file which (for now) contains scaffolding C++ functions (GenerateInitInstance), accelerator functions to bypass the interpreter (Collection Proxies, wrapper around operator new and delete, etc.) and implementation of member function declared by ClassDef. Also, and related, I can't remember if we measured whether the content of the root-io-pcm is providing an acceleration or not compare to just with the module. (The root-io-pcm contains pre-digested list of data members and offsets and a few other things).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:89,deployability,modul,modules,89,"@pcanal . What is root-io-pcm? Do you mean rdict.pcm? I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:89,modifiability,modul,modules,89,"@pcanal . What is root-io-pcm? Do you mean rdict.pcm? I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:166,performance,perform,performance,166,"@pcanal . What is root-io-pcm? Do you mean rdict.pcm? I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:89,safety,modul,modules,89,"@pcanal . What is root-io-pcm? Do you mean rdict.pcm? I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:166,usability,perform,performance,166,"@pcanal . What is root-io-pcm? Do you mean rdict.pcm? I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:88,deployability,modul,modules,88,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:214,energy efficiency,measur,measure,214,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:88,modifiability,modul,modules,88,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:165,performance,perform,performance,165,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:88,safety,modul,modules,88,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:183,safety,test,test,183,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:183,testability,test,test,183,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:165,usability,perform,performance,165,"> What is root-io-pcm? Do you mean rdict.pcm? Yes. > I once tried to kill rdict.pcm for modules like we're doing here for rootmap, but it made no difference for the performance. What test did you run? What did you measure?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:135,deployability,modul,modules,135,"Hi @pcanal ,. I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:69,energy efficiency,measur,measurements,69,"Hi @pcanal ,. I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:135,modifiability,modul,modules,135,"Hi @pcanal ,. I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:36,performance,time,time,36,"Hi @pcanal ,. I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:57,performance,perform,performance,57,"Hi @pcanal ,. I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:135,safety,modul,modules,135,"Hi @pcanal ,. I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:57,usability,perform,performance,57,"Hi @pcanal ,. I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:435,deployability,releas,release,435,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:448,deployability,modul,module,448,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:618,deployability,contain,contains,618,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:710,deployability,contain,contains,710,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:963,deployability,updat,update,963,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:976,deployability,build,build,976,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:1023,deployability,instal,install,1023,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:57,energy efficiency,measur,measurements,57,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:172,energy efficiency,load,loaded,172,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:448,modifiability,modul,module,448,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:695,modifiability,extens,extension,695,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:24,performance,time,time,24,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:45,performance,perform,performance,45,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:172,performance,load,loaded,172,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:129,safety,test,test,129,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:227,safety,test,test,227,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:243,safety,test,test,243,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:448,safety,modul,module,448,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:963,safety,updat,update,963,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:963,security,updat,update,963,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:129,testability,test,test,129,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:227,testability,test,test,227,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:243,testability,test,test,243,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:45,usability,perform,performance,45,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:288,usability,user,user,288,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:459,usability,user,user,459,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:955,usability,user,user,955,"> I usually run startup time and hsimple for performance measurements. This is a good first step but it not sufficient to stress test the difference (Most of the libraries loaded in this case do not have a rdict.pcm, to stress test we need to test a variety of cases with large number of user libraries and classes). > Removing _rdict.pcm files is whole another story which atm we are not tackling. Fair enough. However before we can 'release' the module for user to start using we need to decided whether rootcling/genreflex will. a) generate both a pcm and a rdict.pcm. b) generate a file still named rdict.pcm that contains both the clang pcm and the rdict.pcm. c) generate a file with a new extension that contains both the clang pcm and the rdict.pcm. d) generate only the pcm (renaming it rdict.pcm) . e) generate only the pcm (and drop usage of rdict.pcm). The reason we **need** to make a decision is because option a), c) and e) **requires** the user to update their build system to copy yet another file to their install lib directory [For **only** the libraries that have migrated to pcms] [On the other hand b) and d) only require adding an option to the rootcling/genreflex]. Cheers,. Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:18,deployability,fail,failing,18,"This test is also failing in master incremental, so it's unrelated . https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/6849/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:127,deployability,BUILD,BUILDTYPE,127,"This test is also failing in master incremental, so it's unrelated . https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/6849/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:18,reliability,fail,failing,18,"This test is also failing in master incremental, so it's unrelated . https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/6849/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:5,safety,test,test,5,"This test is also failing in master incremental, so it's unrelated . https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/6849/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:5,testability,test,test,5,"This test is also failing in master incremental, so it's unrelated . https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/6849/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:23,availability,error,error,23,"I believe so, well the error is exactly the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:23,performance,error,error,23,"I believe so, well the error is exactly the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:23,safety,error,error,23,"I believe so, well the error is exactly the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:23,usability,error,error,23,"I believe so, well the error is exactly the same..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2396:17,usability,prefer,prefer,17,"@pcanal, I would prefer to merge this and move the discussion at the PR (that @yamaguchi1024 will open) for removal of _rdict.pcms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2396
https://github.com/root-project/root/pull/2397:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2397
https://github.com/root-project/root/pull/2397:22,safety,compl,complex,22,The right fix is more complex.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2397
https://github.com/root-project/root/pull/2397:22,security,compl,complex,22,The right fix is more complex.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2397
https://github.com/root-project/root/pull/2398:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2398
https://github.com/root-project/root/pull/2400:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2400
https://github.com/root-project/root/pull/2402:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2402
https://github.com/root-project/root/pull/2403:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2403
https://github.com/root-project/root/pull/2405:55,integrability,messag,message,55,Do you mean 'duplicated' or 'deprecated' in the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2405
https://github.com/root-project/root/pull/2405:55,interoperability,messag,message,55,Do you mean 'duplicated' or 'deprecated' in the commit message?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2405
https://github.com/root-project/root/pull/2406:295,deployability,modul,modules,295,"Hi Oksana, this is not necessary. If you define a macro named `add_subdirectory()` it will replace the regular one, and you can then call CMake's `add_subdirectory()` as `_add_subdirectory()`. I already do this with `find_package()` [here](https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L7).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:295,modifiability,modul,modules,295,"Hi Oksana, this is not necessary. If you define a macro named `add_subdirectory()` it will replace the regular one, and you can then call CMake's `add_subdirectory()` as `_add_subdirectory()`. I already do this with `find_package()` [here](https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L7).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:295,safety,modul,modules,295,"Hi Oksana, this is not necessary. If you define a macro named `add_subdirectory()` it will replace the regular one, and you can then call CMake's `add_subdirectory()` as `_add_subdirectory()`. I already do this with `find_package()` [here](https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L7).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:20,usability,close,close,20,@oshadura Should we close this? (see my [comment](https://github.com/root-project/root/pull/2406#issuecomment-409551530)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:116,integrability,compon,components,116,"@amadio I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:160,integrability,sub,sub,160,"@amadio I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:116,interoperability,compon,components,116,"@amadio I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:116,modifiability,compon,components,116,"@amadio I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:229,modifiability,pac,package,229,"@amadio I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:110,integrability,compon,components,110,"> I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory.. If the directory structure for a ROOT package has a special file, just call your special macro when you find the file, and `_add_subdirectory()` otherwise, and it will not interfere with regular `add_subdirectory()` calls from other places.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:154,integrability,sub,sub,154,"> I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory.. If the directory structure for a ROOT package has a special file, just call your special macro when you find the file, and `_add_subdirectory()` otherwise, and it will not interfere with regular `add_subdirectory()` calls from other places.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:110,interoperability,compon,components,110,"> I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory.. If the directory structure for a ROOT package has a special file, just call your special macro when you find the file, and `_add_subdirectory()` otherwise, and it will not interfere with regular `add_subdirectory()` calls from other places.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:110,modifiability,compon,components,110,"> I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory.. If the directory structure for a ROOT package has a special file, just call your special macro when you find the file, and `_add_subdirectory()` otherwise, and it will not interfere with regular `add_subdirectory()` calls from other places.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:223,modifiability,pac,package,223,"> I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory.. If the directory structure for a ROOT package has a special file, just call your special macro when you find the file, and `_add_subdirectory()` otherwise, and it will not interfere with regular `add_subdirectory()` calls from other places.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:352,modifiability,pac,package,352,"> I tryied your advise but it will be hard because some add_subdirectories() are not related to actually ROOT components, but just a way to include a new sub directory with its CMakeLists.txt file. I want to introduce ROOT package map and in these case and hide some extra functionality in add_root_subdirectory.. If the directory structure for a ROOT package has a special file, just call your special macro when you find the file, and `_add_subdirectory()` otherwise, and it will not interfere with regular `add_subdirectory()` calls from other places.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:366,availability,consist,consistent,366,"Wouldn't overriding `add_subdirectory()` break third-party users who use ROOT's build system as a backbone for their own projects? I find this approach quite dangerous and enabling silent change of behavior. I cannot see anything wrong with having an explicit macro telling everybody this is a ""ROOT"" subdirectory which will be treated in a special way. And, that's consistent to the rest of our cmake (except for find_package).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:80,deployability,build,build,80,"Wouldn't overriding `add_subdirectory()` break third-party users who use ROOT's build system as a backbone for their own projects? I find this approach quite dangerous and enabling silent change of behavior. I cannot see anything wrong with having an explicit macro telling everybody this is a ""ROOT"" subdirectory which will be treated in a special way. And, that's consistent to the rest of our cmake (except for find_package).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:301,integrability,sub,subdirectory,301,"Wouldn't overriding `add_subdirectory()` break third-party users who use ROOT's build system as a backbone for their own projects? I find this approach quite dangerous and enabling silent change of behavior. I cannot see anything wrong with having an explicit macro telling everybody this is a ""ROOT"" subdirectory which will be treated in a special way. And, that's consistent to the rest of our cmake (except for find_package).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:403,safety,except,except,403,"Wouldn't overriding `add_subdirectory()` break third-party users who use ROOT's build system as a backbone for their own projects? I find this approach quite dangerous and enabling silent change of behavior. I cannot see anything wrong with having an explicit macro telling everybody this is a ""ROOT"" subdirectory which will be treated in a special way. And, that's consistent to the rest of our cmake (except for find_package).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:59,usability,user,users,59,"Wouldn't overriding `add_subdirectory()` break third-party users who use ROOT's build system as a backbone for their own projects? I find this approach quite dangerous and enabling silent change of behavior. I cannot see anything wrong with having an explicit macro telling everybody this is a ""ROOT"" subdirectory which will be treated in a special way. And, that's consistent to the rest of our cmake (except for find_package).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:198,usability,behavi,behavior,198,"Wouldn't overriding `add_subdirectory()` break third-party users who use ROOT's build system as a backbone for their own projects? I find this approach quite dangerous and enabling silent change of behavior. I cannot see anything wrong with having an explicit macro telling everybody this is a ""ROOT"" subdirectory which will be treated in a special way. And, that's consistent to the rest of our cmake (except for find_package).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:366,usability,consist,consistent,366,"Wouldn't overriding `add_subdirectory()` break third-party users who use ROOT's build system as a backbone for their own projects? I find this approach quite dangerous and enabling silent change of behavior. I cannot see anything wrong with having an explicit macro telling everybody this is a ""ROOT"" subdirectory which will be treated in a special way. And, that's consistent to the rest of our cmake (except for find_package).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:50,deployability,contain,contain,50,"If behavior only changes for the directories that contain the manifest file, nothing will break. I think adding a special macro is wrong because it will require us to remember to use that instead of the regular `add_directory()` call. This is already a problem with `ROOT_ADD_TEST_SUBDIRECTORY()`, so I don't want new problems with another special macro for adding subdirectories. Please let's use the approach I'm suggesting. It will be much easier and will require less changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:365,integrability,sub,subdirectories,365,"If behavior only changes for the directories that contain the manifest file, nothing will break. I think adding a special macro is wrong because it will require us to remember to use that instead of the regular `add_directory()` call. This is already a problem with `ROOT_ADD_TEST_SUBDIRECTORY()`, so I don't want new problems with another special macro for adding subdirectories. Please let's use the approach I'm suggesting. It will be much easier and will require less changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:167,safety,reme,remember,167,"If behavior only changes for the directories that contain the manifest file, nothing will break. I think adding a special macro is wrong because it will require us to remember to use that instead of the regular `add_directory()` call. This is already a problem with `ROOT_ADD_TEST_SUBDIRECTORY()`, so I don't want new problems with another special macro for adding subdirectories. Please let's use the approach I'm suggesting. It will be much easier and will require less changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:3,usability,behavi,behavior,3,"If behavior only changes for the directories that contain the manifest file, nothing will break. I think adding a special macro is wrong because it will require us to remember to use that instead of the regular `add_directory()` call. This is already a problem with `ROOT_ADD_TEST_SUBDIRECTORY()`, so I don't want new problems with another special macro for adding subdirectories. Please let's use the approach I'm suggesting. It will be much easier and will require less changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:62,modifiability,evolv,evolve,62,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:74,performance,time,time,74,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:90,safety,prevent,prevent,90,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:90,security,preven,prevent,90,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:409,security,modif,modify,409,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:13,usability,custom,custom,13,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:363,usability,interact,interact,363,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:420,usability,behavi,behavior,420,"I expect the custom implementation of `add_subdirectory()` to evolve over time (we cannot prevent it and we should not be limiting it). One direction for evolution is sinking the pattern into the new `add_root_subdirectory`:. ```cmake. if(some_option). add_subdirectory(...). endif(). ```. IIUC, overriding of cmake 'system' function makes a lot of sense when we interact with third-party code and we want to modify its behavior. It seems here that the situation is the inverse. For instance, llvm has its own set of macros partially for this purpose.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:58,integrability,wrap,wrapper,58,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:466,integrability,sub,sub-packages,466,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:58,interoperability,wrapper,wrapper,58,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:470,modifiability,pac,packages,470,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:129,safety,prevent,prevent,129,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:129,security,preven,prevent,129,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:378,security,modif,modify,378,I do not want to argue this *ad infinitum*. Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain `add_subdirectory()` which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. A better approach that could also work is to modify the `ROOT_STANDARD_LIBRARY_PACKAGE()` macro to do the extra stuff needed for the sub-packages.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:131,integrability,wrap,wrapper,131,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:131,interoperability,wrapper,wrapper,131,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:422,modifiability,concern,concern,422,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:202,safety,prevent,prevent,202,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:202,security,preven,prevent,202,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:695,security,modif,modify,695,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:406,testability,understand,understand,406,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2406:422,testability,concern,concern,422,"@amadio let me try alternatives and lets discuss during this week what I would like to have and how we can do it. >>>Adding such a wrapper macro with a different name is a no go for me because it won't prevent people from using plain add_subdirectory() which would lead to breakage. This also goes in the opposite direction than we want to go for using modern CMake in ROOT as discussed in the workshop. I understand your concern about add_subdirectory and people using it, but I dont agree with you that it is opposite direction than using modern CMake. It solved different problem introduced by huge amounts of options and switchers... About ROOT_STANDARD_LIBRARY_PACKAGE(), of course we will modify ROOT_STANDARD_LIBRARY_PACKAGE(), there will be a lot of work there, but still there are not enough handles to implement what I would like to have.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2406
https://github.com/root-project/root/pull/2407:11,deployability,build,build,11,@phsft-bot build. Why it's not building since yesterday?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2407
https://github.com/root-project/root/pull/2407:31,deployability,build,building,31,@phsft-bot build. Why it's not building since yesterday?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2407
https://github.com/root-project/root/pull/2407:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2407
https://github.com/root-project/root/pull/2407:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2407
https://github.com/root-project/root/pull/2408:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2408
https://github.com/root-project/root/pull/2409:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2409
https://github.com/root-project/root/pull/2409:0,deployability,Build,Building,0,Building again since PRs are now fixed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2409
https://github.com/root-project/root/pull/2411:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:17,integrability,messag,message,17,Could the commit message be enhanced to express which files are still embedded? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:17,interoperability,messag,message,17,Could the commit message be enhanced to express which files are still embedded? Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:31,deployability,modul,modules,31,Turns out that it doesn't help modules relocation. closing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:31,modifiability,modul,modules,31,Turns out that it doesn't help modules relocation. closing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:18,reliability,doe,doesn,18,Turns out that it doesn't help modules relocation. closing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:31,safety,modul,modules,31,Turns out that it doesn't help modules relocation. closing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2411:26,usability,help,help,26,Turns out that it doesn't help modules relocation. closing,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2411
https://github.com/root-project/root/pull/2412:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:0,reliability,Doe,Does,0,"Does this ""also"" fix TTreeClusterIterator on older files with AutoFlush==0?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:307,availability,cluster,cluster,307,"Well, there was already an existing fix for that. In this patch it just gets rearranged - pushed into `GetEstimatedClusterSize`:. https://github.com/root-project/root/pull/2412/files#diff-de4250b19a609451f620d99107b0d4a4R578. However, if `AutoFlush` is zero and `fNClusterRange` is set, it will now use the cluster information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:58,deployability,patch,patch,58,"Well, there was already an existing fix for that. In this patch it just gets rearranged - pushed into `GetEstimatedClusterSize`:. https://github.com/root-project/root/pull/2412/files#diff-de4250b19a609451f620d99107b0d4a4R578. However, if `AutoFlush` is zero and `fNClusterRange` is set, it will now use the cluster information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:307,deployability,cluster,cluster,307,"Well, there was already an existing fix for that. In this patch it just gets rearranged - pushed into `GetEstimatedClusterSize`:. https://github.com/root-project/root/pull/2412/files#diff-de4250b19a609451f620d99107b0d4a4R578. However, if `AutoFlush` is zero and `fNClusterRange` is set, it will now use the cluster information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:58,safety,patch,patch,58,"Well, there was already an existing fix for that. In this patch it just gets rearranged - pushed into `GetEstimatedClusterSize`:. https://github.com/root-project/root/pull/2412/files#diff-de4250b19a609451f620d99107b0d4a4R578. However, if `AutoFlush` is zero and `fNClusterRange` is set, it will now use the cluster information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:58,security,patch,patch,58,"Well, there was already an existing fix for that. In this patch it just gets rearranged - pushed into `GetEstimatedClusterSize`:. https://github.com/root-project/root/pull/2412/files#diff-de4250b19a609451f620d99107b0d4a4R578. However, if `AutoFlush` is zero and `fNClusterRange` is set, it will now use the cluster information.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:76,availability,cluster,cluster,76,"> Ah - do you mean the existing CMS NanoAOD files, for example? Yes :) [The cluster size estimate for those is .... 1 ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:76,deployability,cluster,cluster,76,"> Ah - do you mean the existing CMS NanoAOD files, for example? Yes :) [The cluster size estimate for those is .... 1 ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:89,energy efficiency,estimat,estimate,89,"> Ah - do you mean the existing CMS NanoAOD files, for example? Yes :) [The cluster size estimate for those is .... 1 ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:27,availability,cluster,cluster,27,"Ah - in that case, no, the cluster size estimate should remain incorrect. Can you open a separate ticket for the incorrect estimate? I don't think it should be put into this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:27,deployability,cluster,cluster,27,"Ah - in that case, no, the cluster size estimate should remain incorrect. Can you open a separate ticket for the incorrect estimate? I don't think it should be put into this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:40,energy efficiency,estimat,estimate,40,"Ah - in that case, no, the cluster size estimate should remain incorrect. Can you open a separate ticket for the incorrect estimate? I don't think it should be put into this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:123,energy efficiency,estimat,estimate,123,"Ah - in that case, no, the cluster size estimate should remain incorrect. Can you open a separate ticket for the incorrect estimate? I don't think it should be put into this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:48,testability,simpl,simple,48,"Ok, I stand corrected. The fix for the issue is simple enough to go into the same PR. Commit pushed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:48,usability,simpl,simple,48,"Ok, I stand corrected. The fix for the issue is simple enough to go into the same PR. Commit pushed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:47,deployability,fail,fail,47,"If I recall correctly, this will make roottest fail a couple of test. Is there a corresponding roottest PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:54,integrability,coupl,couple,54,"If I recall correctly, this will make roottest fail a couple of test. Is there a corresponding roottest PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:54,modifiability,coupl,couple,54,"If I recall correctly, this will make roottest fail a couple of test. Is there a corresponding roottest PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:47,reliability,fail,fail,47,"If I recall correctly, this will make roottest fail a couple of test. Is there a corresponding roottest PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:64,safety,test,test,64,"If I recall correctly, this will make roottest fail a couple of test. Is there a corresponding roottest PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:54,testability,coupl,couple,54,"If I recall correctly, this will make roottest fail a couple of test. Is there a corresponding roottest PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:64,testability,test,test,64,"If I recall correctly, this will make roottest fail a couple of test. Is there a corresponding roottest PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:63,integrability,sub,subset,63,> Seems to have passed all roottests? The PR runs **only** a **subset** of the test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:79,safety,test,test,79,> Seems to have passed all roottests? The PR runs **only** a **subset** of the test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:79,testability,test,test,79,> Seems to have passed all roottests? The PR runs **only** a **subset** of the test in roottest.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:127,availability,cluster,clustering,127,@pcanal can this be merged? or is there a problem in the roottests? RDataFrame analysis of nanoAOD's is depending on nanoAOD's clustering to get fixed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:104,deployability,depend,depending,104,@pcanal can this be merged? or is there a problem in the roottests? RDataFrame analysis of nanoAOD's is depending on nanoAOD's clustering to get fixed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:127,deployability,cluster,clustering,127,@pcanal can this be merged? or is there a problem in the roottests? RDataFrame analysis of nanoAOD's is depending on nanoAOD's clustering to get fixed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:104,integrability,depend,depending,104,@pcanal can this be merged? or is there a problem in the roottests? RDataFrame analysis of nanoAOD's is depending on nanoAOD's clustering to get fixed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:104,modifiability,depend,depending,104,@pcanal can this be merged? or is there a problem in the roottests? RDataFrame analysis of nanoAOD's is depending on nanoAOD's clustering to get fixed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:104,safety,depend,depending,104,@pcanal can this be merged? or is there a problem in the roottests? RDataFrame analysis of nanoAOD's is depending on nanoAOD's clustering to get fixed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:104,testability,depend,depending,104,@pcanal can this be merged? or is there a problem in the roottests? RDataFrame analysis of nanoAOD's is depending on nanoAOD's clustering to get fixed,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:20,availability,failur,failures,20,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:20,deployability,fail,failures,20,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:67,deployability,build,build,67,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:235,deployability,build,build,235,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:206,interoperability,specif,specific,206,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:20,performance,failur,failures,20,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:77,performance,perform,performing,77,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:20,reliability,fail,failures,20,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:44,safety,test,test,44,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:44,testability,test,test,44,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:77,usability,perform,performing,77,"hi, i believe these failures in a dataframe test are due to the PR build not performing any rebasing or merging on master anymore. they should go away by manually rebasing your branch on master. the actual specific problem is that the build is with a recent roottest checkout but an old root checkout, and they need to be in sync.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:0,availability,Failur,Failure,0,Failure in TMVA test in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:0,deployability,Fail,Failure,0,Failure in TMVA test in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:0,performance,Failur,Failure,0,Failure in TMVA test in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:0,reliability,Fail,Failure,0,Failure in TMVA test in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:16,safety,test,test,16,Failure in TMVA test in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2412:16,testability,test,test,16,Failure in TMVA test in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2412
https://github.com/root-project/root/pull/2414:0,deployability,Fail,Failing,0,Failing tests are un-related to these changes. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2414
https://github.com/root-project/root/pull/2414:0,reliability,Fail,Failing,0,Failing tests are un-related to these changes. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2414
https://github.com/root-project/root/pull/2414:8,safety,test,tests,8,Failing tests are un-related to these changes. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2414
https://github.com/root-project/root/pull/2414:8,testability,test,tests,8,Failing tests are un-related to these changes. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2414
https://github.com/root-project/root/pull/2415:0,availability,Error,Errors,0,Errors are unrelated to this commit. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2415
https://github.com/root-project/root/pull/2415:0,performance,Error,Errors,0,Errors are unrelated to this commit. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2415
https://github.com/root-project/root/pull/2415:0,safety,Error,Errors,0,Errors are unrelated to this commit. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2415
https://github.com/root-project/root/pull/2415:0,usability,Error,Errors,0,Errors are unrelated to this commit. Merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2415
https://github.com/root-project/root/pull/2416:213,reliability,Doe,Does,213,"hi Bertrand, thank you for fixing this! It's certainly safer in general that different test cases write on different output files. I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2416:241,reliability,doe,does,241,"hi Bertrand, thank you for fixing this! It's certainly safer in general that different test cases write on different output files. I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2416:55,safety,safe,safer,55,"hi Bertrand, thank you for fixing this! It's certainly safer in general that different test cases write on different output files. I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2416:87,safety,test,test,87,"hi Bertrand, thank you for fixing this! It's certainly safer in general that different test cases write on different output files. I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2416:87,testability,test,test,87,"hi Bertrand, thank you for fixing this! It's certainly safer in general that different test cases write on different output files. I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2416:139,testability,understand,understand,139,"hi Bertrand, thank you for fixing this! It's certainly safer in general that different test cases write on different output files. I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2416:250,usability,support,support,250,"hi Bertrand, thank you for fixing this! It's certainly safer in general that different test cases write on different output files. I don't understand however why we need to delete the files if they already exist. Does that mean that Windows does not support `TFile(""f.root"", ""recreate"")` (i.e. recreating an existing file)? I think i'm missing something :D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2416:26,performance,time,time,26,Thanks @bluehood for your time checking it!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2416
https://github.com/root-project/root/pull/2417:23,safety,valid,valid,23,I think this PR is not valid and I will close. In case you have an issue with the tutorial please let me know. Lorenzo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2417
https://github.com/root-project/root/pull/2417:40,usability,close,close,40,I think this PR is not valid and I will close. In case you have an issue with the tutorial please let me know. Lorenzo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2417
https://github.com/root-project/root/pull/2418:58,energy efficiency,current,currently,58,"As cppreference.com says for std::remove:. If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, although the file system space is not reclaimed even if this was the last hardlink to the file until the last running process closes the file, Windows does not allow the file to be deleted).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2418
https://github.com/root-project/root/pull/2418:80,energy efficiency,current,current,80,"As cppreference.com says for std::remove:. If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, although the file system space is not reclaimed even if this was the last hardlink to the file until the last running process closes the file, Windows does not allow the file to be deleted).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2418
https://github.com/root-project/root/pull/2418:367,reliability,doe,does,367,"As cppreference.com says for std::remove:. If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, although the file system space is not reclaimed even if this was the last hardlink to the file until the last running process closes the file, Windows does not allow the file to be deleted).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2418
https://github.com/root-project/root/pull/2418:112,usability,behavi,behavior,112,"As cppreference.com says for std::remove:. If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, although the file system space is not reclaimed even if this was the last hardlink to the file until the last running process closes the file, Windows does not allow the file to be deleted).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2418
https://github.com/root-project/root/pull/2418:342,usability,close,closes,342,"As cppreference.com says for std::remove:. If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, although the file system space is not reclaimed even if this was the last hardlink to the file until the last running process closes the file, Windows does not allow the file to be deleted).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2418
https://github.com/root-project/root/pull/2420:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:12,testability,fuzzy,fuzzy,12,"If it's too fuzzy, we can still have the old-school `delete` bugfix for the leak.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:81,integrability,buffer,buffer,81,@stwunsch uninformed question: couldn't we simply use a `vector<char>` as a byte buffer here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:43,testability,simpl,simply,43,@stwunsch uninformed question: couldn't we simply use a `vector<char>` as a byte buffer here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:43,usability,simpl,simply,43,@stwunsch uninformed question: couldn't we simply use a `vector<char>` as a byte buffer here?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:296,deployability,version,version,296,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:49,integrability,buffer,buffer,49,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:296,integrability,version,version,296,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:296,modifiability,version,version,296,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:124,performance,memor,memory-safe,124,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:143,reliability,doe,does,143,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:131,safety,safe,safe,131,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:124,usability,memor,memory-safe,124,"`vector<char>` is a more common choice as a byte buffer than `unique_ptr<char[]>`, so if it's possible to use it it's still memory-safe and it does not require `make_unique<char[]>`. as per the backport...it's a different jira ticket, but it's broken, so i think it's desirable to have a working version",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:50,integrability,buffer,buffer,50,> couldn't we simply use a vector<char> as a byte buffer here? I guess so.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:14,testability,simpl,simply,14,> couldn't we simply use a vector<char> as a byte buffer here? I guess so.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:14,usability,simpl,simply,14,> couldn't we simply use a vector<char> as a byte buffer here? I guess so.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2420:5,integrability,sub,submit,5,I'll submit a new PR for the improved backport.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2420
https://github.com/root-project/root/pull/2422:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2422
https://github.com/root-project/root/pull/2422:11,deployability,build,build,11,@phsft-bot build just on slc6-i686/gcc49,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2422
https://github.com/root-project/root/pull/2423:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2423
https://github.com/root-project/root/pull/2423:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2423
https://github.com/root-project/root/pull/2423:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2423
https://github.com/root-project/root/pull/2423:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2423
https://github.com/root-project/root/pull/2424:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2424
https://github.com/root-project/root/pull/2424:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2424
https://github.com/root-project/root/pull/2425:13,deployability,Modul,Modulariz,13,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:186,deployability,modul,modularization,186,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:13,integrability,Modular,Modulariz,13,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:73,integrability,messag,message,73,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:186,integrability,modular,modularization,186,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:73,interoperability,messag,message,73,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:13,modifiability,Modul,Modulariz,13,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:186,modifiability,modul,modularization,186,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:219,reliability,doe,doesn,219,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:13,safety,Modul,Modulariz,13,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:186,safety,modul,modularization,186,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:13,testability,Modula,Modulariz,13,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:186,testability,modula,modularization,186,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:84,usability,clear,clear,84,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:260,usability,help,helped,260,"Hi Oksana, `[Modulariz.]` looks a bit awkward. I'd remove, as the commit message is clear without it. If you want to keep it, maybe consider not abbreviating. We know you are working on modularization, but someone that doesn't know might be more confused than helped by the tag.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:11,deployability,infrastructur,infrastructure,11,"Looks like infrastructure failed yesterday, so I'm restarting the build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:26,deployability,fail,failed,26,"Looks like infrastructure failed yesterday, so I'm restarting the build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:66,deployability,build,build,66,"Looks like infrastructure failed yesterday, so I'm restarting the build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:26,reliability,fail,failed,26,"Looks like infrastructure failed yesterday, so I'm restarting the build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:48,deployability,modul,modularization,48,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:187,deployability,build,building,187,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:207,deployability,build,build,207,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:265,deployability,build,builddep,265,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:325,deployability,build,build,325,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:331,deployability,depend,dependencies,331,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:379,deployability,depend,dependencies,379,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:279,energy efficiency,reduc,reducing,279,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:48,integrability,modular,modularization,48,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:331,integrability,depend,dependencies,331,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:379,integrability,depend,dependencies,379,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:400,integrability,coupl,couple,400,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:48,modifiability,modul,modularization,48,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:331,modifiability,depend,dependencies,331,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:379,modifiability,depend,dependencies,379,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:400,modifiability,coupl,couple,400,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:48,safety,modul,modularization,48,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:331,safety,depend,dependencies,331,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:379,safety,depend,dependencies,379,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:482,safety,review,review,482,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:48,testability,modula,modularization,48,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:331,testability,depend,dependencies,331,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:379,testability,depend,dependencies,379,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:400,testability,coupl,couple,400,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:482,testability,review,review,482,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2425:15,usability,learn,learned,15,"And what we've learned from the past 15 years: ""modularization"" means 100 different things, and not the same for any pair of people talking about it :-) Which is why I use the term ""lazy building"" for your ""build parts of ROOT later"" and you could use ""libdep"" or ""builddep"" for reducing or fixing/formalizing the library or build dependencies. Or ""incldep"" for header/including dependencies. Just a couple of ideas, I'm not suggesting that you should follow them (this is not a PR review)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2425
https://github.com/root-project/root/pull/2427:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2427
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build -Dclad=OFF -DCMAKE_INSTALL_PREFIX=/root,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=OFF,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build with flags -Dclad=ON.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc52,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc52,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:11,deployability,build,build,11,@phsft-bot build! Testing the new roottest branch checkout...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:18,safety,Test,Testing,18,@phsft-bot build! Testing the new roottest branch checkout...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2432:18,testability,Test,Testing,18,@phsft-bot build! Testing the new roottest branch checkout...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2432
https://github.com/root-project/root/pull/2434:52,performance,cach,cache,52,Nice improvement. Isn't it missing the reset of the cache when new transactions are added or removed? (I.e. a previous found/not-found function might be not-found/found).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:31,safety,review,review-yet,31,[sorry: did not see the do-not-review-yet tag :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:31,testability,review,review-yet,31,[sorry: did not see the do-not-review-yet tag :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:231,usability,clear,clear,231,@pcanal . ```. static Transaction* latestTransaction;. if (latestTransaction != m_Interpreter->getLatestTransaction()) {. latestTransaction = const_cast<Transaction*>(m_Interpreter->getLatestTransaction());. findFunctionProtoCache.clear();. }. ```. Is your suggestion something like this?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:114,energy efficiency,optim,optimal,114,> Is your suggestion something like this? This should do it (except for the missing intialization) but may not be optimal.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:61,safety,except,except,61,> Is your suggestion something like this? This should do it (except for the missing intialization) but may not be optimal.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:227,availability,error,error,227,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:299,availability,error,error,299,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:136,performance,perform,performance,136,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:227,performance,error,error,227,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:299,performance,error,error,299,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:101,reliability,doe,doesn,101,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:172,safety,test,testing,172,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:227,safety,error,error,227,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:299,safety,error,error,299,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:60,security,hash,hash,60,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:86,security,hash,hashing,86,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:74,testability,simpl,simpler,74,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:172,testability,test,testing,172,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:3,usability,person,personal,3,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:12,usability,prefer,preference,12,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:74,usability,simpl,simpler,74,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:136,usability,perform,performance,136,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:227,usability,error,error,227,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:299,usability,error,error,299,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before? https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:148,availability,down,down,148,This means that 2 different part of rootcling disagree on whether TFormula has a Streamer member function. Namely the part that should have written down the implementation of the wrapper found **wrongly** that there was no TFormula::Streamer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:179,integrability,wrap,wrapper,179,This means that 2 different part of rootcling disagree on whether TFormula has a Streamer member function. Namely the part that should have written down the implementation of the wrapper found **wrongly** that there was no TFormula::Streamer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:179,interoperability,wrapper,wrapper,179,This means that 2 different part of rootcling disagree on whether TFormula has a Streamer member function. Namely the part that should have written down the implementation of the wrapper found **wrongly** that there was no TFormula::Streamer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:70,performance,cach,cache,70,"Transactions are so divided that we don't get any benefit if we reset cache every time a new transaction was added. I think we should remove one element of a cache if a decl in the new transaction matches the key, otherwise we can keep the cache. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:82,performance,time,time,82,"Transactions are so divided that we don't get any benefit if we reset cache every time a new transaction was added. I think we should remove one element of a cache if a decl in the new transaction matches the key, otherwise we can keep the cache. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:158,performance,cach,cache,158,"Transactions are so divided that we don't get any benefit if we reset cache every time a new transaction was added. I think we should remove one element of a cache if a decl in the new transaction matches the key, otherwise we can keep the cache. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2434:240,performance,cach,cache,240,"Transactions are so divided that we don't get any benefit if we reset cache every time a new transaction was added. I think we should remove one element of a cache if a decl in the new transaction matches the key, otherwise we can keep the cache. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2434
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:30,performance,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:30,usability,perform,performance-,30,@phsft-bot build just on ROOT-performance-centos7-multicore/default,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:93,availability,error,error,93,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=ON. The error above looks unrelated..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=ON. The error above looks unrelated..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:93,performance,error,error,93,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=ON. The error above looks unrelated..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:93,safety,error,error,93,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=ON. The error above looks unrelated..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:93,usability,error,error,93,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=ON. The error above looks unrelated..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:4,availability,error,error,4,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:32,availability,error,error,32,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:44,energy efficiency,load,loading,44,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:52,interoperability,share,shared,52,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:99,interoperability,share,shared,99,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:4,performance,error,error,4,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:32,performance,error,error,32,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:44,performance,load,loading,44,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:4,safety,error,error,4,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:32,safety,error,error,32,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:4,usability,error,error,4,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:32,usability,error,error,32,"The error says. `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`. which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:5,availability,error,error,5,This error is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:5,performance,error,error,5,This error is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:5,safety,error,error,5,This error is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:5,usability,error,error,5,This error is unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2435:41,usability,close,close,41,This is solved in a different way. Let's close it now.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2435
https://github.com/root-project/root/pull/2436:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2436
https://github.com/root-project/root/pull/2438:34,safety,review,review,34,@lmoneta @stwunsch Can you please review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:34,testability,review,review,34,@lmoneta @stwunsch Can you please review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:94,deployability,updat,update,94,"@lmoneta @stwunsch I guess we are good to merge this PR. Once this is merged, I'll rebase and update the next PR for Adagrad optimizer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:125,energy efficiency,optim,optimizer,125,"@lmoneta @stwunsch I guess we are good to merge this PR. Once this is merged, I'll rebase and update the next PR for Adagrad optimizer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:125,performance,optimiz,optimizer,125,"@lmoneta @stwunsch I guess we are good to merge this PR. Once this is merged, I'll rebase and update the next PR for Adagrad optimizer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:94,safety,updat,update,94,"@lmoneta @stwunsch I guess we are good to merge this PR. Once this is merged, I'll rebase and update the next PR for Adagrad optimizer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2438:94,security,updat,update,94,"@lmoneta @stwunsch I guess we are good to merge this PR. Once this is merged, I'll rebase and update the next PR for Adagrad optimizer.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2438
https://github.com/root-project/root/pull/2439:34,safety,review,review,34,@lmoneta @stwunsch Can you please review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2439
https://github.com/root-project/root/pull/2439:34,testability,review,review,34,@lmoneta @stwunsch Can you please review?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2439
https://github.com/root-project/root/pull/2439:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2439
https://github.com/root-project/root/pull/2439:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2439
https://github.com/root-project/root/pull/2440:171,energy efficiency,optim,optimizer,171,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:171,performance,optimiz,optimizer,171,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:34,safety,review,review,34,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:159,safety,test,testing,159,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:34,testability,review,review,34,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:159,testability,test,testing,159,@lmoneta @stwunsch Can you please review? And for RMSProp the meanAbsoluteError is of the order of 1e-2. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:21,deployability,updat,updated,21,@stwunsch @lmoneta I updated the PR with the new changes as we discussed. Can you now review and trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:109,deployability,build,build,109,@stwunsch @lmoneta I updated the PR with the new changes as we discussed. Can you now review and trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:21,safety,updat,updated,21,@stwunsch @lmoneta I updated the PR with the new changes as we discussed. Can you now review and trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:86,safety,review,review,86,@stwunsch @lmoneta I updated the PR with the new changes as we discussed. Can you now review and trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:21,security,updat,updated,21,@stwunsch @lmoneta I updated the PR with the new changes as we discussed. Can you now review and trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:86,testability,review,review,86,@stwunsch @lmoneta I updated the PR with the new changes as we discussed. Can you now review and trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2440:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2440
https://github.com/root-project/root/pull/2441:172,energy efficiency,optim,optimizer,172,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:172,performance,optimiz,optimizer,172,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:34,safety,review,review,34,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:160,safety,test,testing,160,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:34,testability,review,review,34,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:160,testability,test,testing,160,@lmoneta @stwunsch Can you please review? And for Adadelta the meanAbsoluteError is of the order of 1e-3. So I would like to discuss on the threshold value for testing the optimizer.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:64,deployability,build,build,64,@stwunsch @lmoneta I rebased the PR. Can you please trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:122,availability,error,error,122,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:128,deployability,continu,continues,128,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:74,performance,time,timeout,74,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:122,performance,error,error,122,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:56,safety,test,test,56,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:64,safety,avoid,avoid,64,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:74,safety,timeout,timeout,74,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:117,safety,test,test,117,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:122,safety,error,error,122,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:56,testability,test,test,56,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:98,testability,understand,understand,98,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:117,testability,test,test,117,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:122,usability,error,error,122,"Hi Ravi, . Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:21,deployability,updat,updated,21,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:113,deployability,build,build,113,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:21,safety,updat,updated,21,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:42,safety,test,tests,42,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:21,security,updat,updated,21,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:42,testability,test,tests,42,@lmoneta @stwunsch I updated the methodDL tests with MaxEpochs = 100 as discussed. Can you please re-trigger the build?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2441:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2441
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:17,deployability,infrastructur,infrastructure,17,"Alright, now the infrastructure should be normalized. We just need to submit branches that are up to date with current master. Hopefully the build will pass this time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:141,deployability,build,build,141,"Alright, now the infrastructure should be normalized. We just need to submit branches that are up to date with current master. Hopefully the build will pass this time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:111,energy efficiency,current,current,111,"Alright, now the infrastructure should be normalized. We just need to submit branches that are up to date with current master. Hopefully the build will pass this time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:70,integrability,sub,submit,70,"Alright, now the infrastructure should be normalized. We just need to submit branches that are up to date with current master. Hopefully the build will pass this time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:162,performance,time,time,162,"Alright, now the infrastructure should be normalized. We just need to submit branches that are up to date with current master. Hopefully the build will pass this time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:14,deployability,build,build,14,Still did not build. Should we re-submit ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:34,integrability,sub,submit,34,Still did not build. Should we re-submit ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on ubuntu16/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,"@phsft-bot build just on mac1013/native, slc6-i686/gcc49",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on mac1013/native and slc6-i686/gcc49,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,"@phsft-bot build just on mac1013/native, slc6-i686/gcc49",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,"@phsft-bot build on mac1013/native, slc6-i686/gcc49",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,"@phsft-bot build just on mac1013/native, slc6-i686/gcc49",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2442:28,usability,user,user,28,"This requires rebase on the user side. Closing and we will reopen a new, properly-rebased PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2442
https://github.com/root-project/root/pull/2443:156,deployability,log,logic,156,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:231,interoperability,share,shared,231,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:156,safety,log,logic,156,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:202,safety,avoid,avoid,202,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:275,safety,test,test,275,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:156,security,log,logic,156,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:156,testability,log,logic,156,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:275,testability,test,test,275,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates. I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:247,safety,test,tests,247,"Thanks @etejedor and @bluehood . The latest push force takes into account the decisions we took yesterday, and it seems to be working with the files Enric provided me. I was wondering if it is proper to add these files in roottest and create some tests over them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2443:247,testability,test,tests,247,"Thanks @etejedor and @bluehood . The latest push force takes into account the decisions we took yesterday, and it seems to be working with the files Enric provided me. I was wondering if it is proper to add these files in roottest and create some tests over them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2443
https://github.com/root-project/root/pull/2445:294,deployability,build,build,294,"@pcanal Tree is using a TMath.h in many places in source code - e.g. https://github.com/root-project/root/blob/master/tree/tree/src/TBasket.cxx#L19 [TMath::Max()]. How it didn't crash before, it is interesting question. Probably because MathCore was used in many other places, triggering to be build before building Tree, for example in Core.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2445
https://github.com/root-project/root/pull/2445:307,deployability,build,building,307,"@pcanal Tree is using a TMath.h in many places in source code - e.g. https://github.com/root-project/root/blob/master/tree/tree/src/TBasket.cxx#L19 [TMath::Max()]. How it didn't crash before, it is interesting question. Probably because MathCore was used in many other places, triggering to be build before building Tree, for example in Core.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2445
https://github.com/root-project/root/pull/2445:337,energy efficiency,Core,Core,337,"@pcanal Tree is using a TMath.h in many places in source code - e.g. https://github.com/root-project/root/blob/master/tree/tree/src/TBasket.cxx#L19 [TMath::Max()]. How it didn't crash before, it is interesting question. Probably because MathCore was used in many other places, triggering to be build before building Tree, for example in Core.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2445
https://github.com/root-project/root/pull/2445:125,energy efficiency,Core,Core,125,"@pcanal, sorry for bad example, in case of Min() and Max() it is true that it is inlined functions that are actually part of Core, but it is not true for Sort(), BinarySearch(). I will have this PR only as a removal of not used includes and I will address your comments about MathCore in different PR, since I think I have a better solution for Sort, BinarySearch functions :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2445
https://github.com/root-project/root/pull/2448:0,deployability,Depend,Depends,0,Depends on #2452.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2448:0,integrability,Depend,Depends,0,Depends on #2452.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2448:0,modifiability,Depend,Depends,0,Depends on #2452.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2448:0,safety,Depend,Depends,0,Depends on #2452.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2448:0,testability,Depend,Depends,0,Depends on #2452.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2448:8,deployability,version,version,8,Another version of this was already committed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2448:8,integrability,version,version,8,Another version of this was already committed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2448:8,modifiability,version,version,8,Another version of this was already committed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2448
https://github.com/root-project/root/pull/2453:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2453
https://github.com/root-project/root/pull/2453:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2453
https://github.com/root-project/root/pull/2453:11,deployability,build,build,11,@phsft-bot build with flags -Dccache=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2453
https://github.com/root-project/root/pull/2453:11,deployability,build,build,11,@phsft-bot build with flags -Dcxx17=Off -Dcxx14=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2453
https://github.com/root-project/root/pull/2453:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2453
https://github.com/root-project/root/pull/2453:11,deployability,build,build,11,@phsft-bot build! The reported problems seem to be unrelated but let’s retrigger.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2453
https://github.com/root-project/root/pull/2453:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2453
https://github.com/root-project/root/pull/2454:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2454
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build just on centos7/gcc7,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build just on centos7/gcc7,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_FLAGS=-march-native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_FLAGS='-march-native',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2455:11,deployability,build,build,11,@phsft-bot build with flags -DCMAKE_CXX_FLAGS='-march=native',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2455
https://github.com/root-project/root/pull/2463:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=o,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:128,availability,failur,failure,128,"https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/180/. The failure is unrelated, also failing in master..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:76,deployability,BUILD,BUILDTYPE,76,"https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/180/. The failure is unrelated, also failing in master..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:128,deployability,fail,failure,128,"https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/180/. The failure is unrelated, also failing in master..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:155,deployability,fail,failing,155,"https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/180/. The failure is unrelated, also failing in master..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:128,performance,failur,failure,128,"https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/180/. The failure is unrelated, also failing in master..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:128,reliability,fail,failure,128,"https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/180/. The failure is unrelated, also failing in master..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:155,reliability,fail,failing,155,"https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/180/. The failure is unrelated, also failing in master..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:11,deployability,build,build,11,"@phsft-bot build on slc6/gcc48, slc6-i686/gcc49, centos7/clang39, centos7/gcc62, centos7/gcc7, fedora28/native, ubuntu16/native, mac1013/native, windows10/vc15 with flags -Dccache=ON. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:11,deployability,build,build,11,"@phsft-bot build on slc6/gcc48,slc6-i686/gcc49,centos7/clang39,centos7/gcc62,centos7/gcc7,fedora28/native,ubuntu16/native,mac1013/native,windows10/vc15 with flags -Dccache=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:11,deployability,build,build,11,"@phsft-bot build on slc6/clang39, slc6/gcc48, slc6/gcc48, slc6/gcc49, slc6/gcc52, centos7/gcc62, centos7/gcc7, centos7/gcc7, ubuntu16/native, mac1013/native, windows10/vc15 with flags -Dimt=ON -Dccache=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2463:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2463
https://github.com/root-project/root/pull/2467:62,energy efficiency,green,green,62,"Yes, let's wait until we merge #2449, waiting for @dpiparo 's green light.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2467
https://github.com/root-project/root/pull/2467:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2467
https://github.com/root-project/root/pull/2467:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2467
https://github.com/root-project/root/pull/2467:84,deployability,build,build,84,"@etejedor rebased and rebuild! either we merge this one or directly #2468, which is build on top of this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2467
https://github.com/root-project/root/pull/2467:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2467
https://github.com/root-project/root/pull/2468:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2468
https://github.com/root-project/root/pull/2468:48,deployability,build,build,48,Needs to be checked on python3 as there's no PR build for this (?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2468
https://github.com/root-project/root/pull/2468:14,deployability,build,build,14,The Fedora 28 build uses Python3,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2468
https://github.com/root-project/root/pull/2468:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2468
https://github.com/root-project/root/pull/2469:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2469
https://github.com/root-project/root/pull/2472:80,safety,input,input,80,"Isn't the cure worse than the 'disease'? There is now a hard coded limit on the input size, is that the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2472:80,usability,input,input,80,"Isn't the cure worse than the 'disease'? There is now a hard coded limit on the input size, is that the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2472:112,integrability,buffer,buffer,112,"> There is now a hard coded limit on the input size, is that the intent? It is hard coded ""initial"" size of the buffer. . Now it is the same as in a case when XML file is parsed. If required, buffer will be extend. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2472:192,integrability,buffer,buffer,192,"> There is now a hard coded limit on the input size, is that the intent? It is hard coded ""initial"" size of the buffer. . Now it is the same as in a case when XML file is parsed. If required, buffer will be extend. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2472:159,interoperability,XML,XML,159,"> There is now a hard coded limit on the input size, is that the intent? It is hard coded ""initial"" size of the buffer. . Now it is the same as in a case when XML file is parsed. If required, buffer will be extend. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2472:207,modifiability,exten,extend,207,"> There is now a hard coded limit on the input size, is that the intent? It is hard coded ""initial"" size of the buffer. . Now it is the same as in a case when XML file is parsed. If required, buffer will be extend. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2472:41,safety,input,input,41,"> There is now a hard coded limit on the input size, is that the intent? It is hard coded ""initial"" size of the buffer. . Now it is the same as in a case when XML file is parsed. If required, buffer will be extend. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2472:41,usability,input,input,41,"> There is now a hard coded limit on the input size, is that the intent? It is hard coded ""initial"" size of the buffer. . Now it is the same as in a case when XML file is parsed. If required, buffer will be extend. .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2472
https://github.com/root-project/root/pull/2473:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2473
https://github.com/root-project/root/pull/2475:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2475
https://github.com/root-project/root/pull/2477:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2477
https://github.com/root-project/root/pull/2477:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2477
https://github.com/root-project/root/pull/2477:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2477
https://github.com/root-project/root/pull/2478:312,deployability,fail,fail,312,"Long64_t and ULong64_t are treated 'differently' in ROOT (treated as opaque typedef). Long32_t is not. . If it works with Long64_t why change it? If it does not work with Long32_t why is int32_t working? (besides not necessary pointing to the same type, there should be no 'difference' in treatment. How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:152,reliability,doe,does,152,"Long64_t and ULong64_t are treated 'differently' in ROOT (treated as opaque typedef). Long32_t is not. . If it works with Long64_t why change it? If it does not work with Long32_t why is int32_t working? (besides not necessary pointing to the same type, there should be no 'difference' in treatment. How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:304,reliability,doe,does,304,"Long64_t and ULong64_t are treated 'differently' in ROOT (treated as opaque typedef). Long32_t is not. . If it works with Long64_t why change it? If it does not work with Long32_t why is int32_t working? (besides not necessary pointing to the same type, there should be no 'difference' in treatment. How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:312,reliability,fail,fail,312,"Long64_t and ULong64_t are treated 'differently' in ROOT (treated as opaque typedef). Long32_t is not. . If it works with Long64_t why change it? If it does not work with Long32_t why is int32_t working? (besides not necessary pointing to the same type, there should be no 'difference' in treatment. How does it fail?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:149,availability,consist,consistency,149,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:166,availability,error,error,166,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:207,availability,ERROR,ERROR,207,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:232,availability,Error,Error,232,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:625,availability,error,error,625,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1048,availability,error,error,1048," made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(14058",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1475,availability,error,error,1475,"9120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:2618,availability,error,error,2618,"il::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Det",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3045,availability,error,error,3045,"0586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3123,availability,ERROR,ERROR,3123,"256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(14058606245",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3148,availability,Error,Error,3148,"onst std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1076,interoperability,specif,specifier,1076,"I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:2646,interoperability,specif,specifier,2646,"6091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(1405",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:166,performance,error,error,166,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:207,performance,ERROR,ERROR,207,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:232,performance,Error,Error,232,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:625,performance,error,error,625,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1048,performance,error,error,1048," made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(14058",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1475,performance,error,error,1475,"9120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:2618,performance,error,error,2618,"il::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Det",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3045,performance,error,error,3045,"0586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3123,performance,ERROR,ERROR,3123,"256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(14058606245",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3148,performance,Error,Error,3148,"onst std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:166,safety,error,error,166,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:207,safety,ERROR,ERROR,207,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:214,safety,Except,Exception,214,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:232,safety,Error,Error,232,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:625,safety,error,error,625,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1048,safety,error,error,1048," made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(14058",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1475,safety,error,error,1475,"9120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:2618,safety,error,error,2618,"il::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Det",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3045,safety,error,error,3045,"0586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3123,safety,ERROR,ERROR,3123,"256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(14058606245",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3130,safety,Except,Exception,3130,"interpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3148,safety,Error,Error,3148,"onst std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:4278,safety,test,test,4278,"ndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. ```. I also fixed the typo in the test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:650,security,ident,identifier,650,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:4278,testability,test,test,4278,"ndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. ```. I also fixed the typo in the test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:69,usability,prefer,preference,69,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:149,usability,consist,consistency,149,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:166,usability,error,error,166,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:207,usability,ERROR,ERROR,207,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:232,usability,Error,Error,232,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:625,usability,error,error,625,"Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1048,usability,error,error,1048," made the PR. Any preference? I can change it back to `ULong64_t` and `Long64_t`, it was just for consistency. The error I get is:. ```. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(14058",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:1475,usability,error,error,1475,"9120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]:. [5922]: input_line_59:2:81: error: use of undeclared identifier 'Long32_t'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:92: error: expected ')'. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:2618,usability,error,error,2618,"il::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: input_line_59:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Det",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3045,usability,error,error,3045,"0586091860616L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586099120256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(1",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3123,usability,ERROR,ERROR,3123,"256L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(14058606245",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:3148,usability,Error,Error,3148,"onst std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586098413552L))). [5922]: ^. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: error: type name requires a specifier or qualifier. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:92: error: expected ')'. [5922]: (ROOT::Internal:meProcessing. [5922]: [16:21:24][ERROR] Exception caught: Error evaluating expression (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]:. [5922]: :RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<const std::shared_ptr<ROOT::Internal::RDF::RActionBase *> *>(140586062459056L))). [5922]: ^. [5922]: input_line_63:2:90: note: to match this '('. [5922]: (ROOT::Internal::RDF::CallBuildAndBook<ROOT::Internal::RDF::ActionTypes::Mean, Long32_t>(*reinterpret_cast<ROOT::Detail::RDF::RLoopManager *>(140586062454072L), {""z""}, 1, reinterpret_cast<shared_ptr<double> *>(140586062459184L), reinterpret_cast<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:91,interoperability,platform,platforms,91,I see. 'Long32_t' does not exist. It is spelt 'Int_t' or 'Long_t' (both are 32 bits on all platforms).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:18,reliability,doe,does,18,I see. 'Long32_t' does not exist. It is spelt 'Int_t' or 'Long_t' (both are 32 bits on all platforms).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:186,availability,state,stated,186,"> Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I was wrong :) One is for master and the other for the patch. (To help disambiguate, even-though it is stated somewhere in github, we usually add the target branch (when not master) in the title). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:138,deployability,patch,patch,138,"> Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I was wrong :) One is for master and the other for the patch. (To help disambiguate, even-though it is stated somewhere in github, we usually add the target branch (when not master) in the title). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:186,integrability,state,stated,186,"> Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I was wrong :) One is for master and the other for the patch. (To help disambiguate, even-though it is stated somewhere in github, we usually add the target branch (when not master) in the title). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:138,safety,patch,patch,138,"> Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I was wrong :) One is for master and the other for the patch. (To help disambiguate, even-though it is stated somewhere in github, we usually add the target branch (when not master) in the title). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:138,security,patch,patch,138,"> Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I was wrong :) One is for master and the other for the patch. (To help disambiguate, even-though it is stated somewhere in github, we usually add the target branch (when not master) in the title). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:71,usability,prefer,preference,71,"> Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I was wrong :) One is for master and the other for the patch. (To help disambiguate, even-though it is stated somewhere in github, we usually add the target branch (when not master) in the title). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2478:149,usability,help,help,149,"> Yes, It's a duplicate. Not sure where I should have made the PR. Any preference? I was wrong :) One is for master and the other for the patch. (To help disambiguate, even-though it is stated somewhere in github, we usually add the target branch (when not master) in the title). Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2478
https://github.com/root-project/root/pull/2479:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2479
https://github.com/root-project/root/pull/2479:29,usability,help,helping,29,Why is the different typedef helping?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2479
https://github.com/root-project/root/pull/2480:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2480
https://github.com/root-project/root/pull/2483:54,deployability,unload,unloading,54,"Reading the code, I don't see any obvious handling of unloading. Can the support (for plan for support) of unloading be described in the commit and/or code?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:107,deployability,unload,unloading,107,"Reading the code, I don't see any obvious handling of unloading. Can the support (for plan for support) of unloading be described in the commit and/or code?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:86,testability,plan,plan,86,"Reading the code, I don't see any obvious handling of unloading. Can the support (for plan for support) of unloading be described in the commit and/or code?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:73,usability,support,support,73,"Reading the code, I don't see any obvious handling of unloading. Can the support (for plan for support) of unloading be described in the commit and/or code?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:95,usability,support,support,95,"Reading the code, I don't see any obvious handling of unloading. Can the support (for plan for support) of unloading be described in the commit and/or code?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:14,deployability,unload,unloading,14,Which case of unloading you have in mind? Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:50,deployability,unload,unloading,50,Which case of unloading you have in mind? Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:101,integrability,buffer,buffer,101,Which case of unloading you have in mind? Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:94,performance,memor,memory,94,Which case of unloading you have in mind? Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:132,performance,cach,cache,132,Which case of unloading you have in mind? Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:94,usability,memor,memory,94,Which case of unloading you have in mind? Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:10,deployability,unload,unloading,10,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:218,deployability,unload,unloading,218,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:242,deployability,releas,released,242,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:359,deployability,unload,unloaded,359,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:450,energy efficiency,load,load,450,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:481,energy efficiency,load,load,481,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:61,integrability,buffer,buffer,61,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:200,integrability,buffer,buffer,200,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:54,performance,memor,memory,54,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:92,performance,cach,cache,92,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:450,performance,load,load,450,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:481,performance,load,load,481,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:194,safety,valid,valid,194,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:330,safety,valid,valid,330,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:372,security,modif,modified,372,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:130,testability,understand,understand,130,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:162,testability,assert,assert,162,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:54,usability,memor,memory,54,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:388,usability,user,user,388,"> Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. I don't understand why. line 87 assumes/assert that the FID points to a valid buffer. Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? . And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:23,modifiability,concern,concerns,23,"Would that answer your concerns:. ```. cat T.C . struct S {};. root -l -b. root [0] #undef TRY. root [1] .I /home/vagrant/workspace/root/src/interpreter/cling/include/. root [2] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/include/. root [3] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/tools/clang/include. root [4] .I /usr/lib/llvm-5.0/include. root [5] #include ""cling/Interpreter/Interpreter.h"". root [6] #include ""cling/Interpreter/LookupHelper.h"". root [7] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [8] #include ""T.C"". root [9] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) false. root [10] .undo 2. root [11] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [12] .q. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:23,testability,concern,concerns,23,"Would that answer your concerns:. ```. cat T.C . struct S {};. root -l -b. root [0] #undef TRY. root [1] .I /home/vagrant/workspace/root/src/interpreter/cling/include/. root [2] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/include/. root [3] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/tools/clang/include. root [4] .I /usr/lib/llvm-5.0/include. root [5] #include ""cling/Interpreter/Interpreter.h"". root [6] #include ""cling/Interpreter/LookupHelper.h"". root [7] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [8] #include ""T.C"". root [9] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) false. root [10] .undo 2. root [11] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [12] .q. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:311,usability,tool,tools,311,"Would that answer your concerns:. ```. cat T.C . struct S {};. root -l -b. root [0] #undef TRY. root [1] .I /home/vagrant/workspace/root/src/interpreter/cling/include/. root [2] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/include/. root [3] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/tools/clang/include. root [4] .I /usr/lib/llvm-5.0/include. root [5] #include ""cling/Interpreter/Interpreter.h"". root [6] #include ""cling/Interpreter/LookupHelper.h"". root [7] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [8] #include ""T.C"". root [9] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) false. root [10] .undo 2. root [11] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [12] .q. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:763,usability,undo,undo,763,"Would that answer your concerns:. ```. cat T.C . struct S {};. root -l -b. root [0] #undef TRY. root [1] .I /home/vagrant/workspace/root/src/interpreter/cling/include/. root [2] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/include/. root [3] .I /home/vagrant/workspace/root/src/interpreter/llvm/src/tools/clang/include. root [4] .I /usr/lib/llvm-5.0/include. root [5] #include ""cling/Interpreter/Interpreter.h"". root [6] #include ""cling/Interpreter/LookupHelper.h"". root [7] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [8] #include ""T.C"". root [9] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) false. root [10] .undo 2. root [11] cling::runtime::gCling->getLookupHelper().findType(""S"", cling::LookupHelper::NoDiagnostics).isNull(). (bool) true. root [12] .q. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:154,integrability,messag,message,154,> Would that answer your concerns:. It shows that on this example it 'works'. It does not tell me *why* it works. (And all my questions from the previous message are still open (at least for me :) ). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:154,interoperability,messag,message,154,> Would that answer your concerns:. It shows that on this example it 'works'. It does not tell me *why* it works. (And all my questions from the previous message are still open (at least for me :) ). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:25,modifiability,concern,concerns,25,> Would that answer your concerns:. It shows that on this example it 'works'. It does not tell me *why* it works. (And all my questions from the previous message are still open (at least for me :) ). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:81,reliability,doe,does,81,> Would that answer your concerns:. It shows that on this example it 'works'. It does not tell me *why* it works. (And all my questions from the previous message are still open (at least for me :) ). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:25,testability,concern,concerns,25,> Would that answer your concerns:. It shows that on this example it 'works'. It does not tell me *why* it works. (And all my questions from the previous message are still open (at least for me :) ). Thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:38,deployability,unload,unloading,38,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:146,deployability,unload,unloading,146,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:66,integrability,buffer,buffers,66,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:20,performance,cach,cache,20,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:59,performance,memor,memory,59,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:112,performance,cach,cache,112,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:3,reliability,doe,does,3,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:48,usability,clear,clears,48,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:59,usability,memor,memory,59,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:40,deployability,unload,unloading,40,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:148,deployability,unload,unloading,148,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:68,integrability,buffer,buffers,68,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:22,performance,cach,cache,22,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:61,performance,memor,memory,61,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:114,performance,cach,cache,114,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:5,reliability,doe,does,5,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:315,testability,assert,assert,315,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:50,usability,clear,clears,50,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:61,usability,memor,memory,61,> It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design. Fair enough. Which part of the new code make it unreacheable? [I am distracted by LookupHelper.cpp line 87/88 that get an Invalid flag but 'only' assert on it],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:405,availability,avail,available,405,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:889,availability,failur,failure,889,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:195,deployability,contain,contains,195,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:246,deployability,unload,unloading,246,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:294,deployability,unload,unloaded,294,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:334,deployability,unload,unloaded,334,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:663,deployability,unload,unload,663,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:816,deployability,fail,fail,816,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:889,deployability,fail,failure,889,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:74,energy efficiency,alloc,allocate,74,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:706,integrability,buffer,buffers,706,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:232,modifiability,scenario,scenarios,232,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:87,performance,memor,memory,87,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:102,performance,content,contents,102,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:173,performance,memor,memory,173,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:322,performance,content,content,322,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:532,performance,cach,caching,532,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:754,performance,content,content,754,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:773,performance,cach,cached,773,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:889,performance,failur,failure,889,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:405,reliability,availab,available,405,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:499,reliability,doe,does,499,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:816,reliability,fail,fail,816,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:889,reliability,fail,failure,889,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:405,safety,avail,available,405,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:405,security,availab,available,405,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:590,testability,assert,asserts,590,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:87,usability,memor,memory,87,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:173,usability,memor,memory,173,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:. (a) There is nothing relevant being unloaded -- easy;. (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:60,safety,valid,validity,60,I am distracted by LookupHelper.cpp line 87/88 which get an validity flag but only assert on it. Which portion of the code implements the unreacheability?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:83,testability,assert,assert,83,I am distracted by LookupHelper.cpp line 87/88 which get an validity flag but only assert on it. Which portion of the code implements the unreacheability?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:56,deployability,unload,unloading,56,Please read my last comment where I explain why I think unloading is not a concern for the particular PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:75,modifiability,concern,concern,75,Please read my last comment where I explain why I think unloading is not a concern for the particular PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:75,testability,concern,concern,75,Please read my last comment where I explain why I think unloading is not a concern for the particular PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:18,integrability,messag,messages,18,Sorry for the 2nd messages there was a github 'snag' (was not seeing my own message nor your response). I still have to digest your response.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:76,integrability,messag,message,76,Sorry for the 2nd messages there was a github 'snag' (was not seeing my own message nor your response). I still have to digest your response.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:18,interoperability,messag,messages,18,Sorry for the 2nd messages there was a github 'snag' (was not seeing my own message nor your response). I still have to digest your response.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:76,interoperability,messag,message,76,Sorry for the 2nd messages there was a github 'snag' (was not seeing my own message nor your response). I still have to digest your response.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:375,availability,state,statement,375,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:857,availability,state,statement,857,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:190,deployability,fail,fail,190,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:449,deployability,unload,unloading,449,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:473,deployability,releas,released,473,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:594,deployability,releas,released,594,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:691,deployability,unload,unloading,691,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:910,deployability,version,version,910,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1038,deployability,unload,unloaded,1038,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1129,energy efficiency,load,load,1129,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1160,energy efficiency,load,load,1160,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:375,integrability,state,statement,375,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:649,integrability,buffer,buffer,649,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:742,integrability,buffer,buffer,742,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:857,integrability,state,statement,857,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:910,integrability,version,version,910,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:910,modifiability,version,version,910,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:128,performance,content,content,128,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:147,performance,cach,cached,147,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:642,performance,memor,memory-buffer,642,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:735,performance,memor,memory,735,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:773,performance,cach,cache,773,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1129,performance,load,load,1129,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1160,performance,load,load,1160,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:190,reliability,fail,fail,190,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:272,safety,test,test,272,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:832,safety,compl,complete,832,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:928,safety,valid,valid,928,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1009,safety,valid,valid,1009,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:832,security,compl,complete,832,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1051,security,modif,modified,1051,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:272,testability,test,test,272,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:300,testability,assert,assert,300,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:323,usability,behavi,behavior,323,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:359,usability,behavi,behavior,359,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:394,usability,indicat,indicate,394,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:642,usability,memor,memory-buffer,642,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:735,usability,memor,memory,735,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:1067,usability,user,user,1067,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used? is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)? Thanks for your patience :).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2483:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2483
https://github.com/root-project/root/pull/2487:77,performance,multi-thread,multi-threading,77,"@Axel-Naumann @couet . I guess, one can review my changes now. Main idea how multi-threading for graphics should look like you can see in new tutorials/v7/draw_mt.cxx macro (in this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:40,safety,review,review,40,"@Axel-Naumann @couet . I guess, one can review my changes now. Main idea how multi-threading for graphics should look like you can see in new tutorials/v7/draw_mt.cxx macro (in this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:40,testability,review,review,40,"@Axel-Naumann @couet . I guess, one can review my changes now. Main idea how multi-threading for graphics should look like you can see in new tutorials/v7/draw_mt.cxx macro (in this PR)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:58,integrability,interfac,interface,58,"> Should we merge? That about Axel? Here is important new interface was introduced - TWebWindow::Run(). It is equivalent of TApplication::Run(), but for extra threads where TWebWindows (and RCanvases) can be used fully independent from the main loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:58,interoperability,interfac,interface,58,"> Should we merge? That about Axel? Here is important new interface was introduced - TWebWindow::Run(). It is equivalent of TApplication::Run(), but for extra threads where TWebWindows (and RCanvases) can be used fully independent from the main loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:58,modifiability,interfac,interface,58,"> Should we merge? That about Axel? Here is important new interface was introduced - TWebWindow::Run(). It is equivalent of TApplication::Run(), but for extra threads where TWebWindows (and RCanvases) can be used fully independent from the main loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:190,reliability,RCa,RCanvases,190,"> Should we merge? That about Axel? Here is important new interface was introduced - TWebWindow::Run(). It is equivalent of TApplication::Run(), but for extra threads where TWebWindows (and RCanvases) can be used fully independent from the main loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:106,deployability,log,logic,106,"@Axel-Naumann . I implement most of your comments. There are two open questions. 1. Should we use special logic with ""mutex booking"" I used for some TWebWindowsManager functionality. . 2. That to do with TWebWindowsManager::IsMainThrd() function? I need functionality which says if I am in main application thread and have to call gSystem->ProcessEvents() when blocking thread for the long time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:390,performance,time,time,390,"@Axel-Naumann . I implement most of your comments. There are two open questions. 1. Should we use special logic with ""mutex booking"" I used for some TWebWindowsManager functionality. . 2. That to do with TWebWindowsManager::IsMainThrd() function? I need functionality which says if I am in main application thread and have to call gSystem->ProcessEvents() when blocking thread for the long time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:106,safety,log,logic,106,"@Axel-Naumann . I implement most of your comments. There are two open questions. 1. Should we use special logic with ""mutex booking"" I used for some TWebWindowsManager functionality. . 2. That to do with TWebWindowsManager::IsMainThrd() function? I need functionality which says if I am in main application thread and have to call gSystem->ProcessEvents() when blocking thread for the long time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:106,security,log,logic,106,"@Axel-Naumann . I implement most of your comments. There are two open questions. 1. Should we use special logic with ""mutex booking"" I used for some TWebWindowsManager functionality. . 2. That to do with TWebWindowsManager::IsMainThrd() function? I need functionality which says if I am in main application thread and have to call gSystem->ProcessEvents() when blocking thread for the long time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:106,testability,log,logic,106,"@Axel-Naumann . I implement most of your comments. There are two open questions. 1. Should we use special logic with ""mutex booking"" I used for some TWebWindowsManager functionality. . 2. That to do with TWebWindowsManager::IsMainThrd() function? I need functionality which says if I am in main application thread and have to call gSystem->ProcessEvents() when blocking thread for the long time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2487:35,integrability,sub,subsequent,35,fMutexBooked will be replaced in a subsequent PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2487
https://github.com/root-project/root/pull/2488:68,deployability,fail,fails,68,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2488
https://github.com/root-project/root/pull/2488:89,deployability,patch,patch,89,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2488
https://github.com/root-project/root/pull/2488:68,reliability,fail,fails,68,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2488
https://github.com/root-project/root/pull/2488:20,safety,test,test,20,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2488
https://github.com/root-project/root/pull/2488:89,safety,patch,patch,89,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2488
https://github.com/root-project/root/pull/2488:89,security,patch,patch,89,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2488
https://github.com/root-project/root/pull/2488:20,testability,test,test,20,@ktf Do you why the test.gtest_tree_dataframe_test_datasource_arrow fails? (this is v614 patch),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2488
https://github.com/root-project/root/pull/2489:24,safety,review,review,24,@dpiparo Thanks for the review! I addressed all your comments,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2489
https://github.com/root-project/root/pull/2489:24,testability,review,review,24,@dpiparo Thanks for the review! I addressed all your comments,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2489
https://github.com/root-project/root/pull/2491:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2491
https://github.com/root-project/root/pull/2492:88,safety,review,review,88,@pcanal working on it! I will assign to you as soon it will be ready (I put label don't review yet ;D),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:88,testability,review,review,88,@pcanal working on it! I will assign to you as soon it will be ready (I put label don't review yet ;D),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:852,deployability,configurat,configuration,852,"@Axel-Naumann @pcanal I believe that there are too many places that need to be changed when changing the default compression. We should have a single source of truth for the default, and use its value everywhere else. So, instead of using `1` and `4` directly, it would be much better to use `ROOT::DefaultCompressionAlgorithm` or something similar to that. One good reason for this is that it's really hard to find which `4`s mean `LZ4` and which are just a regular `4`. It also seems that `R__HAS_DEFAULT_LZMA` isn't used anywhere, so it would be quite hard to set the default to that at the moment. Finally, when a user sets the default on his/her config file to something else, it will not affect any of these places where `1` and `4` are used directly in ROOT. That's made even worse by the fact that setting `-Dcompression_default=lzma` at CMake configuration time will not change any of these as well, which will definitely make users very confused.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:852,integrability,configur,configuration,852,"@Axel-Naumann @pcanal I believe that there are too many places that need to be changed when changing the default compression. We should have a single source of truth for the default, and use its value everywhere else. So, instead of using `1` and `4` directly, it would be much better to use `ROOT::DefaultCompressionAlgorithm` or something similar to that. One good reason for this is that it's really hard to find which `4`s mean `LZ4` and which are just a regular `4`. It also seems that `R__HAS_DEFAULT_LZMA` isn't used anywhere, so it would be quite hard to set the default to that at the moment. Finally, when a user sets the default on his/her config file to something else, it will not affect any of these places where `1` and `4` are used directly in ROOT. That's made even worse by the fact that setting `-Dcompression_default=lzma` at CMake configuration time will not change any of these as well, which will definitely make users very confused.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:852,modifiability,configur,configuration,852,"@Axel-Naumann @pcanal I believe that there are too many places that need to be changed when changing the default compression. We should have a single source of truth for the default, and use its value everywhere else. So, instead of using `1` and `4` directly, it would be much better to use `ROOT::DefaultCompressionAlgorithm` or something similar to that. One good reason for this is that it's really hard to find which `4`s mean `LZ4` and which are just a regular `4`. It also seems that `R__HAS_DEFAULT_LZMA` isn't used anywhere, so it would be quite hard to set the default to that at the moment. Finally, when a user sets the default on his/her config file to something else, it will not affect any of these places where `1` and `4` are used directly in ROOT. That's made even worse by the fact that setting `-Dcompression_default=lzma` at CMake configuration time will not change any of these as well, which will definitely make users very confused.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:866,performance,time,time,866,"@Axel-Naumann @pcanal I believe that there are too many places that need to be changed when changing the default compression. We should have a single source of truth for the default, and use its value everywhere else. So, instead of using `1` and `4` directly, it would be much better to use `ROOT::DefaultCompressionAlgorithm` or something similar to that. One good reason for this is that it's really hard to find which `4`s mean `LZ4` and which are just a regular `4`. It also seems that `R__HAS_DEFAULT_LZMA` isn't used anywhere, so it would be quite hard to set the default to that at the moment. Finally, when a user sets the default on his/her config file to something else, it will not affect any of these places where `1` and `4` are used directly in ROOT. That's made even worse by the fact that setting `-Dcompression_default=lzma` at CMake configuration time will not change any of these as well, which will definitely make users very confused.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:852,security,configur,configuration,852,"@Axel-Naumann @pcanal I believe that there are too many places that need to be changed when changing the default compression. We should have a single source of truth for the default, and use its value everywhere else. So, instead of using `1` and `4` directly, it would be much better to use `ROOT::DefaultCompressionAlgorithm` or something similar to that. One good reason for this is that it's really hard to find which `4`s mean `LZ4` and which are just a regular `4`. It also seems that `R__HAS_DEFAULT_LZMA` isn't used anywhere, so it would be quite hard to set the default to that at the moment. Finally, when a user sets the default on his/her config file to something else, it will not affect any of these places where `1` and `4` are used directly in ROOT. That's made even worse by the fact that setting `-Dcompression_default=lzma` at CMake configuration time will not change any of these as well, which will definitely make users very confused.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:618,usability,user,user,618,"@Axel-Naumann @pcanal I believe that there are too many places that need to be changed when changing the default compression. We should have a single source of truth for the default, and use its value everywhere else. So, instead of using `1` and `4` directly, it would be much better to use `ROOT::DefaultCompressionAlgorithm` or something similar to that. One good reason for this is that it's really hard to find which `4`s mean `LZ4` and which are just a regular `4`. It also seems that `R__HAS_DEFAULT_LZMA` isn't used anywhere, so it would be quite hard to set the default to that at the moment. Finally, when a user sets the default on his/her config file to something else, it will not affect any of these places where `1` and `4` are used directly in ROOT. That's made even worse by the fact that setting `-Dcompression_default=lzma` at CMake configuration time will not change any of these as well, which will definitely make users very confused.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:936,usability,user,users,936,"@Axel-Naumann @pcanal I believe that there are too many places that need to be changed when changing the default compression. We should have a single source of truth for the default, and use its value everywhere else. So, instead of using `1` and `4` directly, it would be much better to use `ROOT::DefaultCompressionAlgorithm` or something similar to that. One good reason for this is that it's really hard to find which `4`s mean `LZ4` and which are just a regular `4`. It also seems that `R__HAS_DEFAULT_LZMA` isn't used anywhere, so it would be quite hard to set the default to that at the moment. Finally, when a user sets the default on his/her config file to something else, it will not affect any of these places where `1` and `4` are used directly in ROOT. That's made even worse by the fact that setting `-Dcompression_default=lzma` at CMake configuration time will not change any of these as well, which will definitely make users very confused.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:37,availability,state,statements,37,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:62,deployability,updat,update,62,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:156,deployability,releas,release,156,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:37,integrability,state,statements,37,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:140,performance,time,time,140,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:10,safety,compl,completely,10,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:62,safety,updat,update,62,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:10,security,compl,completely,10,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:62,security,updat,update,62,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2492:72,testability,plan,planned,72,"@amadio I completely agree with your statements. This type of update is planned but was not yet made. So better or worse, given the lack of time before the release, the easiest way to go back to zlib as the default is doing commit revert.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2492
https://github.com/root-project/root/pull/2493:11,deployability,build,build,11,@phsft-bot build! @ktf thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2493
https://github.com/root-project/root/pull/2494:11,deployability,build,build,11,@phsft-bot build! @ktf thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2494
https://github.com/root-project/root/pull/2494:50,safety,test,testing,50,Hopefully this is it. Sorry for the mess. My ROOT testing setup is a bit messed up right now and I was admittedly flying blind.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2494
https://github.com/root-project/root/pull/2494:50,testability,test,testing,50,Hopefully this is it. Sorry for the mess. My ROOT testing setup is a bit messed up right now and I was admittedly flying blind.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2494
https://github.com/root-project/root/pull/2495:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:19,deployability,fail,failing,19,Btw: #2490 fixed a failing `push_back` call from python because PyROOT does not support rvalue references.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:19,reliability,fail,failing,19,Btw: #2490 fixed a failing `push_back` call from python because PyROOT does not support rvalue references.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:71,reliability,doe,does,71,Btw: #2490 fixed a failing `push_back` call from python because PyROOT does not support rvalue references.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:80,usability,support,support,80,Btw: #2490 fixed a failing `push_back` call from python because PyROOT does not support rvalue references.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2495:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2495
https://github.com/root-project/root/pull/2496:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2496
https://github.com/root-project/root/pull/2496:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2496
https://github.com/root-project/root/pull/2496:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2496
https://github.com/root-project/root/pull/2496:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2496
https://github.com/root-project/root/pull/2496:4,energy efficiency,green,green,4,All green. We merge ! :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2496
https://github.com/root-project/root/pull/2497:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2497
https://github.com/root-project/root/pull/2497:73,safety,test,test,73,@stwunsch this pythonisation looks great. Is there a way in which we can test it too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2497
https://github.com/root-project/root/pull/2497:73,testability,test,test,73,@stwunsch this pythonisation looks great. Is there a way in which we can test it too?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2497
https://github.com/root-project/root/pull/2498:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2498
https://github.com/root-project/root/pull/2498:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2498
https://github.com/root-project/root/pull/2498:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2498
https://github.com/root-project/root/pull/2499:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2499
https://github.com/root-project/root/pull/2499:124,safety,test,testing,124,"Hi @vgvassilev This PR has a genuine problem with the include directories added to MathCore, please use a different one for testing, as this one won't work even if your changes to rootspi work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2499
https://github.com/root-project/root/pull/2499:124,testability,test,testing,124,"Hi @vgvassilev This PR has a genuine problem with the include directories added to MathCore, please use a different one for testing, as this one won't work even if your changes to rootspi work.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2499
https://github.com/root-project/root/pull/2499:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2499
https://github.com/root-project/root/pull/2501:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2501
https://github.com/root-project/root/pull/2501:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2501
https://github.com/root-project/root/pull/2501:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2501
https://github.com/root-project/root/pull/2501:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2501
https://github.com/root-project/root/pull/2502:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2502
https://github.com/root-project/root/pull/2502:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2502
https://github.com/root-project/root/pull/2505:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2505
https://github.com/root-project/root/pull/2505:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2505
https://github.com/root-project/root/pull/2506:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:144,deployability,releas,release,144,"If we are hit by this then so will be many, many users. Please make sure this (requesting Core != requesting Core + MathCore) gets added to the release notes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:90,energy efficiency,Core,Core,90,"If we are hit by this then so will be many, many users. Please make sure this (requesting Core != requesting Core + MathCore) gets added to the release notes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:109,energy efficiency,Core,Core,109,"If we are hit by this then so will be many, many users. Please make sure this (requesting Core != requesting Core + MathCore) gets added to the release notes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:49,usability,user,users,49,"If we are hit by this then so will be many, many users. Please make sure this (requesting Core != requesting Core + MathCore) gets added to the release notes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:0,availability,Failur,Failures,0,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:0,deployability,Fail,Failures,0,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:104,deployability,depend,dependencies,104,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:104,integrability,depend,dependencies,104,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:104,modifiability,depend,dependencies,104,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:0,performance,Failur,Failures,0,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:0,reliability,Fail,Failures,0,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:104,safety,depend,dependencies,104,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2506:104,testability,depend,dependencies,104,"Failures seem unrelated. @Axel-Naumann, we are only hit by this because of cxxmodules. There are header dependencies (usually Math/Math.h) and the pcm generation requires this. For regular ROOT that's not an issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2506
https://github.com/root-project/root/pull/2507:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2507
https://github.com/root-project/root/pull/2507:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2507
https://github.com/root-project/root/pull/2507:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2507
https://github.com/root-project/root/pull/2507:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2507
https://github.com/root-project/root/pull/2508:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2508
https://github.com/root-project/root/pull/2509:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2509
https://github.com/root-project/root/pull/2509:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2509
https://github.com/root-project/root/pull/2509:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2509
https://github.com/root-project/root/pull/2509:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2509
https://github.com/root-project/root/pull/2509:18,deployability,contain,contains,18,"This pull request contains a merge commit, please rebase it instead. It cannot be merged as it is. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2509
https://github.com/root-project/root/pull/2510:60,availability,failur,failure,60,https://github.com/root-project/root/pull/2512 should fix a failure. Thanks @vgvassilev for catch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:60,deployability,fail,failure,60,https://github.com/root-project/root/pull/2512 should fix a failure. Thanks @vgvassilev for catch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:60,performance,failur,failure,60,https://github.com/root-project/root/pull/2512 should fix a failure. Thanks @vgvassilev for catch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:60,reliability,fail,failure,60,https://github.com/root-project/root/pull/2512 should fix a failure. Thanks @vgvassilev for catch!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:126,availability,error,error,126,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:239,availability,failur,failure,239,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:239,deployability,fail,failure,239,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:451,energy efficiency,current,currently,451,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:126,performance,error,error,126,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:239,performance,failur,failure,239,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:315,performance,content,content,315,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:239,reliability,fail,failure,239,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:34,safety,detect,detects,34,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:126,safety,error,error,126,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:366,safety,compl,complexity,366,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:34,security,detect,detects,34,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:273,security,auth,author,273,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:366,security,compl,complexity,366,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:126,usability,error,error,126,"> We should have a facility which detects when a new file is added and it is not present in the lists. In that case we should error out. I think we discuss this before and it was concluded that if a new file was missing from the list, the failure would be 'obvious' to the author (i.e. no being able to use the new content) and thus it was not necessary to add this complexity and it corollary that the source directory must stay as pristine as it is currently required by the wildcards). I suppose we can re-discuss this further but I think it would have to be a different PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2510:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2510
https://github.com/root-project/root/pull/2511:0,availability,Failur,Failure,0,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:0,deployability,Fail,Failure,0,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:37,deployability,depend,dependency,37,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:37,integrability,depend,dependency,37,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:37,modifiability,depend,dependency,37,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:0,performance,Failur,Failure,0,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:0,reliability,Fail,Failure,0,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:37,safety,depend,dependency,37,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2511:37,testability,depend,dependency,37,Failure is unrelated (likely missing dependency in cmake/ctest).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2511
https://github.com/root-project/root/pull/2513:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:298,deployability,depend,depend,298,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:298,integrability,depend,depend,298,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:61,modifiability,interm,intermediate,61,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:298,modifiability,depend,depend,298,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:449,modifiability,interm,intermediate,449,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:298,safety,depend,depend,298,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:298,testability,depend,depend,298,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:393,usability,indicat,indicate,393,"This PR should be squashed on merge. I think that almost all intermediate commits won't work, so they should not be part of the git history. Some commits introduce changes to generate files in the source directory, then that gets reverted in a later commit, and another adds generated headers that depend on scripts added only in later commits, etc. I created a new label `squash on merge` to indicate which pull requests should be squashed. If all intermediate commits work, then there is no need to squash.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:49,modifiability,interm,intermediate,49,"I usually always ""squash and merge"" to avoid the intermediate steps",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:39,safety,avoid,avoid,39,"I usually always ""squash and merge"" to avoid the intermediate steps",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2513:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2513
https://github.com/root-project/root/pull/2515:55,interoperability,specif,specific,55,"@bluehood Yes, as soon as #2514 is merged I'll add the specific test for Display, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2515
https://github.com/root-project/root/pull/2515:64,safety,test,test,64,"@bluehood Yes, as soon as #2514 is merged I'll add the specific test for Display, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2515
https://github.com/root-project/root/pull/2515:64,testability,test,test,64,"@bluehood Yes, as soon as #2514 is merged I'll add the specific test for Display, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2515
https://github.com/root-project/root/pull/2515:31,safety,test,tests,31,"Thanks Danilo, I added all the tests I deem necessary now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2515
https://github.com/root-project/root/pull/2515:31,testability,test,tests,31,"Thanks Danilo, I added all the tests I deem necessary now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2515
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build just on mac1013/native,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:114,deployability,build,build,114,"Finally it is working for Mac. It seems the only platform having problems now is windows. Let's relaunch the full build on all platforms for a final check. Then, if only windows has problems, we might need @bellenot help to understand what's going on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:49,interoperability,platform,platform,49,"Finally it is working for Mac. It seems the only platform having problems now is windows. Let's relaunch the full build on all platforms for a final check. Then, if only windows has problems, we might need @bellenot help to understand what's going on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:127,interoperability,platform,platforms,127,"Finally it is working for Mac. It seems the only platform having problems now is windows. Let's relaunch the full build on all platforms for a final check. Then, if only windows has problems, we might need @bellenot help to understand what's going on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:224,testability,understand,understand,224,"Finally it is working for Mac. It seems the only platform having problems now is windows. Let's relaunch the full build on all platforms for a final check. Then, if only windows has problems, we might need @bellenot help to understand what's going on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:216,usability,help,help,216,"Finally it is working for Mac. It seems the only platform having problems now is windows. Let's relaunch the full build on all platforms for a final check. Then, if only windows has problems, we might need @bellenot help to understand what's going on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,"@phsft-bot build on slc6/gcc48, slc6-i686/gcc49, centos7/clang39, centos7/gcc62, centos7/gcc7, ubuntu16/native, mac1013/native, windows10/vc15 with flags -Dccache=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build on windows10/vc15 with flags -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2516:11,deployability,build,build,11,@phsft-bot build just on windows10/vc15,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2516
https://github.com/root-project/root/pull/2517:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2517
https://github.com/root-project/root/pull/2517:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2517
https://github.com/root-project/root/pull/2518:11,deployability,build,build,11,@phsft-bot build with flags -Dpyroot_experimental=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2518
https://github.com/root-project/root/pull/2518:51,testability,simpl,simplified,51,"All comments above have been implemented, the code simplified and better commented.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2518
https://github.com/root-project/root/pull/2518:51,usability,simpl,simplified,51,"All comments above have been implemented, the code simplified and better commented.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2518
https://github.com/root-project/root/pull/2519:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:870,availability,operat,operations,870,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:640,deployability,depend,depend,640,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:417,integrability,buffer,buffers,417,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:640,integrability,depend,depend,640,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:640,modifiability,depend,depend,640,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:661,performance,perform,performing,661,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:865,performance,time,time,865,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:640,safety,depend,depend,640,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:640,testability,depend,depend,640,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:661,usability,perform,performing,661,"@etejedor That sounds like a good idea. I've said before that this diff is so old that the Numpy parts can be cleanly removed and reimplemented on top of new developments from the past year. That should include TTree::AsMatrix. I was also thinking of some jagged and object types, which are considered ""destructive"" storage by BulkIO, yet are not too hard to reconstruct. The code I've written to interpret these raw buffers as structured data has been separated out of uproot so that it can be used independently*. I'll present that on Monday at the ROOT Workshop and we could talk about it then. * For instance, PyROOT could ""optionally"" depend on them, only performing a Python import inside a method call. The two libraries I'm taking about are awkward-array (for jaggedness and similarly difficult array structures) and uproot-methods (for Pythonic array-at-a-time operations).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:181,deployability,continu,continue,181,"@etejedor - given the comment from @jpivarski -- what do you think the best way forward is? Delay the numpy piece until later? I don't have a strong opinion here, as long as we can continue to push things in the right direction.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:342,integrability,interfac,interface,342,"@etejedor @bbocjelm I think a simple way to do it is to remove the differences in this pull request that touch PyROOT— my contributions. Then this pull request can concentrate on only the TBranch/TBasket/TBufferFile modifications in C++ and we can later add code to AsMatrix to make use of it. A year ago, AsMatrix didn't exist, so the Numpy interface was a one-off. Now that there's AsMatrix, there's a natural place to put it. Nothing in git is every lost— Enric can see how I implemented it and copy that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:342,interoperability,interfac,interface,342,"@etejedor @bbocjelm I think a simple way to do it is to remove the differences in this pull request that touch PyROOT— my contributions. Then this pull request can concentrate on only the TBranch/TBasket/TBufferFile modifications in C++ and we can later add code to AsMatrix to make use of it. A year ago, AsMatrix didn't exist, so the Numpy interface was a one-off. Now that there's AsMatrix, there's a natural place to put it. Nothing in git is every lost— Enric can see how I implemented it and copy that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:342,modifiability,interfac,interface,342,"@etejedor @bbocjelm I think a simple way to do it is to remove the differences in this pull request that touch PyROOT— my contributions. Then this pull request can concentrate on only the TBranch/TBasket/TBufferFile modifications in C++ and we can later add code to AsMatrix to make use of it. A year ago, AsMatrix didn't exist, so the Numpy interface was a one-off. Now that there's AsMatrix, there's a natural place to put it. Nothing in git is every lost— Enric can see how I implemented it and copy that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:216,security,modif,modifications,216,"@etejedor @bbocjelm I think a simple way to do it is to remove the differences in this pull request that touch PyROOT— my contributions. Then this pull request can concentrate on only the TBranch/TBasket/TBufferFile modifications in C++ and we can later add code to AsMatrix to make use of it. A year ago, AsMatrix didn't exist, so the Numpy interface was a one-off. Now that there's AsMatrix, there's a natural place to put it. Nothing in git is every lost— Enric can see how I implemented it and copy that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:30,testability,simpl,simple,30,"@etejedor @bbocjelm I think a simple way to do it is to remove the differences in this pull request that touch PyROOT— my contributions. Then this pull request can concentrate on only the TBranch/TBasket/TBufferFile modifications in C++ and we can later add code to AsMatrix to make use of it. A year ago, AsMatrix didn't exist, so the Numpy interface was a one-off. Now that there's AsMatrix, there's a natural place to put it. Nothing in git is every lost— Enric can see how I implemented it and copy that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:30,usability,simpl,simple,30,"@etejedor @bbocjelm I think a simple way to do it is to remove the differences in this pull request that touch PyROOT— my contributions. Then this pull request can concentrate on only the TBranch/TBasket/TBufferFile modifications in C++ and we can later add code to AsMatrix to make use of it. A year ago, AsMatrix didn't exist, so the Numpy interface was a one-off. Now that there's AsMatrix, there's a natural place to put it. Nothing in git is every lost— Enric can see how I implemented it and copy that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:49,safety,review,review,49,@pcanal - this one is ready for another round of review. I think Zhe and I hit all your outstanding comments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:49,testability,review,review,49,@pcanal - this one is ready for another round of review. I think Zhe and I hit all your outstanding comments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:11,deployability,build,build,11,"@phsft-bot build just on slc6/gcc48, slc6-i686/gcc49, centos7/clang39, centos7/gcc62, centos7/gcc7, ubuntu16/native, mac1013/native, windows10/vc15 with flags -Dccache=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2519:11,deployability,continu,continued,11,This PR is continued at https://github.com/root-project/root/pull/3612,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2519
https://github.com/root-project/root/pull/2520:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2520
https://github.com/root-project/root/pull/2520:11,deployability,build,build,11,@phsft-bot build !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2520
https://github.com/root-project/root/pull/2520:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2520
https://github.com/root-project/root/pull/2520:14,availability,failur,failures,14,Looks OK. The failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2520
https://github.com/root-project/root/pull/2520:14,deployability,fail,failures,14,Looks OK. The failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2520
https://github.com/root-project/root/pull/2520:14,performance,failur,failures,14,Looks OK. The failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2520
https://github.com/root-project/root/pull/2520:14,reliability,fail,failures,14,Looks OK. The failures are unrelated,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2520
https://github.com/root-project/root/pull/2521:0,availability,failur,failure,0,failure in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2521
https://github.com/root-project/root/pull/2521:0,deployability,fail,failure,0,failure in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2521
https://github.com/root-project/root/pull/2521:0,performance,failur,failure,0,failure in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2521
https://github.com/root-project/root/pull/2521:0,reliability,fail,failure,0,failure in unrelated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2521
https://github.com/root-project/root/pull/2523:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:19,deployability,fail,failing,19,I already see this failing on windows :see_no_evil:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:19,reliability,fail,failing,19,I already see this failing on windows :see_no_evil:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:111,safety,test,testdir,111,"hi @stwunsch , I guess we should document better that this is allowed :smile: . ```c++. RDataFrame df(""tree"", ""testdir/*.root""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:111,testability,test,testdir,111,"hi @stwunsch , I guess we should document better that this is allowed :smile: . ```c++. RDataFrame df(""tree"", ""testdir/*.root""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:33,usability,document,document,33,"hi @stwunsch , I guess we should document better that this is allowed :smile: . ```c++. RDataFrame df(""tree"", ""testdir/*.root""). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:35,performance,time,time,35,"Damnit, i had this helper for some time in my repo :grin:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:19,usability,help,helper,19,"Damnit, i had this helper for some time in my repo :grin:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2523:4,usability,close,close,4,and close this ^^,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2523
https://github.com/root-project/root/pull/2524:28,performance,time,time,28,"merged, there is (a lot of) time to change and improve things if needed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2524
https://github.com/root-project/root/pull/2531:11,deployability,build,build,11,"@phsft-bot build just on mac1013/native, mac1012/native",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2531
https://github.com/root-project/root/pull/2534:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2534
https://github.com/root-project/root/pull/2534:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2534
https://github.com/root-project/root/pull/2542:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Droofit=Off -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Droofit=Off -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:147,availability,error,error,147,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:300,availability,state,state,300,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:882,availability,Error,ErrorHandler,882,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:103,deployability,modul,module,103,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:114,deployability,fail,fails,114,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:283,deployability,unload,unloaded,283,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:612,deployability,Stack,StackTrace,612,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:638,deployability,build,build,638,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:672,deployability,build,build,672,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:678,deployability,build,build,678,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:795,deployability,build,build,795,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:829,deployability,build,build,829,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:835,deployability,build,build,835,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:908,deployability,build,build,908,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:942,deployability,build,build,942,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:948,deployability,build,build,948,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1060,deployability,build,build,1060,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1094,deployability,build,build,1094,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1100,deployability,build,build,1100,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1182,deployability,build,build,1182,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1216,deployability,build,build,1216,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1222,deployability,build,build,1222,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1313,deployability,build,build,1313,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1347,deployability,build,build,1347,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1353,deployability,build,build,1353,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1459,deployability,build,build,1459,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1493,deployability,build,build,1493,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1499,deployability,build,build,1499,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:524,energy efficiency,optim,optimized,524,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1749,energy efficiency,load,loaded,1749,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1815,energy efficiency,load,load,1815,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:300,integrability,state,state,300,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:103,modifiability,modul,module,103,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:147,performance,error,error,147,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:524,performance,optimiz,optimized,524,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:882,performance,Error,ErrorHandler,882,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1749,performance,load,loaded,1749,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1815,performance,load,load,1815,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:114,reliability,fail,fails,114,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:103,safety,modul,module,103,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:147,safety,error,error,147,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:882,safety,Error,ErrorHandler,882,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:147,usability,error,error,147,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:882,usability,Error,ErrorHandler,882,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:1567,usability,statu,status,1567,"@pcanal, could you give us a hand here? This PR removes the generation of rootmap files when we have a module. It fails because of similar to this error:. ```. Fatal in <TClass::SetUnloaded>: The TClass for ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> > is being unloaded when in state 3. aborting. #0 0x00007fe869e2a07a in __GI___waitpid (pid=12953, stat_loc=stat_loc. entry=0x7ffd87834410, options=options. entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29. #1 0x00007fe869da2fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148. #2 0x00007fe86af40302 in TUnixSystem::StackTrace() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #3 0x00007fe86ae177ba in DefaultErrorHandler(int, bool, char const*, char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #4 0x00007fe86ae17152 in ErrorHandler () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #5 0x00007fe86ae2ddbe in TObject::Fatal(char const*, char const*, ...) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #6 0x00007fe86aee13b6 in TClass::SetUnloaded() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #7 0x00007fe86ae94f94 in ROOT::RemoveClass(char const*) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #8 0x00007fe86af00bef in ROOT::TGenericClassInfo::~TGenericClassInfo() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so. #9 0x00007fe869d97ff8 in __run_exit_handlers (status=1, listp=0x7fe86a1225f8 <__exit_funcs>, run_list_atexit=run_list_atexit. entry=true) at exit.c:82. ```. Here we are destroying a TGenericClassInfo object which has never been loaded. I would guess that without having rootmap files around we load less classes (i.e. only the ones we actually need). Could you give an example when this happens or even better tell how to fix it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2542:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu16/rtcxxmod with flags -Dctest_test_exclude_none=on -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2542
https://github.com/root-project/root/pull/2543:11,deployability,build,build,11,@phsft-bot build just on slc6-i686/gcc49,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2543
https://github.com/root-project/root/pull/2545:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2545
https://github.com/root-project/root/pull/2545:11,deployability,build,build,11,"@phsft-bot build on slc6/gcc48, slc6-i686/gcc49, centos7/clang39, centos7/gcc62, centos7/gcc7, fedora28/native, ubuntu16/native, mac1013/native, windows10/vc15 with flags -Dccache=ON",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2545
https://github.com/root-project/root/pull/2546:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:0,deployability,Build,Building,0,Building again to get a fix in RDataFrame by @dpiparo.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:32,availability,failur,failure,32,I will merge manually. The test failure is not caused by my changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:32,deployability,fail,failure,32,I will merge manually. The test failure is not caused by my changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:32,performance,failur,failure,32,I will merge manually. The test failure is not caused by my changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:32,reliability,fail,failure,32,I will merge manually. The test failure is not caused by my changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:27,safety,test,test,27,I will merge manually. The test failure is not caused by my changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2546:27,testability,test,test,27,I will merge manually. The test failure is not caused by my changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2546
https://github.com/root-project/root/pull/2547:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2547
https://github.com/root-project/root/pull/2549:44,deployability,build,build,44,"hi, RSqliteDS is not in ROOT yet, so the PR build will fail, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:55,deployability,fail,fail,55,"hi, RSqliteDS is not in ROOT yet, so the PR build will fail, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:55,reliability,fail,fail,55,"hi, RSqliteDS is not in ROOT yet, so the PR build will fail, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:14,deployability,build,build,14,(will start a build when the datasource is in),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:49,deployability,build,builds,49,@amadio @Axel-Naumann do tutorials run in the PR builds?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:28,safety,review,reviewed,28,Assigning to @dpiparo as he reviewed the pr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:28,testability,review,reviewed,28,Assigning to @dpiparo as he reviewed the pr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:26,interoperability,coordinat,coordinate,26,@dpiparo @couet could you coordinate to get this into master?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:0,safety,review,reviewed,0,"reviewed in August, waiting for olivier to review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:43,safety,review,review,43,"reviewed in August, waiting for olivier to review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:0,testability,review,reviewed,0,"reviewed in August, waiting for olivier to review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:43,testability,review,review,43,"reviewed in August, waiting for olivier to review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:16,deployability,integr,integrated,16,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:56,energy efficiency,schedul,scheduled,56,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:16,integrability,integr,integrated,16,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:16,interoperability,integr,integrated,16,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:16,modifiability,integr,integrated,16,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:56,performance,schedul,scheduled,56,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:16,reliability,integr,integrated,16,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:66,safety,review,reviews,66,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:16,security,integr,integrated,16,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:16,testability,integr,integrated,16,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2549:66,testability,review,reviews,66,The pr has been integrated w/o waiting any more for the scheduled reviews.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2549
https://github.com/root-project/root/pull/2555:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2555
https://github.com/root-project/root/pull/2558:20,reliability,doe,does,20,"So before:. * cling does not know the type, type is not used in jitting: throw (not ok). * cling does not know the type, type is used in jitting: throw (ok). while now:. * cling does not know the type, type is not used in jitting: nothing happens at all (ok). * cling does not know the type, type is used in jitting: ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:97,reliability,doe,does,97,"So before:. * cling does not know the type, type is not used in jitting: throw (not ok). * cling does not know the type, type is used in jitting: throw (ok). while now:. * cling does not know the type, type is not used in jitting: nothing happens at all (ok). * cling does not know the type, type is used in jitting: ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:178,reliability,doe,does,178,"So before:. * cling does not know the type, type is not used in jitting: throw (not ok). * cling does not know the type, type is used in jitting: throw (ok). while now:. * cling does not know the type, type is not used in jitting: nothing happens at all (ok). * cling does not know the type, type is used in jitting: ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:268,reliability,doe,does,268,"So before:. * cling does not know the type, type is not used in jitting: throw (not ok). * cling does not know the type, type is used in jitting: throw (ok). while now:. * cling does not know the type, type is not used in jitting: nothing happens at all (ok). * cling does not know the type, type is used in jitting: ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:356,availability,error,error,356,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:390,availability,error,error,390,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:430,availability,error,error,430,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:292,integrability,Filter,Filter,292,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:362,integrability,messag,message,362,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:396,integrability,messag,message,396,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:362,interoperability,messag,message,362,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:396,interoperability,messag,message,396,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:437,modifiability,variab,variable,437,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:356,performance,error,error,356,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:390,performance,error,error,390,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:430,performance,error,error,430,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:269,reliability,doe,does,269,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:326,reliability,doe,does,326,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:27,safety,compl,complete,27,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:356,safety,error,error,356,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:390,safety,error,error,390,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:430,safety,error,error,430,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:834,safety,except,exception,834,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:945,safety,valid,valid,945,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:27,security,compl,complete,27,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:356,usability,error,error,356,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:390,usability,error,error,390,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2558:430,usability,error,error,430,"Example effect of the new, complete implementation:. ```.cpp. #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {. Double_t phi{0.0};. };. int main(). {. ROOT::RDataFrame d( 10 );. auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );. *dnotype.Count(); // does work. // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message. return 0;. }. ```. error message. ```. input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'). namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;. ^. input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'. namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }. ^. libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:. foo.phi > 0. Make sure it is valid C++. Abort trap: 6. ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2558
https://github.com/root-project/root/pull/2559:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2559
https://github.com/root-project/root/pull/2559:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2559
https://github.com/root-project/root/pull/2559:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2559
https://github.com/root-project/root/pull/2559:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2559
https://github.com/root-project/root/pull/2559:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2559
https://github.com/root-project/root/pull/2561:164,integrability,event,event,164,"TCling (and fInterpreter) are already initialized at the time when we parse `--pedantic` option, so I think we need to create the second Interpreter somehow. About event loop, I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2561
https://github.com/root-project/root/pull/2561:57,performance,time,time,57,"TCling (and fInterpreter) are already initialized at the time when we parse `--pedantic` option, so I think we need to create the second Interpreter somehow. About event loop, I see what you mean.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2561
https://github.com/root-project/root/pull/2561:198,performance,perform,performed,198,"> Can we change that? Interpreter is initialized in `ROOT::Internal::gGetROOT = &ROOT::Internal::GetROOT2;` in `TROOT::TROOT`, and the comment says `It must be the first ROOT related action that is performed by a program.`. I think in theory we can change the order of initialization (Parse option before initialization of TROOT) but I wasn't sure it was the right thing to do..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2561
https://github.com/root-project/root/pull/2561:198,usability,perform,performed,198,"> Can we change that? Interpreter is initialized in `ROOT::Internal::gGetROOT = &ROOT::Internal::GetROOT2;` in `TROOT::TROOT`, and the comment says `It must be the first ROOT related action that is performed by a program.`. I think in theory we can change the order of initialization (Parse option before initialization of TROOT) but I wasn't sure it was the right thing to do..",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2561
https://github.com/root-project/root/pull/2562:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2562
https://github.com/root-project/root/pull/2563:50,performance,time,time,50,@pcanal please add your review when you have some time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:24,safety,review,review,24,@pcanal please add your review when you have some time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:24,testability,review,review,24,@pcanal please add your review when you have some time.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:197,availability,error,error-cling-loadlibrary-while-compiling-in-root-,197,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:58,deployability,log,log,58,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:209,energy efficiency,load,loadlibrary-while-compiling-in-root-,209,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:197,performance,error,error-cling-loadlibrary-while-compiling-in-root-,197,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:406,performance,time,times,406,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:105,reliability,doe,does,105,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:58,safety,log,log,58,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:197,safety,error,error-cling-loadlibrary-while-compiling-in-root-,197,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:58,security,log,log,58,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:58,testability,log,log,58,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:197,usability,error,error-cling-loadlibrary-while-compiling-in-root-,197,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:264,usability,user,user,264,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:47,reliability,doe,does,47,"Can you remind me what ""good"" `ClassImp` still does? Legacy usage?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2563:177,usability,user,users,177,Fill the values of TClass::GetImplFileName/Line whether this is of value of not ... well who knows ... THtml and roofit still use this call (and who knows how many (or how few) users are 'still' using THtml) ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2563
https://github.com/root-project/root/pull/2564:54,deployability,version,version,54,"Ha, thanks, indeed. Could you move the handling of `--version` into `TApplication::GetOptions` (see core/base/TApplication.cxx)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:100,energy efficiency,core,core,100,"Ha, thanks, indeed. Could you move the handling of `--version` into `TApplication::GetOptions` (see core/base/TApplication.cxx)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:54,integrability,version,version,54,"Ha, thanks, indeed. Could you move the handling of `--version` into `TApplication::GetOptions` (see core/base/TApplication.cxx)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:54,modifiability,version,version,54,"Ha, thanks, indeed. Could you move the handling of `--version` into `TApplication::GetOptions` (see core/base/TApplication.cxx)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:8,deployability,version,version,8,Added --version to TApplication::GetOptions and removed all other variants.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:8,integrability,version,version,8,Added --version to TApplication::GetOptions and removed all other variants.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:8,modifiability,version,version,8,Added --version to TApplication::GetOptions and removed all other variants.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:47,interoperability,architectur,architecture,47,"O, and can you include the git commit hash and architecture? The commit you can get from gROOT. I don't know where to get the architecture from the top of my head, but check where ROOT prints the banner (TRint.cxx), it shows it, too. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:126,interoperability,architectur,architecture,126,"O, and can you include the git commit hash and architecture? The commit you can get from gROOT. I don't know where to get the architecture from the top of my head, but check where ROOT prints the banner (TRint.cxx), it shows it, too. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:38,security,hash,hash,38,"O, and can you include the git commit hash and architecture? The commit you can get from gROOT. I don't know where to get the architecture from the top of my head, but check where ROOT prints the banner (TRint.cxx), it shows it, too. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:175,deployability,version,version,175,@Axel-Naumann Sure I will do that. I will squash the commits when work will be complete and good to get merged. Can you kindly let me know if I should show it separately from version in next line? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:175,integrability,version,version,175,@Axel-Naumann Sure I will do that. I will squash the commits when work will be complete and good to get merged. Can you kindly let me know if I should show it separately from version in next line? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:175,modifiability,version,version,175,@Axel-Naumann Sure I will do that. I will squash the commits when work will be complete and good to get merged. Can you kindly let me know if I should show it separately from version in next line? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:79,safety,compl,complete,79,@Axel-Naumann Sure I will do that. I will squash the commits when work will be complete and good to get merged. Can you kindly let me know if I should show it separately from version in next line? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:79,security,compl,complete,79,@Axel-Naumann Sure I will do that. I will squash the commits when work will be complete and good to get merged. Can you kindly let me know if I should show it separately from version in next line? Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:85,deployability,version,version,85,Separate lines might be nicer for tooling (e.g. grepping the git commit from `root --version`. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:85,integrability,version,version,85,Separate lines might be nicer for tooling (e.g. grepping the git commit from `root --version`. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:85,modifiability,version,version,85,Separate lines might be nicer for tooling (e.g. grepping the git commit from `root --version`. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:34,usability,tool,tooling,34,Separate lines might be nicer for tooling (e.g. grepping the git commit from `root --version`. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:73,usability,user,user-images,73,"<img width=""518"" alt=""screen shot 2018-09-18 at 3 58 17 pm"" src=""https://user-images.githubusercontent.com/25840461/45683050-be10f300-bb5b-11e8-932e-9fd47e28364f.png"">. @Axel-Naumann Kindly see this attached screenshot. If this is good to go I will commit the code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:44,deployability,build,build,44,"Awesome! The date is the commit date or the build date? If commit date: perfect. If build date, consider moving it up one line, i.e. `Built for macosx64 on Sept 18,...`. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:84,deployability,build,build,84,"Awesome! The date is the commit date or the build date? If commit date: perfect. If build date, consider moving it up one line, i.e. `Built for macosx64 on Sept 18,...`. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:348,deployability,updat,update,348,"@Axel-Naumann It was built time. So I made it as you suggested. . <img width=""363"" alt=""screen shot 2018-09-18 at 10 23 37 pm"" src=""https://user-images.githubusercontent.com/25840461/45705853-1368f680-bb94-11e8-83ad-0d4ee78e9448.png"">. This is same in banner as well, means it is built time in banner which is written with commit details. Should I update it here or it should be done separately? Or I should just not do that now? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:27,performance,time,time,27,"@Axel-Naumann It was built time. So I made it as you suggested. . <img width=""363"" alt=""screen shot 2018-09-18 at 10 23 37 pm"" src=""https://user-images.githubusercontent.com/25840461/45705853-1368f680-bb94-11e8-83ad-0d4ee78e9448.png"">. This is same in banner as well, means it is built time in banner which is written with commit details. Should I update it here or it should be done separately? Or I should just not do that now? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:286,performance,time,time,286,"@Axel-Naumann It was built time. So I made it as you suggested. . <img width=""363"" alt=""screen shot 2018-09-18 at 10 23 37 pm"" src=""https://user-images.githubusercontent.com/25840461/45705853-1368f680-bb94-11e8-83ad-0d4ee78e9448.png"">. This is same in banner as well, means it is built time in banner which is written with commit details. Should I update it here or it should be done separately? Or I should just not do that now? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:348,safety,updat,update,348,"@Axel-Naumann It was built time. So I made it as you suggested. . <img width=""363"" alt=""screen shot 2018-09-18 at 10 23 37 pm"" src=""https://user-images.githubusercontent.com/25840461/45705853-1368f680-bb94-11e8-83ad-0d4ee78e9448.png"">. This is same in banner as well, means it is built time in banner which is written with commit details. Should I update it here or it should be done separately? Or I should just not do that now? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:348,security,updat,update,348,"@Axel-Naumann It was built time. So I made it as you suggested. . <img width=""363"" alt=""screen shot 2018-09-18 at 10 23 37 pm"" src=""https://user-images.githubusercontent.com/25840461/45705853-1368f680-bb94-11e8-83ad-0d4ee78e9448.png"">. This is same in banner as well, means it is built time in banner which is written with commit details. Should I update it here or it should be done separately? Or I should just not do that now? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:140,usability,user,user-images,140,"@Axel-Naumann It was built time. So I made it as you suggested. . <img width=""363"" alt=""screen shot 2018-09-18 at 10 23 37 pm"" src=""https://user-images.githubusercontent.com/25840461/45705853-1368f680-bb94-11e8-83ad-0d4ee78e9448.png"">. This is same in banner as well, means it is built time in banner which is written with commit details. Should I update it here or it should be done separately? Or I should just not do that now? Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:0,deployability,Updat,Updated,0,Updated the banner. Thanks!! Looking forward to contribute more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:0,safety,Updat,Updated,0,Updated the banner. Thanks!! Looking forward to contribute more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:0,security,Updat,Updated,0,Updated the banner. Thanks!! Looking forward to contribute more.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2564:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2564
https://github.com/root-project/root/pull/2566:60,security,session,session,60,Added also possibility to set gpu_options. . Added options `session.gpu_options.allow_growth= True` neded for running cuDNN on new RTX cards. See https://www.tensorflow.org/guide/using_gpu#allowing_gpu_memory_growth . and solution described here for RTX cards: . https://github.com/tensorflow/tensorflow/issues/24496,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2566
https://github.com/root-project/root/pull/2566:173,usability,guid,guide,173,Added also possibility to set gpu_options. . Added options `session.gpu_options.allow_growth= True` neded for running cuDNN on new RTX cards. See https://www.tensorflow.org/guide/using_gpu#allowing_gpu_memory_growth . and solution described here for RTX cards: . https://github.com/tensorflow/tensorflow/issues/24496,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2566
https://github.com/root-project/root/pull/2567:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2567
https://github.com/root-project/root/pull/2572:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2572:13,deployability,integr,integrated,13,all comments integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2572:13,integrability,integr,integrated,13,all comments integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2572:13,interoperability,integr,integrated,13,all comments integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2572:13,modifiability,integr,integrated,13,all comments integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2572:13,reliability,integr,integrated,13,all comments integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2572:13,security,integr,integrated,13,all comments integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2572:13,testability,integr,integrated,13,all comments integrated.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2572
https://github.com/root-project/root/pull/2573:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2573
https://github.com/root-project/root/pull/2577:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2577
https://github.com/root-project/root/pull/2578:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2578
https://github.com/root-project/root/pull/2578:16,usability,close,close,16,@jblomer can we close this? (replaced by #2608),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2578
https://github.com/root-project/root/pull/2578:35,usability,close,close,35,"@bluehood yes, please go ahead and close. The comments from this PR are part of #2608.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2578
https://github.com/root-project/root/pull/2579:2013,availability,State,State,2013,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2223,availability,state,state,2223,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2230,availability,state,state,2230,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2437,availability,State,State,2437,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:298,energy efficiency,Cpu,Cpu,298,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:384,energy efficiency,Cpu,Cpu,384,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:474,energy efficiency,Cpu,Cpu,474,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:565,energy efficiency,Cpu,Cpu,565,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:653,energy efficiency,Cpu,Cpu,653,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:748,energy efficiency,Cpu,Cpu,748,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:832,energy efficiency,Cpu,Cpu,832,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:914,energy efficiency,Cpu,Cpu,914,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1034,energy efficiency,Cpu,Cpu,1034,"till refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1115,energy efficiency,Cpu,Cpu,1115,"ist:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1213,energy efficiency,Cpu,Cpu,1213,"/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // Prin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1296,energy efficiency,Cpu,Cpu,1296,"Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1378,energy efficiency,Cpu,Cpu,1378,"res/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1487,energy efficiency,Cpu,Cpu,1487,".cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1576,energy efficiency,Cpu,Cpu,1576,"on.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1660,energy efficiency,Cpu,Cpu,1660,"gation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1759,energy efficiency,Cpu,Cpu,1759,"on.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_g",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1854,energy efficiency,Cpu,Cpu,1854,"rintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1942,energy efficiency,Cpu,Cpu,1942,"trix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2060,energy efficiency,Cpu,Cpu,2060,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2178,energy efficiency,Cpu,Cpu,2178,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2272,energy efficiency,Cpu,Cpu,2272,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2366,energy efficiency,Cpu,Cpu,2366,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2484,energy efficiency,Cpu,Cpu,2484,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2602,energy efficiency,Cpu,Cpu,2602,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2709,energy efficiency,Cpu,Cpu,2709,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2013,integrability,State,State,2013,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2223,integrability,state,state,2223,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2230,integrability,state,state,2230,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2437,integrability,State,State,2437,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:284,interoperability,Architectur,Architectures,284,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:370,interoperability,Architectur,Architectures,370,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:460,interoperability,Architectur,Architectures,460,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:551,interoperability,Architectur,Architectures,551,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:639,interoperability,Architectur,Architectures,639,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:734,interoperability,Architectur,Architectures,734,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:818,interoperability,Architectur,Architectures,818,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:900,interoperability,Architectur,Architectures,900,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1020,interoperability,Architectur,Architectures,1020,"s which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1101,interoperability,Architectur,Architectures,1101,"re is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(inp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1199,interoperability,Architectur,Architectures,1199,"/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1282,interoperability,Architectur,Architectures,1282,"tectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentProp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1364,interoperability,Architectur,Architectures,1364,"rchitectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1473,interoperability,Architectur,Architectures,1473,"opagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1562,interoperability,Architectur,Architectures,1562,"Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1646,interoperability,Architectur,Architectures,1646,"Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_g",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1745,interoperability,Architectur,Architectures,1745,"Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1840,interoperability,Architectur,Architectures,1840,".cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""wei",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1928,interoperability,Architectur,Architectures,1928,"//PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2046,interoperability,Architectur,Architectures,2046,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2164,interoperability,Architectur,Architectures,2164,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2258,interoperability,Architectur,Architectures,2258,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2352,interoperability,Architectur,Architectures,2352,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2470,interoperability,Architectur,Architectures,2470,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2588,interoperability,Architectur,Architectures,2588,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2695,interoperability,Architectur,Architectures,2695,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:298,performance,Cpu,Cpu,298,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:384,performance,Cpu,Cpu,384,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:474,performance,Cpu,Cpu,474,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:565,performance,Cpu,Cpu,565,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:653,performance,Cpu,Cpu,653,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:748,performance,Cpu,Cpu,748,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:832,performance,Cpu,Cpu,832,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:914,performance,Cpu,Cpu,914,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1034,performance,Cpu,Cpu,1034,"till refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1115,performance,Cpu,Cpu,1115,"ist:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1213,performance,Cpu,Cpu,1213,"/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // Prin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1296,performance,Cpu,Cpu,1296,"Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1378,performance,Cpu,Cpu,1378,"res/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentP",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1487,performance,Cpu,Cpu,1487,".cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1576,performance,Cpu,Cpu,1576,"on.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmv",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1660,performance,Cpu,Cpu,1660,"gation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1759,performance,Cpu,Cpu,1759,"on.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_g",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1854,performance,Cpu,Cpu,1854,"rintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:1942,performance,Cpu,Cpu,1942,"trix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2060,performance,Cpu,Cpu,2060,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2178,performance,Cpu,Cpu,2178,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2272,performance,Cpu,Cpu,2272,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2366,performance,Cpu,Cpu,2366,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2484,performance,Cpu,Cpu,2484,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2602,performance,Cpu,Cpu,2602,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2709,performance,Cpu,Cpu,2709,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:186,safety,input,inputTr,186,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:513,safety,input,input,513,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2129,safety,input,input,2129,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2317,safety,input,input,2317,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2324,safety,input,input,2324,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2553,safety,input,input,2553,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2770,safety,input,input,2770,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2795,safety,test,test,2795,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2808,safety,Test,TestConvNet,2808,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2872,safety,test,test,2872,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2885,safety,Test,TestConvNet,2885,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2918,safety,input,input,2918,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2938,safety,test,test,2938,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2951,safety,Test,TestConvNet,2951,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2795,testability,test,test,2795,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2808,testability,Test,TestConvNet,2808,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2872,testability,test,test,2872,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2885,testability,Test,TestConvNet,2885,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2938,testability,test,test,2938,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2951,testability,Test,TestConvNet,2951,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:186,usability,input,inputTr,186,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:513,usability,input,input,513,"There are quite a few places which still refer to 'PrintMatrix', most of them commented out, but not all. Here is a list:. ```. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // // PrintMatrix(inputTr);. tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h: // //PrintMatrix(inputTr2);. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(A,""FromIm2Col""); . tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(A,""FromFastIm2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(B,""input to Im2Col"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weights,""weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(rotWeights,""rot-weights"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df[i]"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(dfTr,""dfTr"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationGradientsBackward[i],""activGrad-result"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradien",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2129,usability,input,input,2129,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2317,usability,input,input,2317,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2324,usability,input,input,2324,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2553,usability,input,input,2553,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2770,usability,input,input,2770,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:2918,usability,input,input,2918,"a/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""df"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(df[i],""df-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(xTr,""xTr-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(activationsBackward[i],""actbackward-i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res_ofMT"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(vres[i],""res"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: // PrintMatrix(weightGradients,""weights_i"");. tmva/tmva/src/DNN/Architectures/Cpu/Propagation.cxx: //PrintMatrix(weightGradients,""W-Grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(df,""DF"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state,""state"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input,""input"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(state_gradients_backward,""State grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_weight_gradients,""input w grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(bias_gradients,""bias grad"");. tmva/tmva/src/DNN/Architectures/Cpu/RecurrentPropagation.cxx: // PrintMatrix(input_gradient,""input grad"");. tmva/tmva/test/DNN/CNN/TestConvNet.h:// PrintMatrix(w0[i],""weight-layer0"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(X[i],""input"");. tmva/tmva/test/DNN/CNN/TestConvNet.h: PrintMatrix(df[ii],""Derivatives"");. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:146,deployability,updat,updated,146,"@bastianbeischer Thanks for the catch. Sidenote, those places that seemed not commented out were effectively so because of debug defines. All are updated now anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:146,safety,updat,updated,146,"@bastianbeischer Thanks for the catch. Sidenote, those places that seemed not commented out were effectively so because of debug defines. All are updated now anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:146,security,updat,updated,146,"@bastianbeischer Thanks for the catch. Sidenote, those places that seemed not commented out were effectively so because of debug defines. All are updated now anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:97,usability,effectiv,effectively,97,"@bastianbeischer Thanks for the catch. Sidenote, those places that seemed not commented out were effectively so because of debug defines. All are updated now anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2579:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2579
https://github.com/root-project/root/pull/2581:19,deployability,patch,patch,19,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:158,deployability,version,version,158,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:501,deployability,version,version,501,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:158,integrability,version,version,158,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:501,integrability,version,version,501,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:227,interoperability,standard,standard,227,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:158,modifiability,version,version,158,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:501,modifiability,version,version,501,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:19,safety,patch,patch,19,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:80,safety,test,testing,80,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:19,security,patch,patch,19,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:80,testability,test,testing,80,"I am not sure that patch is correct. You try to put old-style Linux code before testing glibc and trying to use pthread_setname_np - which should be favorite version. Seems to be, for MacOS there is another variant of that non-standard function - see https://ghc.haskell.org/trac/ghc/ticket/9684. Seems to be, code should be:. #elif defined(_GNU_SOURCE) && defined(__GLIBC__) \. && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12))). 	 /* pthread_setname_np first appeared in glibc in version 2.12*/. #if defined(__MACH__). 	 (void)pthread_setname_np(threadName);. #else. (void)pthread_setname_np(pthread_self(), threadName);. #endif. #elif defined(__linux__). 	 /* on linux we can use the old prctl function */. 	(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);. #endif.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:673,availability,avail,available,673,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:88,deployability,patch,patch,88,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:186,deployability,build,build,186,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:224,deployability,build,build,224,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:272,deployability,BUILD,BUILDTYPE,272,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:736,deployability,patch,patch,736,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:699,performance,time,time,699,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:94,reliability,doe,doesn,94,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:673,reliability,availab,available,673,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:88,safety,patch,patch,88,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:673,safety,avail,available,673,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:736,safety,patch,patch,736,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:88,security,patch,patch,88,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:673,security,availab,available,673,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:736,security,patch,patch,736,"@linev here i am talking about case when we use clang for linux (for example sl6). Your patch doesn't fix existing problem. I tried and I see next:. ```. [sftnight@lcgapp-slc6-x86-64-39 build]$ make -j8 | grep warning. /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc52/LABEL/slc6/root/net/http/civetweb/civetweb.c:2704:16: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ```. The problem that I am trying to resolve here is that for the case of **clang & linux combination**, where pthread_setname_np() is not available but in the same time _GNU_SOURCE is defined. With my patch, the warning seems to be disappeared.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:32,safety,test,testing,32,"I just wrote simple program and testing it with **g++** and **clang**. To compile with clang, I need ""-pthread"" compiler flags.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:13,testability,simpl,simple,13,"I just wrote simple program and testing it with **g++** and **clang**. To compile with clang, I need ""-pthread"" compiler flags.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:32,testability,test,testing,32,"I just wrote simple program and testing it with **g++** and **clang**. To compile with clang, I need ""-pthread"" compiler flags.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:13,usability,simpl,simple,13,"I just wrote simple program and testing it with **g++** and **clang**. To compile with clang, I need ""-pthread"" compiler flags.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:33,usability,close,closed,33,Should both this and PR #2584 be closed then?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:80,security,sign,signature,80,"@Axel-Naumann . Fix in #2584 is for Mac, where pthread_setname_np has different signature as on Linux. Here is warning in clang - which most probably caused by missing compilation flags ""-pthread""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:246,deployability,build,build,246,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:294,deployability,BUILD,BUILDTYPE,294,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:342,deployability,build,build,342,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:575,deployability,build,build,575,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:623,deployability,BUILD,BUILDTYPE,623,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:671,deployability,build,build,671,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:985,deployability,build,build,985,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1033,deployability,BUILD,BUILDTYPE,1033,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1081,deployability,build,build,1081,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1147,deployability,stack,stack,1147,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1158,deployability,modul,module-import-in-extern-c,1158,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1202,deployability,build,build,1202,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1250,deployability,BUILD,BUILDTYPE,1250,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1298,deployability,build,build,1298,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1312,deployability,modul,modulemap,1312,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1452,deployability,build,build,1452,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1500,deployability,BUILD,BUILDTYPE,1500,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1359,integrability,sub,submodule-visibility,1359,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1158,modifiability,modul,module-import-in-extern-c,1158,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1312,modifiability,modul,modulemap,1312,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:969,performance,cach,cache-path,969,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:908,reliability,diagno,diagnostics,908,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1158,safety,modul,module-import-in-extern-c,1158,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1312,safety,modul,modulemap,1312,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:908,testability,diagno,diagnostics,908,"@linev, sadly i just checked that while compiling civetweb, ROOT has already -pthead flag, that is actually a global ROOT CXX flag and warning is still there. I think my fix is actually could be right, can you check it please again? ```. cd /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/net/http && /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/bin/ccache /cvmfs/sft.cern.ch/lcg/contrib/llvm/latest/x86_64-slc6-gcc62-opt/bin/clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread -o CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o -c /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/root/net/http/civetweb/civetweb.c. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:546,availability,error,error,546,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:552,integrability,messag,message,552,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:114,interoperability,standard,standard,114,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:552,interoperability,messag,message,552,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:546,performance,error,error,546,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:222,safety,test,test,222,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:516,safety,test,test,516,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:546,safety,error,error,546,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:85,testability,simpl,simply,85,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:222,testability,test,test,222,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:328,testability,simpl,simple,328,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:516,testability,test,test,516,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:85,usability,simpl,simply,85,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:328,usability,simpl,simple,328,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:546,usability,error,error,546,"> I think my fix is actually could be right, can you check it please again? Your fix simply removes usage of semi-standard pthread_setname_np function on linux. It is not right solution in my mind. Unfortunately, I cannot test with clang8. . With clang-6.0.1 I see no problems. That you always can do - try to compile following simple program:. #include ""civetweb.h"". int main(int argc, char **argv). {. return 0;. }. Just copy it into net/http/civetweb directory and call:. clang -pthread civetweb.c main.c -ldl -o test . Can you reproduce your error message?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:41,availability,slo,slowly,41,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:86,deployability,modul,modules,86,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:94,deployability,build,build,94,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:111,deployability,modul,modulemap,111,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:152,deployability,modul,modulemap,152,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:223,deployability,modul,modulemap,223,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:280,deployability,build,build,280,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:328,deployability,BUILD,BUILDTYPE,328,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:376,deployability,build,build,376,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:390,deployability,modul,modulemap,390,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:659,deployability,build,build,659,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:707,deployability,BUILD,BUILDTYPE,707,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:755,deployability,build,build,755,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1069,deployability,build,build,1069,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1117,deployability,BUILD,BUILDTYPE,1117,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1165,deployability,build,build,1165,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1231,deployability,stack,stack,1231,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1242,deployability,modul,module-import-in-extern-c,1242,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1286,deployability,build,build,1286,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1334,deployability,BUILD,BUILDTYPE,1334,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1382,deployability,build,build,1382,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1396,deployability,modul,modulemap,1396,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:48,energy efficiency,reduc,reducing,48,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1443,integrability,sub,submodule-visibility,1443,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:86,modifiability,modul,modules,86,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:111,modifiability,modul,modulemap,111,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:152,modifiability,modul,modulemap,152,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:223,modifiability,modul,modulemap,223,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:390,modifiability,modul,modulemap,390,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1242,modifiability,modul,module-import-in-extern-c,1242,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1396,modifiability,modul,modulemap,1396,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1763,modifiability,paramet,parameter,1763,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1790,modifiability,paramet,parameter,1790,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1870,modifiability,paramet,parameter,1870,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1897,modifiability,paramet,parameter,1897,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1053,performance,cach,cache-path,1053,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:41,reliability,slo,slowly,41,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:992,reliability,diagno,diagnostics,992,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:86,safety,modul,modules,86,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:111,safety,modul,modulemap,111,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:152,safety,modul,modulemap,152,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:223,safety,modul,modulemap,223,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:244,safety,test,testing,244,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:390,safety,modul,modulemap,390,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:483,safety,detect,detection,483,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1242,safety,modul,module-import-in-extern-c,1242,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1396,safety,modul,modulemap,1396,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1511,safety,test,test,1511,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:483,security,detect,detection,483,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:244,testability,test,testing,244,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:992,testability,diagno,diagnostics,992,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:1511,testability,test,test,1511,"n . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and my apologies again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:504,usability,clear,clear,504,"@linev @Axel-Naumann . my apologies, now slowly reducing amount of flags used for C++ modules build I see that modulemap.overlay file with libc and stl modulemap files is causing these problem. I think it is missing pthead modulemap file, I am testing it.. ```. -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml. ```. So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug):. ```. [sftnight@lcgapp-slc6-x86-64-32 civetweb]$ clang -DHTTP_WITHOUT_FASTCGI -DNO_SSL_DL -DUSE_WEBSOCKET -I/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include -I/cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/lib/cmake/VecCore/../../../include -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include -Qunused-arguments -fcolor-diagnostics -pipe -m64 -Wall -W -pthread -fmodules -fmodules-cache-path=/mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/pcms/ -fno-autolink -fdiagnostics-show-note-include-stack -Wno-module-import-in-extern-c -ivfsoverlay /mnt/build/jenkins/workspace/root-nightly-cxxmodules/BUILDTYPE/Debug/COMPILER/clang_gcc62/LABEL/slc6/build/include/modulemap.overlay.yaml -Xclang -fmodules-local-submodule-visibility -g -fPIC -pthread civetweb.c example.c -ldl -o test. civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration]. (void)pthread_setname_np(pthread_self(), threadName);. ^. 1 warning generated. example.c:3:14: warning: unused parameter 'argc' [-Wunused-parameter]. int main(int argc, char **argv). ^. example.c:3:27: warning: unused parameter 'argv' [-Wunused-parameter]. int main(int argc, char **argv). ^. 2 warnings generated. ```. We will investigate why and ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:66,safety,detect,detection,66,"> So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug. There are much more options. May be some of them mix up system include files. Especially following option is very suspicious:. -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include . Could you try compilation of my simple example without all these extra includes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:66,security,detect,detection,66,"> So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug. There are much more options. May be some of them mix up system include files. Especially following option is very suspicious:. -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include . Could you try compilation of my simple example without all these extra includes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:377,testability,simpl,simple,377,"> So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug. There are much more options. May be some of them mix up system include files. Especially following option is very suspicious:. -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include . Could you try compilation of my simple example without all these extra includes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:87,usability,clear,clear,87,"> So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug. There are much more options. May be some of them mix up system include files. Especially following option is very suspicious:. -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include . Could you try compilation of my simple example without all these extra includes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2581:377,usability,simpl,simple,377,"> So somehow -vfsoverlay is triggering the false positive warning detection (it is not clear for me why, maybe it is clang bug. There are much more options. May be some of them mix up system include files. Especially following option is very suspicious:. -isystem /cvmfs/sft.cern.ch/lcg/views/LCG_rootext20180517/x86_64-slc6-gcc62-opt/include . Could you try compilation of my simple example without all these extra includes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2581
https://github.com/root-project/root/pull/2583:118,availability,error,error,118,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2583:73,integrability,event,events,73,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2583:124,integrability,messag,message,124,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2583:124,interoperability,messag,message,124,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2583:118,performance,error,error,118,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2583:118,safety,error,error,118,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2583:23,security,ident,identified,23,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2583:118,usability,error,error,118,The solution which was identified at the last IO meeting was to skip all events which could not be read and prompt an error message w/o crashing. All this should be done at the TTreeReader level.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2583
https://github.com/root-project/root/pull/2584:51,availability,failur,failure,51,"Seems to be, compilation on mac is working - I see failure only in some roofit tests. One could merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:51,deployability,fail,failure,51,"Seems to be, compilation on mac is working - I see failure only in some roofit tests. One could merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:51,performance,failur,failure,51,"Seems to be, compilation on mac is working - I see failure only in some roofit tests. One could merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:51,reliability,fail,failure,51,"Seems to be, compilation on mac is working - I see failure only in some roofit tests. One could merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:79,safety,test,tests,79,"Seems to be, compilation on mac is working - I see failure only in some roofit tests. One could merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:79,testability,test,tests,79,"Seems to be, compilation on mac is working - I see failure only in some roofit tests. One could merge this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:5,deployability,patch,patch,5,This patch was applied to civetweb repository: https://github.com/civetweb/civetweb/pull/652,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:35,integrability,repositor,repository,35,This patch was applied to civetweb repository: https://github.com/civetweb/civetweb/pull/652,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:35,interoperability,repositor,repository,35,This patch was applied to civetweb repository: https://github.com/civetweb/civetweb/pull/652,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:5,safety,patch,patch,5,This patch was applied to civetweb repository: https://github.com/civetweb/civetweb/pull/652,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:5,security,patch,patch,5,This patch was applied to civetweb repository: https://github.com/civetweb/civetweb/pull/652,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:11,deployability,build,build,11,@phdft-bot build just on slc6/clang_gcc62,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:11,deployability,build,build,11,@phsft-bot build just on slc6/clang_gcc62 with flags -Dcxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2584:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2584
https://github.com/root-project/root/pull/2585:233,safety,test,test,233,"Hi @Axel-Naumann. I think this fixes the problem. However, in some other places in ROOT where `strncpy()` is used wrong in a similar way, the fixes are not always as easy. There is one in TROOT that when I fixed like this it broke a test...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2585
https://github.com/root-project/root/pull/2585:233,testability,test,test,233,"Hi @Axel-Naumann. I think this fixes the problem. However, in some other places in ROOT where `strncpy()` is used wrong in a similar way, the fixes are not always as easy. There is one in TROOT that when I fixed like this it broke a test...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2585
https://github.com/root-project/root/pull/2585:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2585
https://github.com/root-project/root/pull/2585:0,availability,Failur,Failures,0,Failures are bogus / Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2585
https://github.com/root-project/root/pull/2585:0,deployability,Fail,Failures,0,Failures are bogus / Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2585
https://github.com/root-project/root/pull/2585:0,performance,Failur,Failures,0,Failures are bogus / Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2585
https://github.com/root-project/root/pull/2585:0,reliability,Fail,Failures,0,Failures are bogus / Jenkins,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2585
https://github.com/root-project/root/pull/2586:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2586
https://github.com/root-project/root/pull/2587:30,usability,help,helper,30,motivation being that all the helper functions were hard to find,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2587
https://github.com/root-project/root/pull/2589:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2589
https://github.com/root-project/root/pull/2591:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on -Droofit=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:185,deployability,modul,modules,185,"@vgvassilev . I think we don't have to do Evaluate each time, rather declaring RuntimePrintValue is kind for users. Also as I wrote in a commit message, this will be a no-op with Cling modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:144,integrability,messag,message,144,"@vgvassilev . I think we don't have to do Evaluate each time, rather declaring RuntimePrintValue is kind for users. Also as I wrote in a commit message, this will be a no-op with Cling modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:144,interoperability,messag,message,144,"@vgvassilev . I think we don't have to do Evaluate each time, rather declaring RuntimePrintValue is kind for users. Also as I wrote in a commit message, this will be a no-op with Cling modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:185,modifiability,modul,modules,185,"@vgvassilev . I think we don't have to do Evaluate each time, rather declaring RuntimePrintValue is kind for users. Also as I wrote in a commit message, this will be a no-op with Cling modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:56,performance,time,time,56,"@vgvassilev . I think we don't have to do Evaluate each time, rather declaring RuntimePrintValue is kind for users. Also as I wrote in a commit message, this will be a no-op with Cling modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:185,safety,modul,modules,185,"@vgvassilev . I think we don't have to do Evaluate each time, rather declaring RuntimePrintValue is kind for users. Also as I wrote in a commit message, this will be a no-op with Cling modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:109,usability,user,users,109,"@vgvassilev . I think we don't have to do Evaluate each time, rather declaring RuntimePrintValue is kind for users. Also as I wrote in a commit message, this will be a no-op with Cling modules",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:116,availability,slo,slower,116,"IMHO we should fix the invocation of printValue in RDF to use the official cling interface, instead of making cling slower to start up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:81,integrability,interfac,interface,81,"IMHO we should fix the invocation of printValue in RDF to use the official cling interface, instead of making cling slower to start up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:81,interoperability,interfac,interface,81,"IMHO we should fix the invocation of printValue in RDF to use the official cling interface, instead of making cling slower to start up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:81,modifiability,interfac,interface,81,"IMHO we should fix the invocation of printValue in RDF to use the official cling interface, instead of making cling slower to start up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:116,reliability,slo,slower,116,"IMHO we should fix the invocation of printValue in RDF to use the official cling interface, instead of making cling slower to start up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:496,availability,down,downside,496,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:53,deployability,modul,modules,53,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:77,deployability,modul,modules,77,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:100,deployability,patch,patch,100,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:288,deployability,patch,patch,288,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:157,energy efficiency,cpu,cpu,157,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:347,energy efficiency,cpu,cpu,347,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:53,modifiability,modul,modules,53,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:77,modifiability,modul,modules,77,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:23,performance,perform,performance,23,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:145,performance,memor,memory,145,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:157,performance,cpu,cpu,157,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:161,performance,time,time,161,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:190,performance,time,time,190,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:219,performance,memor,memory,219,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:248,performance,memor,memory,248,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:333,performance,memor,memory,333,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:347,performance,cpu,cpu,347,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:351,performance,time,time,351,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:381,performance,time,time,381,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:411,performance,memor,memory,411,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:441,performance,memor,memory,441,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:8,reliability,doe,doesn,8,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:53,safety,modul,modules,53,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:77,safety,modul,modules,77,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:100,safety,patch,patch,100,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:288,safety,patch,patch,288,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:100,security,patch,patch,100,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:288,security,patch,patch,288,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:23,usability,perform,performance,23,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:145,usability,memor,memory,145,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:219,usability,memor,memory,219,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:248,usability,memor,memory,248,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:333,usability,memor,memory,333,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:411,usability,memor,memory,411,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2591:441,usability,memor,memory,441,Also it doesn't change performance at all with cling modules. (Also with non-modules). Without this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... cpu time = 0.233852 seconds. sys time = 0.092215 seconds. res memory = 210.836 Mbytes. vir memory = 346.195 Mbytes. ```. With this patch:. ```. Processing /home/yuka/CERN/ROOT/memory.C... . cpu time = 0.248781 seconds . sys time = 0.067224 seconds . res memory = 210.258 Mbytes . vir memory = 345.773 Mbytes . ```. So I think there is not downside for this,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2591
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:15,energy efficiency,load,loading,15,We should skip loading rootmap files only if we have a pcm file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:15,performance,load,loading,15,We should skip loading rootmap files only if we have a pcm file.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:12,deployability,patch,patch,12,The current patch essentially disabled rootmap files if we built with -Druntime_cxxmodules=On. That would break experiments which will still use the incremental approach where ROOT will rely on pcm files and their libraries on rootmaps. We should not read the rootmap files which have a preloaded module.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:297,deployability,modul,module,297,The current patch essentially disabled rootmap files if we built with -Druntime_cxxmodules=On. That would break experiments which will still use the incremental approach where ROOT will rely on pcm files and their libraries on rootmaps. We should not read the rootmap files which have a preloaded module.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:4,energy efficiency,current,current,4,The current patch essentially disabled rootmap files if we built with -Druntime_cxxmodules=On. That would break experiments which will still use the incremental approach where ROOT will rely on pcm files and their libraries on rootmaps. We should not read the rootmap files which have a preloaded module.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:297,modifiability,modul,module,297,The current patch essentially disabled rootmap files if we built with -Druntime_cxxmodules=On. That would break experiments which will still use the incremental approach where ROOT will rely on pcm files and their libraries on rootmaps. We should not read the rootmap files which have a preloaded module.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:12,safety,patch,patch,12,The current patch essentially disabled rootmap files if we built with -Druntime_cxxmodules=On. That would break experiments which will still use the incremental approach where ROOT will rely on pcm files and their libraries on rootmaps. We should not read the rootmap files which have a preloaded module.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:297,safety,modul,module,297,The current patch essentially disabled rootmap files if we built with -Druntime_cxxmodules=On. That would break experiments which will still use the incremental approach where ROOT will rely on pcm files and their libraries on rootmaps. We should not read the rootmap files which have a preloaded module.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:12,security,patch,patch,12,The current patch essentially disabled rootmap files if we built with -Druntime_cxxmodules=On. That would break experiments which will still use the incremental approach where ROOT will rely on pcm files and their libraries on rootmaps. We should not read the rootmap files which have a preloaded module.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:24,deployability,modul,module,24,Doesn't the precompiled module have to be generated by rootcling/genreflex to be useful for us? Consequently shouldn't rootcling either generated a full rootmap **or** a short-rootmap and a precompiled module?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:202,deployability,modul,module,202,Doesn't the precompiled module have to be generated by rootcling/genreflex to be useful for us? Consequently shouldn't rootcling either generated a full rootmap **or** a short-rootmap and a precompiled module?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:24,modifiability,modul,module,24,Doesn't the precompiled module have to be generated by rootcling/genreflex to be useful for us? Consequently shouldn't rootcling either generated a full rootmap **or** a short-rootmap and a precompiled module?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:202,modifiability,modul,module,202,Doesn't the precompiled module have to be generated by rootcling/genreflex to be useful for us? Consequently shouldn't rootcling either generated a full rootmap **or** a short-rootmap and a precompiled module?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:0,reliability,Doe,Doesn,0,Doesn't the precompiled module have to be generated by rootcling/genreflex to be useful for us? Consequently shouldn't rootcling either generated a full rootmap **or** a short-rootmap and a precompiled module?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:24,safety,modul,module,24,Doesn't the precompiled module have to be generated by rootcling/genreflex to be useful for us? Consequently shouldn't rootcling either generated a full rootmap **or** a short-rootmap and a precompiled module?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:202,safety,modul,module,202,Doesn't the precompiled module have to be generated by rootcling/genreflex to be useful for us? Consequently shouldn't rootcling either generated a full rootmap **or** a short-rootmap and a precompiled module?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:65,deployability,modul,modularized,65,"I think Vassil's point is that there is still a little bit of un-modularized part in ROOT which is relying on rootmap files, and we should skip rootmap files only when we know that we have pcm. right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:65,integrability,modular,modularized,65,"I think Vassil's point is that there is still a little bit of un-modularized part in ROOT which is relying on rootmap files, and we should skip rootmap files only when we know that we have pcm. right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:65,modifiability,modul,modularized,65,"I think Vassil's point is that there is still a little bit of un-modularized part in ROOT which is relying on rootmap files, and we should skip rootmap files only when we know that we have pcm. right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:65,safety,modul,modularized,65,"I think Vassil's point is that there is still a little bit of un-modularized part in ROOT which is relying on rootmap files, and we should skip rootmap files only when we know that we have pcm. right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:65,testability,modula,modularized,65,"I think Vassil's point is that there is still a little bit of un-modularized part in ROOT which is relying on rootmap files, and we should skip rootmap files only when we know that we have pcm. right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:162,deployability,modul,module,162,"> I'm just skipping forward decls from rootmaps, not all of them. So if I understand correctly we still need the rootmap file even for the one with a precompiled module, or am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:162,modifiability,modul,module,162,"> I'm just skipping forward decls from rootmaps, not all of them. So if I understand correctly we still need the rootmap file even for the one with a precompiled module, or am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:162,safety,modul,module,162,"> I'm just skipping forward decls from rootmaps, not all of them. So if I understand correctly we still need the rootmap file even for the one with a precompiled module, or am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:74,testability,understand,understand,74,"> I'm just skipping forward decls from rootmaps, not all of them. So if I understand correctly we still need the rootmap file even for the one with a precompiled module, or am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:115,deployability,modul,modules,115,"Yes, I'm trying not to use rootmap files at all (#2380), but there is still things to do such as adding support of modules to ACLiC. (This is unrelated to this patch, though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:160,deployability,patch,patch,160,"Yes, I'm trying not to use rootmap files at all (#2380), but there is still things to do such as adding support of modules to ACLiC. (This is unrelated to this patch, though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:115,modifiability,modul,modules,115,"Yes, I'm trying not to use rootmap files at all (#2380), but there is still things to do such as adding support of modules to ACLiC. (This is unrelated to this patch, though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:115,safety,modul,modules,115,"Yes, I'm trying not to use rootmap files at all (#2380), but there is still things to do such as adding support of modules to ACLiC. (This is unrelated to this patch, though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:160,safety,patch,patch,160,"Yes, I'm trying not to use rootmap files at all (#2380), but there is still things to do such as adding support of modules to ACLiC. (This is unrelated to this patch, though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:160,security,patch,patch,160,"Yes, I'm trying not to use rootmap files at all (#2380), but there is still things to do such as adding support of modules to ACLiC. (This is unrelated to this patch, though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:104,usability,support,support,104,"Yes, I'm trying not to use rootmap files at all (#2380), but there is still things to do such as adding support of modules to ACLiC. (This is unrelated to this patch, though)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:71,deployability,Releas,Release,71,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:97,deployability,Releas,Release,97,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TYPE=Release,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=RelWithDebInfo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=RelWithDebInfo -Dccache=Off,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Release -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:95,deployability,Releas,Release,95,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Release -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Release -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:95,deployability,Releas,Release,95,@phsft-bot build just on fedora28/native with flags -DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Release -Dccache=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2592:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2592
https://github.com/root-project/root/pull/2593:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:371,reliability,doe,does,371,"@stwunsch @etejedor @bluehood, [xtensor](https://github.com/QuantStack/xtensor) developer here. Would you guys be interested in joining forces with the xtensor team? We are seeing a lot of adoption coming from different communities at the moment, and we think that there would be an upside in working together. We would love to know if you have requirements that xtensor does not meet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:160,security,team,team,160,"@stwunsch @etejedor @bluehood, [xtensor](https://github.com/QuantStack/xtensor) developer here. Would you guys be interested in joining forces with the xtensor team? We are seeing a lot of adoption coming from different communities at the moment, and we think that there would be an upside in working together. We would love to know if you have requirements that xtensor does not meet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:63,deployability,version,version,63,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:160,deployability,contain,container,160,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:577,energy efficiency,adapt,adapt,577,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:15,integrability,translat,translated,15,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:63,integrability,version,version,63,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:577,integrability,adapt,adapt,577,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:15,interoperability,translat,translated,15,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:577,interoperability,adapt,adapt,577,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:63,modifiability,version,version,63,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:577,modifiability,adapt,adapt,577,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:387,performance,memor,memory,387,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:607,performance,memor,memory,607,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:387,usability,memor,memory,387,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:607,usability,memor,memory,607,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:658,usability,user,user,658,"I have quickly translated the RTensor code of the example (C++ version) to xtensor. ```. using namespace TMVA::Experimental;. auto x = empty<float>({2, 3}); // container with shape (2, 3). x(0,0) = 1; // set element (0,0) to 1. cout << x(0, 0) << endl; // read element (0,0). // Returns: . // 1. cout << x << endl;. // Returns:. // {{ 1, u, u }. // { u, u, u }} where u is uninitialized memory for speed. // however, you can easily use `.fill(0)` or other constructors. // for initialized mem. using namespace TMVA::Experimental;. float data[6] = {1, 2, 3, 4, 5, 6};. auto x = adapt(data, {2, 3}); // adopt memory with given shape. // additionally let's the user choose to . // take over ownership of the pointer. cout << x << endl;. // Returns:. // {{ 1, 2, 3 }. // { 4, 5, 6 }}. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:190,deployability,contain,container,190,"@SylvainCorlay @wolfv xtensor is here already well known and in discussion (awesome project!). Actually, xtensor does even much more than we tried to solve with RTensor in first place (view/container on/with contiguous memory and additional shape information + link to the numpy world through our python bindings with pyroot/cppyy). But I'm pretty sure that we heat up the discussions again after the workshop in Sarajevo :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:361,energy efficiency,heat,heat,361,"@SylvainCorlay @wolfv xtensor is here already well known and in discussion (awesome project!). Actually, xtensor does even much more than we tried to solve with RTensor in first place (view/container on/with contiguous memory and additional shape information + link to the numpy world through our python bindings with pyroot/cppyy). But I'm pretty sure that we heat up the discussions again after the workshop in Sarajevo :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:304,interoperability,bind,bindings,304,"@SylvainCorlay @wolfv xtensor is here already well known and in discussion (awesome project!). Actually, xtensor does even much more than we tried to solve with RTensor in first place (view/container on/with contiguous memory and additional shape information + link to the numpy world through our python bindings with pyroot/cppyy). But I'm pretty sure that we heat up the discussions again after the workshop in Sarajevo :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:304,modifiability,bind,bindings,304,"@SylvainCorlay @wolfv xtensor is here already well known and in discussion (awesome project!). Actually, xtensor does even much more than we tried to solve with RTensor in first place (view/container on/with contiguous memory and additional shape information + link to the numpy world through our python bindings with pyroot/cppyy). But I'm pretty sure that we heat up the discussions again after the workshop in Sarajevo :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:219,performance,memor,memory,219,"@SylvainCorlay @wolfv xtensor is here already well known and in discussion (awesome project!). Actually, xtensor does even much more than we tried to solve with RTensor in first place (view/container on/with contiguous memory and additional shape information + link to the numpy world through our python bindings with pyroot/cppyy). But I'm pretty sure that we heat up the discussions again after the workshop in Sarajevo :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:113,reliability,doe,does,113,"@SylvainCorlay @wolfv xtensor is here already well known and in discussion (awesome project!). Actually, xtensor does even much more than we tried to solve with RTensor in first place (view/container on/with contiguous memory and additional shape information + link to the numpy world through our python bindings with pyroot/cppyy). But I'm pretty sure that we heat up the discussions again after the workshop in Sarajevo :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:219,usability,memor,memory,219,"@SylvainCorlay @wolfv xtensor is here already well known and in discussion (awesome project!). Actually, xtensor does even much more than we tried to solve with RTensor in first place (view/container on/with contiguous memory and additional shape information + link to the numpy world through our python bindings with pyroot/cppyy). But I'm pretty sure that we heat up the discussions again after the workshop in Sarajevo :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:24,availability,down,down,24,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:376,deployability,contain,container,376,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:448,safety,compl,completely,448,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:521,safety,compl,complex,521,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:448,security,compl,completely,448,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:521,security,compl,complex,521,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:93,usability,clear,clear,93,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:327,usability,learn,learning,327,"@wolfv great to see you down here :smile: thank you for the snippet! @SylvainCorlay let's be clear (haven't clarified it enough during the discussion in Sarajevo) that `RTensor` is not xtensor2, it is not meant to have broadcasting nor lazy execution, and it's nowhere near an expression system. It's there because the machine learning classes were missing a multidimensional container with shape information, which they obviously terribly need. I completely agree with @stwunsch that adopting xtensor is an larger, more complex, _ongoing_ discussion :smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:140,deployability,build,build,140,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:187,deployability,build,building,187,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:425,energy efficiency,sustainab,sustainability,425,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:452,modifiability,concern,concerned,452,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:1147,performance,perform,performance,1147,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:452,testability,concern,concerned,452,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:245,usability,interact,interactive,245,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:1147,usability,perform,performance,1147,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:83,deployability,instal,installment,83,Hi folks. FYI we are starting a series of public meetings about xtensor. The first installment is today (October 3rd) at 5pm (Paris time) on https://appear.in/QuantStack.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:42,integrability,pub,public,42,Hi folks. FYI we are starting a series of public meetings about xtensor. The first installment is today (October 3rd) at 5pm (Paris time) on https://appear.in/QuantStack.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:132,performance,time,time,132,Hi folks. FYI we are starting a series of public meetings about xtensor. The first installment is today (October 3rd) at 5pm (Paris time) on https://appear.in/QuantStack.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2593:11,usability,close,closed,11,This PR is closed in favor of #3221.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2593
https://github.com/root-project/root/pull/2595:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2595
https://github.com/root-project/root/pull/2595:131,performance,time,times,131,"Ok the idea works, I will open a different PR with an implementation that uses CRTP to avoid repeating the body of `RAction` three times (thanks @Axel-Naumann for the suggestion).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2595
https://github.com/root-project/root/pull/2595:87,safety,avoid,avoid,87,"Ok the idea works, I will open a different PR with an implementation that uses CRTP to avoid repeating the body of `RAction` three times (thanks @Axel-Naumann for the suggestion).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2595
https://github.com/root-project/root/pull/2602:6,availability,failur,failures,6,"Build failures are due to branch not being there anymore. The build did not trigger until I merged, unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2602
https://github.com/root-project/root/pull/2602:0,deployability,Build,Build,0,"Build failures are due to branch not being there anymore. The build did not trigger until I merged, unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2602
https://github.com/root-project/root/pull/2602:6,deployability,fail,failures,6,"Build failures are due to branch not being there anymore. The build did not trigger until I merged, unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2602
https://github.com/root-project/root/pull/2602:62,deployability,build,build,62,"Build failures are due to branch not being there anymore. The build did not trigger until I merged, unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2602
https://github.com/root-project/root/pull/2602:6,performance,failur,failures,6,"Build failures are due to branch not being there anymore. The build did not trigger until I merged, unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2602
https://github.com/root-project/root/pull/2602:6,reliability,fail,failures,6,"Build failures are due to branch not being there anymore. The build did not trigger until I merged, unfortunately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2602
https://github.com/root-project/root/pull/2603:22,modifiability,concern,concerning,22,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:133,performance,lock,locking,133,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:145,performance,I/O,I/O,145,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:40,safety,safe,safety,40,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:133,security,lock,locking,133,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:22,testability,concern,concerning,22,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:7,usability,minim,minimal,7,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:53,usability,learn,learned,53,"I made minimal change concerning thread safety. As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:63,deployability,patch,patches,63,"@Axel-Naumann . Do you have more comments? I have several more patches (civetweb, canvas painter, jsroot+openui5), which are waiting for that PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:63,safety,patch,patches,63,"@Axel-Naumann . Do you have more comments? I have several more patches (civetweb, canvas painter, jsroot+openui5), which are waiting for that PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2603:63,security,patch,patches,63,"@Axel-Naumann . Do you have more comments? I have several more patches (civetweb, canvas painter, jsroot+openui5), which are waiting for that PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2603
https://github.com/root-project/root/pull/2605:170,modifiability,scenario,scenarios,170,Closing since overloading `RColumnValue<RVec<bool>>` can only fix one of `bool[]` and `std::vector<bool>`. We need a fix at `TTreeReaderArray<bool>` leve to support both scenarios.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2605
https://github.com/root-project/root/pull/2605:157,usability,support,support,157,Closing since overloading `RColumnValue<RVec<bool>>` can only fix one of `bool[]` and `std::vector<bool>`. We need a fix at `TTreeReaderArray<bool>` leve to support both scenarios.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2605
https://github.com/root-project/root/pull/2608:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:110,availability,Error,Error,110,@jblomer seems that there's a problem with one of the changes in dataframe's CMakeLists:. ```. 09:31:20 CMake Error at tree/dataframe/CMakeLists.txt:34 (target_include_directories):. 09:31:20 target_include_directories called with invalid arguments. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:110,performance,Error,Error,110,@jblomer seems that there's a problem with one of the changes in dataframe's CMakeLists:. ```. 09:31:20 CMake Error at tree/dataframe/CMakeLists.txt:34 (target_include_directories):. 09:31:20 target_include_directories called with invalid arguments. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:110,safety,Error,Error,110,@jblomer seems that there's a problem with one of the changes in dataframe's CMakeLists:. ```. 09:31:20 CMake Error at tree/dataframe/CMakeLists.txt:34 (target_include_directories):. 09:31:20 target_include_directories called with invalid arguments. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:110,usability,Error,Error,110,@jblomer seems that there's a problem with one of the changes in dataframe's CMakeLists:. ```. 09:31:20 CMake Error at tree/dataframe/CMakeLists.txt:34 (target_include_directories):. 09:31:20 target_include_directories called with invalid arguments. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:56,availability,Error,Error,56,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:82,availability,Failur,Failure,82,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:82,deployability,Fail,Failure,82,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:130,deployability,fail,failed,130,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:12,energy efficiency,current,current,12,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:56,performance,Error,Error,56,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:82,performance,Failur,Failure,82,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:82,reliability,Fail,Failure,82,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:130,reliability,fail,failed,130,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:56,safety,Error,Error,56,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:105,security,certif,certificate,105,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:152,security,trust,trusted,152,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:117,testability,verif,verification,117,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:56,usability,Error,Error,56,this is the current issue:. ```. [RUN] RSqliteDS.Davix. Error in <VfsRdOnlyOpen>: Failure (Neon): Server certificate verification failed: issuer is not trusted after 3 attempts. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:88,deployability,fail,fail,88,"The only urls I see are at `https://root.cern.ch/`. I don't see how that could possibly fail - the cert is signed by Comodo which is known / accepted by ""the world"". If we don't solve this we can still revert to `http://`: `/files/` is one of the few directories also served as `http`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:88,reliability,fail,fail,88,"The only urls I see are at `https://root.cern.ch/`. I don't see how that could possibly fail - the cert is signed by Comodo which is known / accepted by ""the world"". If we don't solve this we can still revert to `http://`: `/files/` is one of the few directories also served as `http`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:107,security,sign,signed,107,"The only urls I see are at `https://root.cern.ch/`. I don't see how that could possibly fail - the cert is signed by Comodo which is known / accepted by ""the world"". If we don't solve this we can still revert to `http://`: `/files/` is one of the few directories also served as `http`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:34,availability,error,error,34,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:43,interoperability,specif,specific,43,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:34,performance,error,error,34,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:104,reliability,doe,does,104,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:34,safety,error,error,34,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:299,safety,test,test,299,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:299,testability,test,test,299,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:34,usability,error,error,34,"@bluehood @Axel-Naumann The HTTPS error is specific to macOS. As far as I can tell, Davix resp. libNeon does not find the default CAs on Mac. The same problem is for ROOT files, e.g. ```. TFile *f = TFile::Open(""https://root.cern.ch/files/h1big.root"");. ```. works on Linux but not on Mac. For this test, I could ifdef the URLs to HTTP on Mac. But perhaps we should rather solve the underlying CA store issue on Mac.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:27,availability,failur,failure,27,I've been looking into the failure on macOS with @amadio and it appears to be a problem with the build node.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:27,deployability,fail,failure,27,I've been looking into the failure on macOS with @amadio and it appears to be a problem with the build node.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:97,deployability,build,build,97,I've been looking into the failure on macOS with @amadio and it appears to be a problem with the build node.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:27,performance,failur,failure,27,I've been looking into the failure on macOS with @amadio and it appears to be a problem with the build node.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:27,reliability,fail,failure,27,I've been looking into the failure on macOS with @amadio and it appears to be a problem with the build node.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:170,availability,down,download,170,"Coming back to the HTTPS issue: together with @radupopescu we checked two Mac builders with different versions and Radu's MacBook with the latest binary release from the download page; all of them cannot open `TFile::Open(""https://..."")`. I'll create a JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:78,deployability,build,builders,78,"Coming back to the HTTPS issue: together with @radupopescu we checked two Mac builders with different versions and Radu's MacBook with the latest binary release from the download page; all of them cannot open `TFile::Open(""https://..."")`. I'll create a JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:102,deployability,version,versions,102,"Coming back to the HTTPS issue: together with @radupopescu we checked two Mac builders with different versions and Radu's MacBook with the latest binary release from the download page; all of them cannot open `TFile::Open(""https://..."")`. I'll create a JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:153,deployability,releas,release,153,"Coming back to the HTTPS issue: together with @radupopescu we checked two Mac builders with different versions and Radu's MacBook with the latest binary release from the download page; all of them cannot open `TFile::Open(""https://..."")`. I'll create a JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:102,integrability,version,versions,102,"Coming back to the HTTPS issue: together with @radupopescu we checked two Mac builders with different versions and Radu's MacBook with the latest binary release from the download page; all of them cannot open `TFile::Open(""https://..."")`. I'll create a JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:102,modifiability,version,versions,102,"Coming back to the HTTPS issue: together with @radupopescu we checked two Mac builders with different versions and Radu's MacBook with the latest binary release from the download page; all of them cannot open `TFile::Open(""https://..."")`. I'll create a JIRA ticket.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2608:45,interoperability,conflict,conflicts,45,Can you rebase the branch (and fix potential conflicts)?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2608
https://github.com/root-project/root/pull/2609:90,deployability,modul,module,90,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:191,deployability,configurat,configuration-specific,191,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:227,deployability,automat,automatically,227,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:509,deployability,configurat,configuration,509,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:191,integrability,configur,configuration-specific,191,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:509,integrability,configur,configuration,509,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:205,interoperability,specif,specific,205,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:349,interoperability,standard,standard,349,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:90,modifiability,modul,module,90,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:191,modifiability,configur,configuration-specific,191,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:214,modifiability,variab,variable,214,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:509,modifiability,configur,configuration,509,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:144,performance,content,contents,144,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:282,performance,content,contents,282,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:90,safety,modul,module,90,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:191,security,configur,configuration-specific,191,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:509,security,configur,configuration,509,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:227,testability,automat,automatically,227,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:13,usability,document,documentation,13,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:79,usability,help,help,79,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2609:263,usability,command,command,263,"From CMake's documentation of [CheckCXXSourceCompiles](https://cmake.org/cmake/help/v3.12/module/CheckCXXSourceCompiles.html):. > Note that the contents of CMAKE_CXX_FLAGS and its associated configuration-specific variable are automatically added to the compiler command before the contents of CMAKE_REQUIRED_FLAGS. Therefore, the additions for the standard flag are not necessary. Please let us know how you tried that didn't work, and I'll see how we can fix. I had never had a problem with this particular configuration. We will move to use setting `CMAKE_CXX_STANDARD` soon, which will make a change like this unnecessary in any case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2609
https://github.com/root-project/root/pull/2610:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2610
https://github.com/root-project/root/pull/2610:90,integrability,messag,message,90,"Since we have applied #2611 a Warning is not anymore needed. In case we could add an Info message that Sumw2() is called, if you think this information is important. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2610
https://github.com/root-project/root/pull/2610:90,interoperability,messag,message,90,"Since we have applied #2611 a Warning is not anymore needed. In case we could add an Info message that Sumw2() is called, if you think this information is important. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2610
https://github.com/root-project/root/pull/2611:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2611
https://github.com/root-project/root/pull/2613:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2613
https://github.com/root-project/root/pull/2613:71,availability,error,errors,71,"merging after local testing, will check incrementals and nightlies for errors (changes are trivial, I don't expect any)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2613
https://github.com/root-project/root/pull/2613:71,performance,error,errors,71,"merging after local testing, will check incrementals and nightlies for errors (changes are trivial, I don't expect any)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2613
https://github.com/root-project/root/pull/2613:20,safety,test,testing,20,"merging after local testing, will check incrementals and nightlies for errors (changes are trivial, I don't expect any)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2613
https://github.com/root-project/root/pull/2613:71,safety,error,errors,71,"merging after local testing, will check incrementals and nightlies for errors (changes are trivial, I don't expect any)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2613
https://github.com/root-project/root/pull/2613:20,testability,test,testing,20,"merging after local testing, will check incrementals and nightlies for errors (changes are trivial, I don't expect any)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2613
https://github.com/root-project/root/pull/2613:71,usability,error,errors,71,"merging after local testing, will check incrementals and nightlies for errors (changes are trivial, I don't expect any)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2613
https://github.com/root-project/root/pull/2615:61,deployability,modul,modules,61,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:134,deployability,modul,modules,134,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:61,modifiability,modul,modules,61,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:134,modifiability,modul,modules,134,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:94,performance,I/O,I/O,94,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:35,safety,compl,completely,35,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:61,safety,modul,modules,61,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:134,safety,modul,modules,134,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:35,security,compl,completely,35,This seems to disable this feature completely when using the modules? I.e. it sounds like the I/O for std::ntuple will be broken with modules.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:157,reliability,doe,does,157,We thought that when you wrote `Those were not intended to be stored in the pcm at all. Duplication is avoid because to define them we parse which obviously does not work with pcm merging.` to Oksana it meant that you thought TEmulatedTuple is not needed to pcm?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:103,safety,avoid,avoid,103,We thought that when you wrote `Those were not intended to be stored in the pcm at all. Duplication is avoid because to define them we parse which obviously does not work with pcm merging.` to Oksana it meant that you thought TEmulatedTuple is not needed to pcm?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:115,performance,time,time,115,> Those were not intended to be stored in the pcm at all. . Correct. They also need to *still* be generated at run-time; I am not sure that the PR is allowing that :).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:52,performance,time,time,52,But why TEmulatedTuple needs to be generated at run time when it's not going to be in pcm?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:203,availability,operat,operation,203,"The content of std::ntuple is **not** adequate to be able to create a TStreamerInfo from it. To be able to store **any** std::ntuple, we need to create a TEmulatedTuple (at some point **before** the I/O operation) so that we can create a TStreamerInfo that properly describe the in memory layout of the std::ntuple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4,performance,content,content,4,"The content of std::ntuple is **not** adequate to be able to create a TStreamerInfo from it. To be able to store **any** std::ntuple, we need to create a TEmulatedTuple (at some point **before** the I/O operation) so that we can create a TStreamerInfo that properly describe the in memory layout of the std::ntuple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:199,performance,I/O,I/O,199,"The content of std::ntuple is **not** adequate to be able to create a TStreamerInfo from it. To be able to store **any** std::ntuple, we need to create a TEmulatedTuple (at some point **before** the I/O operation) so that we can create a TStreamerInfo that properly describe the in memory layout of the std::ntuple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:282,performance,memor,memory,282,"The content of std::ntuple is **not** adequate to be able to create a TStreamerInfo from it. To be able to store **any** std::ntuple, we need to create a TEmulatedTuple (at some point **before** the I/O operation) so that we can create a TStreamerInfo that properly describe the in memory layout of the std::ntuple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:282,usability,memor,memory,282,"The content of std::ntuple is **not** adequate to be able to create a TStreamerInfo from it. To be able to store **any** std::ntuple, we need to create a TEmulatedTuple (at some point **before** the I/O operation) so that we can create a TStreamerInfo that properly describe the in memory layout of the std::ntuple.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:6,reliability,doe,does,6,So it does not need to be in the pcm but it still need to be generated at some point ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:193,deployability,modul,modules,193,"@pcanal . Do you mean that we should inject ""input_line_<number>"" in IncrementalParser (where this AtlernateTuple ends up in virtual FileID) only when it was from rootcling and it doesn't have modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:37,integrability,inject,inject,37,"@pcanal . Do you mean that we should inject ""input_line_<number>"" in IncrementalParser (where this AtlernateTuple ends up in virtual FileID) only when it was from rootcling and it doesn't have modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:193,modifiability,modul,modules,193,"@pcanal . Do you mean that we should inject ""input_line_<number>"" in IncrementalParser (where this AtlernateTuple ends up in virtual FileID) only when it was from rootcling and it doesn't have modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:180,reliability,doe,doesn,180,"@pcanal . Do you mean that we should inject ""input_line_<number>"" in IncrementalParser (where this AtlernateTuple ends up in virtual FileID) only when it was from rootcling and it doesn't have modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:193,safety,modul,modules,193,"@pcanal . Do you mean that we should inject ""input_line_<number>"" in IncrementalParser (where this AtlernateTuple ends up in virtual FileID) only when it was from rootcling and it doesn't have modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:37,security,inject,inject,37,"@pcanal . Do you mean that we should inject ""input_line_<number>"" in IncrementalParser (where this AtlernateTuple ends up in virtual FileID) only when it was from rootcling and it doesn't have modules?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:379,availability,error,error,379,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:92,deployability,Updat,Updated,92,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:104,deployability,patch,patch,104,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:335,deployability,stack,stack,335,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:502,deployability,modul,module-release,502,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:664,deployability,modul,module-release,664,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:881,deployability,modul,module-release,881,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:993,deployability,modul,module-release,993,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1099,deployability,modul,module-release,1099,"tch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1214,deployability,modul,module-release,1214,"won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1327,deployability,modul,module-release,1327," stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1535,deployability,modul,module-release,1535,"007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1652,deployability,modul,module-release,1652,"yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1776,deployability,modul,module-release,1776,"std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-releas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1896,deployability,modul,module-release,1896,"Cling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () fro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2051,deployability,modul,module-release,2051,":Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2204,deployability,modul,module-release,2204,"ka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2350,deployability,modul,module-release,2350," . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2416,deployability,Build,BuildRealData,2416,"type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2462,deployability,modul,module-release,2462,"t*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () fro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2617,deployability,modul,module-release,2617,"t, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2770,deployability,modul,module-release,2770,"odule-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/y",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2916,deployability,modul,module-release,2916,"so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2982,deployability,Build,BuildRealData,2982,"ar const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3028,deployability,modul,module-release,3028,"from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3183,deployability,modul,module-release,3183,"om /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3336,deployability,modul,module-release,3336,"e/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3482,deployability,modul,module-release,3482,"so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3635,deployability,modul,module-release,3635,"e.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-releas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3781,deployability,modul,module-release,3781,"/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3847,deployability,Build,BuildRealData,3847,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3893,deployability,modul,module-release,3893,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4004,deployability,modul,module-release,4004,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4107,deployability,modul,module-release,4107,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4237,deployability,modul,module-release,4237,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4513,deployability,modul,module-release,4513,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4629,deployability,modul,module-release,4629,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4729,deployability,modul,module-release,4729,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:812,energy efficiency,alloc,allocator,812,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:946,energy efficiency,Load,LoadText,946,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4420,energy efficiency,alloc,allocator,4420,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:502,modifiability,modul,module-release,502,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:664,modifiability,modul,module-release,664,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:881,modifiability,modul,module-release,881,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:993,modifiability,modul,module-release,993,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1099,modifiability,modul,module-release,1099,"tch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1214,modifiability,modul,module-release,1214,"won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1327,modifiability,modul,module-release,1327," stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1535,modifiability,modul,module-release,1535,"007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1652,modifiability,modul,module-release,1652,"yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1776,modifiability,modul,module-release,1776,"std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-releas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1896,modifiability,modul,module-release,1896,"Cling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () fro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2051,modifiability,modul,module-release,2051,":Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2204,modifiability,modul,module-release,2204,"ka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2350,modifiability,modul,module-release,2350," . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2462,modifiability,modul,module-release,2462,"t*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () fro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2617,modifiability,modul,module-release,2617,"t, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2770,modifiability,modul,module-release,2770,"odule-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/y",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2916,modifiability,modul,module-release,2916,"so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3028,modifiability,modul,module-release,3028,"from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3183,modifiability,modul,module-release,3183,"om /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3336,modifiability,modul,module-release,3336,"e/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3482,modifiability,modul,module-release,3482,"so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3635,modifiability,modul,module-release,3635,"e.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-releas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3781,modifiability,modul,module-release,3781,"/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3893,modifiability,modul,module-release,3893,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4004,modifiability,modul,module-release,4004,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4107,modifiability,modul,module-release,4107,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4237,modifiability,modul,module-release,4237,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4513,modifiability,modul,module-release,4513,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4629,modifiability,modul,module-release,4629,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4729,modifiability,modul,module-release,4729,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:379,performance,error,error,379,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:946,performance,Load,LoadText,946,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:8,reliability,doe,does,8,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:92,safety,Updat,Updated,92,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:104,safety,patch,patch,104,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:379,safety,error,error,379,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:502,safety,modul,module-release,502,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:664,safety,modul,module-release,664,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:881,safety,modul,module-release,881,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:993,safety,modul,module-release,993,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1099,safety,modul,module-release,1099,"tch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1214,safety,modul,module-release,1214,"won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1327,safety,modul,module-release,1327," stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1535,safety,modul,module-release,1535,"007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspec",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1652,safety,modul,module-release,1652,"yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1776,safety,modul,module-release,1776,"std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-releas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:1896,safety,modul,module-release,1896,"Cling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () fro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2051,safety,modul,module-release,2051,":Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2204,safety,modul,module-release,2204,"ka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2350,safety,modul,module-release,2350," . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2462,safety,modul,module-release,2462,"t*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () fro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2617,safety,modul,module-release,2617,"t, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2770,safety,modul,module-release,2770,"odule-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/y",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:2916,safety,modul,module-release,2916,"so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3028,safety,modul,module-release,3028,"from /home/yuka/module-release/lib/libCore.so . #12 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3183,safety,modul,module-release,3183,"om /home/yuka/module-release/lib/libCling.so . #13 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3336,safety,modul,module-release,3336,"e/yuka/module-release/lib/libCore.so . #14 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3482,safety,modul,module-release,3482,"so . #15 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, b",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3635,safety,modul,module-release,3635,"e.so . #16 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-releas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3781,safety,modul,module-release,3781,"/libCling.so . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:3893,safety,modul,module-release,3893,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4004,safety,modul,module-release,4004,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4107,safety,modul,module-release,4107,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4237,safety,modul,module-release,4237,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4513,safety,modul,module-release,4513,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4629,safety,modul,module-release,4629,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4729,safety,modul,module-release,4729,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:92,security,Updat,Updated,92,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:104,security,patch,patch,104,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:341,testability,trace,trace,341,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:379,usability,error,error,379,"> So it does not need to be in the pcm but it still need to be generated at some point .... Updated the patch as `if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),""tuple<"",strlen(""tuple<""))==0) {` so we won't put TEmulatedTuple in pcm but still generate when called from ROOT. Is that what you meant? FYI, this was a stack trace of TEmulatedTuple re-definition error. ```. (gdb) bt. #0 0x00007ffff57626d0 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/yuka/module-release/lib/libCling.so . #1 0x00007ffff5763ffb in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/yuka/module-release/lib/libCling.so . #2 0x00007ffff56ff415 in cling::Interpreter::declare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () . from /home/yuka/module-release/lib/libCling.so. #3 0x00007ffff5698388 in TCling::LoadText(char const*) const () from /home/yuka/module-release/lib/libCling.so . #4 0x00007ffff5687b7b in TCling::Declare(char const*) () from /home/yuka/module-release/lib/libCling.so. #5 0x00007ffff568a383 in AtlernateTuple[abi:cxx11](char const*) () from /home/yuka/module-release/lib/libCling.so . #6 0x00007ffff568a99e in TCling::SetClassInfo(TClass*, bool) () from /home/yuka/module-release/lib/libCling.so . #7 0x00007ffff47dbc58 in TClass::Init(char const*, short, std::type_info const*, TVirtualIsAProxy*, char const*, char const*, int, int, ClassInfo_t*, bool) () from /home/yuka/module-release/lib/libCore.so . #8 0x00007ffff47db6ec in TClass::TClass(char const*, short, bool) () from /home/yuka/module-release/lib/libCore.so . #9 0x00007ffff568bdde in TCling::GenerateTClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #10 0x00007ffff47d92bf in TClass::GetClass(char const*, bool, bool) () from /home/yuka/module-release/lib/libCore.so . #11 0x00007ffff47d9884 in TBuildRealData::Inspect(TClass*, char const*, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:4062,usability,Close,CloseStreamerInfoROOTFile,4062,"o . #17 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #18 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #19 0x00007ffff47d99f2 in TBuildRealData::Inspect(TClass*, char const*, char const*, void const*, bool) () from /home/yuka/module-release/lib/libCore.so . #20 0x00007ffff5686c3d in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #21 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #22 0x00007ffff5687643 in TCling::InspectMembers(TMemberInspector&, void const*, TClass const*, bool) () from /home/yuka/module-release/lib/libCling.so . #23 0x00007ffff47de6c7 in TClass::CallShowMembers(void const*, TMemberInspector&, bool) const () from /home/yuka/module-release/lib/libCore.so . #24 0x00007ffff47d9edb in TClass::BuildRealData(void*, bool) () from /home/yuka/module-release/lib/libCore.so . #25 0x00007ffff4801acf in TProtoClass::TProtoClass(TClass*) () from /home/yuka/module-release/lib/libCore.so . #26 0x00007ffff7f4449d in CloseStreamerInfoROOTFile () from /home/yuka/module-release/lib/libRIO.so. #27 0x00007ffff5659d7c in FinalizeStreamerInfoWriting(cling::Interpreter&, bool) () from /home/yuka/module-release/lib/libCling.so . #28 0x00007ffff565a448 in GenerateFullDict(std::ostream&, cling::Interpreter&, RScanner&, std::__cxx11::list<ROOT::TMetaUtils::RConstructorType, std::allocator<ROOT::TMetaUtils::RConstructorType> > const&, bool, bool, bool) () from /home/yuka/module-release/lib/libCling.so. #29 0x00007ffff5667736 in RootClingMain(int, char**, bool, bool) () from /home/yuka/module-release/lib/libCling.so . #30 0x00007ffff567131a in ROOT_rootcling_Driver () from /home/yuka/module-release/lib/libCling.so. #31 0x0000555555555236 in main (). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:17,deployability,stack,stack,17,Can you show the stack trace of the first call to AlternateTuple and tell which are the classes it gets called upon? I suspect we see some duplication of content and thus the redefinition,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:154,performance,content,content,154,Can you show the stack trace of the first call to AlternateTuple and tell which are the classes it gets called upon? I suspect we see some duplication of content and thus the redefinition,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:23,testability,trace,trace,23,Can you show the stack trace of the first call to AlternateTuple and tell which are the classes it gets called upon? I suspect we see some duplication of content and thus the redefinition,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:13,deployability,stack,stack,13,"Already sent stack trace (see comment above) and the input is `tuple<TFolder*,default_delete<TFolder> >`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:53,safety,input,input,53,"Already sent stack trace (see comment above) and the input is `tuple<TFolder*,default_delete<TFolder> >`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:19,testability,trace,trace,19,"Already sent stack trace (see comment above) and the input is `tuple<TFolder*,default_delete<TFolder> >`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2615:53,usability,input,input,53,"Already sent stack trace (see comment above) and the input is `tuple<TFolder*,default_delete<TFolder> >`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2615
https://github.com/root-project/root/pull/2616:109,modifiability,paramet,parameter,109,Could you add a roottest checking that the exit code of `root -qlbae 1+1` is `2`? (There is a CMake roottest parameter for that... Let me know if you cannot find it!),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2616
https://github.com/root-project/root/pull/2616:78,usability,close,closed,78,"Hi, making a sweep of old PRs -- no activity for almost one year, can this be closed?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2616
https://github.com/root-project/root/pull/2619:11,deployability,build,build,11,@phsft-bot build please,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1230,availability,sli,slight,1230,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1359,deployability,observ,observed,1359,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:48,energy efficiency,Core,Core,48,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:66,energy efficiency,CPU,CPU,66,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:230,energy efficiency,cpu,cpu,230,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:320,energy efficiency,cpu,cpu,320,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:484,energy efficiency,cpu,cpu,484,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:574,energy efficiency,cpu,cpu,574,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:28,interoperability,Platform,Platform,28,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:66,performance,CPU,CPU,66,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:230,performance,cpu,cpu,230,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:320,performance,cpu,cpu,320,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:484,performance,cpu,cpu,484,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:574,performance,cpu,cpu,574,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1318,performance,time,time,1318,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1230,reliability,sli,slight,1230,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:793,safety,test,test,793,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1029,safety,test,test,1029,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:769,security,Sign,Signal,769,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1204,security,sign,significantly,1204,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1339,security,sign,significant,1339,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:793,testability,test,test,793,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1029,testability,test,test,1029,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1248,testability,regress,regression,1248,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:1359,testability,observ,observed,1359,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:207,usability,user,user,207,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:297,usability,user,user,297,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:461,usability,user,user,461,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:551,usability,user,user,551,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2619:776,usability,efficien,efficiency,776,"## Benchmarking of changes. Platform:. Intel(R) Core(TM) i7-4578U CPU @ 3.00GHz. `189ca14cbdbc262a910cf7d479ae11f6f0082f84` (previous ""random"" checkout):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.94s user 0.78s system 149% cpu 3.152 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.70s user 2.15s system 148% cpu 10.012 total`. `bd26ea689b4c1cecba7e12ad101d906185b6d90d` (after xavi's PR merged):. `root -l -b -q 'TMVAClassification.C(""BDTG"")' 3.65s user 0.87s system 145% cpu 3.102 total`. `root -l -b -q 'TMVARegression.C(""BDTG"")' 12.89s user 2.22s system 146% cpu 10.335 total`. ## Output comparison. Top line is ""old"" commit, bottom line is ""new"" commit. ```. DataSet MVA. Name: Method: ROC-integ. dataset BDTG : 0.897. dataset BDTG : 0.897. DataSet MVA Signal efficiency: from test sample (from training sample). Name: Method: @B=0.01 @B=0.10 @B=0.30. dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). dataset BDTG : 0.206 (0.540) 0.705 (0.858) 0.902 (0.928). Evaluation results ranked by smallest RMS on test sample:. dataset BDTG : 0.156 0.159 2.51 1.92 | 3.118 3.186. dataset BDTG : 0.198 0.165 2.60 2.00 | 3.084 3.149. ```. In summary, the changes do not to change the output significantly. There is a slight change for regression output. @lmoneta, can you judge the relevance of this? For time consumption, no significant changes observed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2619
https://github.com/root-project/root/pull/2620:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2620
https://github.com/root-project/root/pull/2620:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2620
https://github.com/root-project/root/pull/2621:23,modifiability,concern,concern,23,"hi @stwunsch , my main concern is with implicit casts, also due to the fact that `v > 0` returns `RVec<int>` and not `RVec<bool>`. I'm not sure whether this would cause ambiguities or not. For example, what happens with `v[{1,2}]`? Or with `v[{true, false}]`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:23,testability,concern,concern,23,"hi @stwunsch , my main concern is with implicit casts, also due to the fact that `v > 0` returns `RVec<int>` and not `RVec<bool>`. I'm not sure whether this would cause ambiguities or not. For example, what happens with `v[{1,2}]`? Or with `v[{true, false}]`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:271,availability,operat,operator,271,"@bluehood Exactly this is as well my concern! I don't know enough about the rules of implicit casting to be sure that this works without hassle ... Edit: Actually, it casts nicely to the correct type. ~Probably fails on 32-bit?~ Happens because of the specialization of `operator[](const RVec<size_t>&)` compared to the unspecific `operator[]` overload for `v[v>0]`. ```. root [0] using namespace ROOT::VecOps;. root [1] RVec<float> v = {2, 1, 0};. root [2] v[{0, 1}]. (ROOT::VecOps::RVec<float>) { 2, 1 }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:332,availability,operat,operator,332,"@bluehood Exactly this is as well my concern! I don't know enough about the rules of implicit casting to be sure that this works without hassle ... Edit: Actually, it casts nicely to the correct type. ~Probably fails on 32-bit?~ Happens because of the specialization of `operator[](const RVec<size_t>&)` compared to the unspecific `operator[]` overload for `v[v>0]`. ```. root [0] using namespace ROOT::VecOps;. root [1] RVec<float> v = {2, 1, 0};. root [2] v[{0, 1}]. (ROOT::VecOps::RVec<float>) { 2, 1 }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:211,deployability,fail,fails,211,"@bluehood Exactly this is as well my concern! I don't know enough about the rules of implicit casting to be sure that this works without hassle ... Edit: Actually, it casts nicely to the correct type. ~Probably fails on 32-bit?~ Happens because of the specialization of `operator[](const RVec<size_t>&)` compared to the unspecific `operator[]` overload for `v[v>0]`. ```. root [0] using namespace ROOT::VecOps;. root [1] RVec<float> v = {2, 1, 0};. root [2] v[{0, 1}]. (ROOT::VecOps::RVec<float>) { 2, 1 }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:37,modifiability,concern,concern,37,"@bluehood Exactly this is as well my concern! I don't know enough about the rules of implicit casting to be sure that this works without hassle ... Edit: Actually, it casts nicely to the correct type. ~Probably fails on 32-bit?~ Happens because of the specialization of `operator[](const RVec<size_t>&)` compared to the unspecific `operator[]` overload for `v[v>0]`. ```. root [0] using namespace ROOT::VecOps;. root [1] RVec<float> v = {2, 1, 0};. root [2] v[{0, 1}]. (ROOT::VecOps::RVec<float>) { 2, 1 }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:211,reliability,fail,fails,211,"@bluehood Exactly this is as well my concern! I don't know enough about the rules of implicit casting to be sure that this works without hassle ... Edit: Actually, it casts nicely to the correct type. ~Probably fails on 32-bit?~ Happens because of the specialization of `operator[](const RVec<size_t>&)` compared to the unspecific `operator[]` overload for `v[v>0]`. ```. root [0] using namespace ROOT::VecOps;. root [1] RVec<float> v = {2, 1, 0};. root [2] v[{0, 1}]. (ROOT::VecOps::RVec<float>) { 2, 1 }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:37,testability,concern,concern,37,"@bluehood Exactly this is as well my concern! I don't know enough about the rules of implicit casting to be sure that this works without hassle ... Edit: Actually, it casts nicely to the correct type. ~Probably fails on 32-bit?~ Happens because of the specialization of `operator[](const RVec<size_t>&)` compared to the unspecific `operator[]` overload for `v[v>0]`. ```. root [0] using namespace ROOT::VecOps;. root [1] RVec<float> v = {2, 1, 0};. root [2] v[{0, 1}]. (ROOT::VecOps::RVec<float>) { 2, 1 }. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:486,availability,operat,operator,486,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:573,availability,avail,available,573,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:170,interoperability,convers,conversion,170,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:399,interoperability,convers,conversion,399,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:528,interoperability,convers,conversion,528,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:573,reliability,availab,available,573,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:573,safety,avail,available,573,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:573,security,availab,available,573,"Having a look here: https://en.cppreference.com/w/cpp/language/implicit_conversion. > The program is well-formed (compiles) only if there exists one unambiguous implicit conversion sequence from T1 to T2. The program should not compile if it is not unambigious? Edit: No, the selection of the implementation is done based on the rules of the overload resolution after buliding all possible implicit conversion from T1 to T2 ... (?). > If there are multiple overloads of the function or operator being called, after the implicit conversion sequence is built from T1 to each available T2, overload resolution rules decide which overload is compiled.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:134,availability,error,error,134,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:134,performance,error,error,134,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:134,safety,error,error,134,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:73,usability,close,closest,73,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:134,usability,error,error,134,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:355,usability,user,user,355,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:380,usability,user,user,380,"@stwunsch yes absolutely, the language has some mechanism to choose the ""closest"" overload, and if there is a tie, it's a compilation error (""ambiguos call to overloaded method"" or something like that). but I was not necessarily talking about compiler ambiguity: we also need to make sure that what happens in the various usecases is not ambiguous to the user, and/or is what the user most likely intended.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:461,availability,operat,operator,461,"To clear it up in detail. With the current implementation `v[idx]` is resolved to selecting the elements by the indices **only** if the idx is of type `RVec<size_t>`. In case it is implicitely casted, from `{0, 1, 2, ...}`, the type `RVec<size_t>` is the preferred type because it's an specific overload. See following examples:. ```cpp. using namespace ROOT::VecOps;. RVec<float> v = {1, 2, 3, 4};. // Take indices explicitely. // Select directly the overload operator[](const RVec<size_t>&). RVec<size_t> idx = {0, 1};. cout << v[idx] << endl;. // Returns: { 1, 2 }. // Take indices by implicit cast. // Resolves to RVec<size_t> because it's the ""strongest"" overload. cout << v[{0, 1}] << endl;. // Returns: { 1, 2 }. // Make selection. RVec<int> s1 = {1, 1, 0, 0};. cout << v[s1] << endl;. // Returns: { 1, 2 }. RVec<unsigned int> s2 = {1, 1, 0, 0};. cout << v[s2] << endl;. // Returns: { 1, 2 }. cout << v[v<3] << endl;. // Returns: { 1, 2 }. ```. @dpiparo @bluehood From my point of view, this is exactly the expected behaviour (TBD).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:35,energy efficiency,current,current,35,"To clear it up in detail. With the current implementation `v[idx]` is resolved to selecting the elements by the indices **only** if the idx is of type `RVec<size_t>`. In case it is implicitely casted, from `{0, 1, 2, ...}`, the type `RVec<size_t>` is the preferred type because it's an specific overload. See following examples:. ```cpp. using namespace ROOT::VecOps;. RVec<float> v = {1, 2, 3, 4};. // Take indices explicitely. // Select directly the overload operator[](const RVec<size_t>&). RVec<size_t> idx = {0, 1};. cout << v[idx] << endl;. // Returns: { 1, 2 }. // Take indices by implicit cast. // Resolves to RVec<size_t> because it's the ""strongest"" overload. cout << v[{0, 1}] << endl;. // Returns: { 1, 2 }. // Make selection. RVec<int> s1 = {1, 1, 0, 0};. cout << v[s1] << endl;. // Returns: { 1, 2 }. RVec<unsigned int> s2 = {1, 1, 0, 0};. cout << v[s2] << endl;. // Returns: { 1, 2 }. cout << v[v<3] << endl;. // Returns: { 1, 2 }. ```. @dpiparo @bluehood From my point of view, this is exactly the expected behaviour (TBD).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:286,interoperability,specif,specific,286,"To clear it up in detail. With the current implementation `v[idx]` is resolved to selecting the elements by the indices **only** if the idx is of type `RVec<size_t>`. In case it is implicitely casted, from `{0, 1, 2, ...}`, the type `RVec<size_t>` is the preferred type because it's an specific overload. See following examples:. ```cpp. using namespace ROOT::VecOps;. RVec<float> v = {1, 2, 3, 4};. // Take indices explicitely. // Select directly the overload operator[](const RVec<size_t>&). RVec<size_t> idx = {0, 1};. cout << v[idx] << endl;. // Returns: { 1, 2 }. // Take indices by implicit cast. // Resolves to RVec<size_t> because it's the ""strongest"" overload. cout << v[{0, 1}] << endl;. // Returns: { 1, 2 }. // Make selection. RVec<int> s1 = {1, 1, 0, 0};. cout << v[s1] << endl;. // Returns: { 1, 2 }. RVec<unsigned int> s2 = {1, 1, 0, 0};. cout << v[s2] << endl;. // Returns: { 1, 2 }. cout << v[v<3] << endl;. // Returns: { 1, 2 }. ```. @dpiparo @bluehood From my point of view, this is exactly the expected behaviour (TBD).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:3,usability,clear,clear,3,"To clear it up in detail. With the current implementation `v[idx]` is resolved to selecting the elements by the indices **only** if the idx is of type `RVec<size_t>`. In case it is implicitely casted, from `{0, 1, 2, ...}`, the type `RVec<size_t>` is the preferred type because it's an specific overload. See following examples:. ```cpp. using namespace ROOT::VecOps;. RVec<float> v = {1, 2, 3, 4};. // Take indices explicitely. // Select directly the overload operator[](const RVec<size_t>&). RVec<size_t> idx = {0, 1};. cout << v[idx] << endl;. // Returns: { 1, 2 }. // Take indices by implicit cast. // Resolves to RVec<size_t> because it's the ""strongest"" overload. cout << v[{0, 1}] << endl;. // Returns: { 1, 2 }. // Make selection. RVec<int> s1 = {1, 1, 0, 0};. cout << v[s1] << endl;. // Returns: { 1, 2 }. RVec<unsigned int> s2 = {1, 1, 0, 0};. cout << v[s2] << endl;. // Returns: { 1, 2 }. cout << v[v<3] << endl;. // Returns: { 1, 2 }. ```. @dpiparo @bluehood From my point of view, this is exactly the expected behaviour (TBD).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:255,usability,prefer,preferred,255,"To clear it up in detail. With the current implementation `v[idx]` is resolved to selecting the elements by the indices **only** if the idx is of type `RVec<size_t>`. In case it is implicitely casted, from `{0, 1, 2, ...}`, the type `RVec<size_t>` is the preferred type because it's an specific overload. See following examples:. ```cpp. using namespace ROOT::VecOps;. RVec<float> v = {1, 2, 3, 4};. // Take indices explicitely. // Select directly the overload operator[](const RVec<size_t>&). RVec<size_t> idx = {0, 1};. cout << v[idx] << endl;. // Returns: { 1, 2 }. // Take indices by implicit cast. // Resolves to RVec<size_t> because it's the ""strongest"" overload. cout << v[{0, 1}] << endl;. // Returns: { 1, 2 }. // Make selection. RVec<int> s1 = {1, 1, 0, 0};. cout << v[s1] << endl;. // Returns: { 1, 2 }. RVec<unsigned int> s2 = {1, 1, 0, 0};. cout << v[s2] << endl;. // Returns: { 1, 2 }. cout << v[v<3] << endl;. // Returns: { 1, 2 }. ```. @dpiparo @bluehood From my point of view, this is exactly the expected behaviour (TBD).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:1023,usability,behavi,behaviour,1023,"To clear it up in detail. With the current implementation `v[idx]` is resolved to selecting the elements by the indices **only** if the idx is of type `RVec<size_t>`. In case it is implicitely casted, from `{0, 1, 2, ...}`, the type `RVec<size_t>` is the preferred type because it's an specific overload. See following examples:. ```cpp. using namespace ROOT::VecOps;. RVec<float> v = {1, 2, 3, 4};. // Take indices explicitely. // Select directly the overload operator[](const RVec<size_t>&). RVec<size_t> idx = {0, 1};. cout << v[idx] << endl;. // Returns: { 1, 2 }. // Take indices by implicit cast. // Resolves to RVec<size_t> because it's the ""strongest"" overload. cout << v[{0, 1}] << endl;. // Returns: { 1, 2 }. // Make selection. RVec<int> s1 = {1, 1, 0, 0};. cout << v[s1] << endl;. // Returns: { 1, 2 }. RVec<unsigned int> s2 = {1, 1, 0, 0};. cout << v[s2] << endl;. // Returns: { 1, 2 }. cout << v[v<3] << endl;. // Returns: { 1, 2 }. ```. @dpiparo @bluehood From my point of view, this is exactly the expected behaviour (TBD).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:247,deployability,API,API,247,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:247,integrability,API,API,247,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:247,interoperability,API,API,247,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:420,reliability,doe,does,420,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:45,usability,document,documentation,45,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:74,usability,behavi,behaviour,74,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:84,usability,clear,clear,84,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:269,usability,behavi,behaviour,269,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:386,usability,behavi,behaviour,386,"For me, this is not surprising. Imho, proper documentation could make the behaviour clear. and the case of implicit casting seems as well fine to me. noone will write `v[{0, 0, 1, 1}]` and expect a selection (?). Either doing this or breaking the API and inverting the behaviour? We can fix the selection type and let the index type float (but then with the unexpected implicit casting behaviour, which is bad). So this does not seem to be an option. Am I right that there's no other option to solve this in C++? Last option could be dropping the feature and stick to `Take(v, idx)`, which is already there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:463,deployability,Depend,Depends,463,"If I'm not mistaken,. ```. v[{0, 0, 1, 1}]. ```. and. ```. RVec<int> s1 = {0, 0, 1, 1};. v[s1];. ```. do two different things (first is fancy indexing, second is selection). I find this very surprising. Also. ```. RVec<unsigned int> idx = {2,1,0,0};. v[idx];. ```. does selection instead of fancy indexing (i.e. `2` is converted to `true`). This is also very surprising. Have I misuderstood? EDIT:. > Am I right that there's no other option to solve this in C++? Depends what you mean by ""solve"" :smile: there are various options each with its tradeoffs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:463,integrability,Depend,Depends,463,"If I'm not mistaken,. ```. v[{0, 0, 1, 1}]. ```. and. ```. RVec<int> s1 = {0, 0, 1, 1};. v[s1];. ```. do two different things (first is fancy indexing, second is selection). I find this very surprising. Also. ```. RVec<unsigned int> idx = {2,1,0,0};. v[idx];. ```. does selection instead of fancy indexing (i.e. `2` is converted to `true`). This is also very surprising. Have I misuderstood? EDIT:. > Am I right that there's no other option to solve this in C++? Depends what you mean by ""solve"" :smile: there are various options each with its tradeoffs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:463,modifiability,Depend,Depends,463,"If I'm not mistaken,. ```. v[{0, 0, 1, 1}]. ```. and. ```. RVec<int> s1 = {0, 0, 1, 1};. v[s1];. ```. do two different things (first is fancy indexing, second is selection). I find this very surprising. Also. ```. RVec<unsigned int> idx = {2,1,0,0};. v[idx];. ```. does selection instead of fancy indexing (i.e. `2` is converted to `true`). This is also very surprising. Have I misuderstood? EDIT:. > Am I right that there's no other option to solve this in C++? Depends what you mean by ""solve"" :smile: there are various options each with its tradeoffs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:265,reliability,doe,does,265,"If I'm not mistaken,. ```. v[{0, 0, 1, 1}]. ```. and. ```. RVec<int> s1 = {0, 0, 1, 1};. v[s1];. ```. do two different things (first is fancy indexing, second is selection). I find this very surprising. Also. ```. RVec<unsigned int> idx = {2,1,0,0};. v[idx];. ```. does selection instead of fancy indexing (i.e. `2` is converted to `true`). This is also very surprising. Have I misuderstood? EDIT:. > Am I right that there's no other option to solve this in C++? Depends what you mean by ""solve"" :smile: there are various options each with its tradeoffs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:463,safety,Depend,Depends,463,"If I'm not mistaken,. ```. v[{0, 0, 1, 1}]. ```. and. ```. RVec<int> s1 = {0, 0, 1, 1};. v[s1];. ```. do two different things (first is fancy indexing, second is selection). I find this very surprising. Also. ```. RVec<unsigned int> idx = {2,1,0,0};. v[idx];. ```. does selection instead of fancy indexing (i.e. `2` is converted to `true`). This is also very surprising. Have I misuderstood? EDIT:. > Am I right that there's no other option to solve this in C++? Depends what you mean by ""solve"" :smile: there are various options each with its tradeoffs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:463,testability,Depend,Depends,463,"If I'm not mistaken,. ```. v[{0, 0, 1, 1}]. ```. and. ```. RVec<int> s1 = {0, 0, 1, 1};. v[s1];. ```. do two different things (first is fancy indexing, second is selection). I find this very surprising. Also. ```. RVec<unsigned int> idx = {2,1,0,0};. v[idx];. ```. does selection instead of fancy indexing (i.e. `2` is converted to `true`). This is also very surprising. Have I misuderstood? EDIT:. > Am I right that there's no other option to solve this in C++? Depends what you mean by ""solve"" :smile: there are various options each with its tradeoffs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:68,reliability,doe,does,68,"> Also. > . > RVec<unsigned int> idx = {2,1,0,0};. > v[idx];. > . > does selection instead of fancy indexing (i.e. 2 is converted to true). Why?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:81,availability,operat,operator,81,">RVec<int> s1 = {1, 1, 0, 0};. >cout << v[s1] << endl;. Why is selection via the operator[] allows with anything but RVec<bool>? If the user needs to select with something other that RVec<bool> we could offer a Select method ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2621:136,usability,user,user,136,">RVec<int> s1 = {1, 1, 0, 0};. >cout << v[s1] << endl;. Why is selection via the operator[] allows with anything but RVec<bool>? If the user needs to select with something other that RVec<bool> we could offer a Select method ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2621
https://github.com/root-project/root/pull/2622:11,deployability,build,build,11,@phsft-bot build!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2622
https://github.com/root-project/root/pull/2625:24,usability,support,support,24,I've added overloads to support the cases 3 and 4 discussed in the initial commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:111,availability,operat,operation,111,Note that VecCore (and Intel https://software.intel.com/en-us/node/683462) uses the verb Blend to express this operation.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:115,deployability,API,API,115,"@pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for `Where`. @dpiparo I've as well nothing to add here. I've added the tutorial to the script `vo003_LogicalOperators.C`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:115,integrability,API,API,115,"@pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for `Where`. @dpiparo I've as well nothing to add here. I've added the tutorial to the script `vo003_LogicalOperators.C`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:115,interoperability,API,API,115,"@pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for `Where`. @dpiparo I've as well nothing to add here. I've added the tutorial to the script `vo003_LogicalOperators.C`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:23,usability,hint,hint,23,"@pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for `Where`. @dpiparo I've as well nothing to add here. I've added the tutorial to the script `vo003_LogicalOperators.C`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:77,usability,user,user,77,"@pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for `Where`. @dpiparo I've as well nothing to add here. I've added the tutorial to the script `vo003_LogicalOperators.C`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:117,deployability,API,API,117,"> @pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for Where. However within the context of ROOT we are using VecCore (and hence would have two names for the same context) ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:117,integrability,API,API,117,"> @pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for Where. However within the context of ROOT we are using VecCore (and hence would have two names for the same context) ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:117,interoperability,API,API,117,"> @pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for Where. However within the context of ROOT we are using VecCore (and hence would have two names for the same context) ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:191,testability,context,context,191,"> @pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for Where. However within the context of ROOT we are using VecCore (and hence would have two names for the same context) ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:273,testability,context,context,273,"> @pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for Where. However within the context of ROOT we are using VecCore (and hence would have two names for the same context) ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:25,usability,hint,hint,25,"> @pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for Where. However within the context of ROOT we are using VecCore (and hence would have two names for the same context) ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:79,usability,user,user,79,"> @pcanal Thanks for the hint, didn't know that! However, because I expect the user to be more familiar with numpy;s API than Intel's intrinsics/VecCore, I vote for Where. However within the context of ROOT we are using VecCore (and hence would have two names for the same context) ....",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:150,availability,consist,consistency,150,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:60,deployability,contain,container,60,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:100,energy efficiency,model,modeled,100,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:87,integrability,interfac,interface,87,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:87,interoperability,interfac,interface,87,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:87,modifiability,interfac,interface,87,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:100,security,model,modeled,100,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:150,usability,consist,consistency,150,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:183,usability,user,users,183,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2625:243,usability,user,users,243,"@pcanal `RVec` is advertised and designed as a ""numpy-like"" container, and much of the interface is modeled after numpy. I would vote for keeping the consistency. I'm sure the expert users that know veccore (certainly few w.r.t. the number of users familiar with numpy) will not be confused by the name.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2625
https://github.com/root-project/root/pull/2626:21,deployability,build,builds,21,I'll wait for the PR builds and merge after.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2626
https://github.com/root-project/root/pull/2628:90,availability,error,error,90,"Modules is broken now, and we're still working on this PR because we cannot reproduce the error locally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:0,deployability,Modul,Modules,0,"Modules is broken now, and we're still working on this PR because we cannot reproduce the error locally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:0,modifiability,Modul,Modules,0,"Modules is broken now, and we're still working on this PR because we cannot reproduce the error locally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:90,performance,error,error,90,"Modules is broken now, and we're still working on this PR because we cannot reproduce the error locally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:0,safety,Modul,Modules,0,"Modules is broken now, and we're still working on this PR because we cannot reproduce the error locally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:90,safety,error,error,90,"Modules is broken now, and we're still working on this PR because we cannot reproduce the error locally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:90,usability,error,error,90,"Modules is broken now, and we're still working on this PR because we cannot reproduce the error locally.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:163,energy efficiency,reduc,reducing,163,You can harvest all relevant include files from the remote machine and copy them over to a local machine. Then you can readjust the rootcling invocation and start reducing. I believe that’s the way to go.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Dccache=ON -Druntime_cxxmodules=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build just on slc6/gcc62 with flags -Druntime_cxxmodules=On -Dctest_test_exclude_none=on,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2628:11,deployability,build,build,11,@phsft-bot build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2628
https://github.com/root-project/root/pull/2629:34,deployability,Build,Building,34,"This is a fix of. ```. [582/3105] Building C object net/http/CMakeFiles/RHTTP.dir/civetweb/civetweb.c.o . /home/yuka/root/net/http/civetweb/civetweb.c:2701:8: warning: implicit declaration of function 'pthread_setname_np' is invalid in C99 [-Wimplicit-function-declaration] . (void)pthread_setname_np(pthread_self(), threadName); . ^ . 1 warning generated. . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:105,integrability,sub,submit,105,"Hi Yuka,. This is wrong and will not work on normal platform. Especially MacOS has other signature and I submit appropriate PR #2584 . pthread_setname_np() must be defined in `<pthread.h>` system include. If it is not there - it is not allowed to use it. I already provide simple app which shows if compilation works or not - see discussion #2581 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:52,interoperability,platform,platform,52,"Hi Yuka,. This is wrong and will not work on normal platform. Especially MacOS has other signature and I submit appropriate PR #2584 . pthread_setname_np() must be defined in `<pthread.h>` system include. If it is not there - it is not allowed to use it. I already provide simple app which shows if compilation works or not - see discussion #2581 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:89,security,sign,signature,89,"Hi Yuka,. This is wrong and will not work on normal platform. Especially MacOS has other signature and I submit appropriate PR #2584 . pthread_setname_np() must be defined in `<pthread.h>` system include. If it is not there - it is not allowed to use it. I already provide simple app which shows if compilation works or not - see discussion #2581 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:273,testability,simpl,simple,273,"Hi Yuka,. This is wrong and will not work on normal platform. Especially MacOS has other signature and I submit appropriate PR #2584 . pthread_setname_np() must be defined in `<pthread.h>` system include. If it is not there - it is not allowed to use it. I already provide simple app which shows if compilation works or not - see discussion #2581 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:273,usability,simpl,simple,273,"Hi Yuka,. This is wrong and will not work on normal platform. Especially MacOS has other signature and I submit appropriate PR #2584 . pthread_setname_np() must be defined in `<pthread.h>` system include. If it is not there - it is not allowed to use it. I already provide simple app which shows if compilation works or not - see discussion #2581 .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:131,deployability,modul,modules,131,"> Ok, I didn't see your PR. Is that PR solves this warning? My PR solves problem with compilation on Mac. No idea if it helps with modules compilation. Do you see problem with modules compilation on Linux?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:176,deployability,modul,modules,176,"> Ok, I didn't see your PR. Is that PR solves this warning? My PR solves problem with compilation on Mac. No idea if it helps with modules compilation. Do you see problem with modules compilation on Linux?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:131,modifiability,modul,modules,131,"> Ok, I didn't see your PR. Is that PR solves this warning? My PR solves problem with compilation on Mac. No idea if it helps with modules compilation. Do you see problem with modules compilation on Linux?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:176,modifiability,modul,modules,176,"> Ok, I didn't see your PR. Is that PR solves this warning? My PR solves problem with compilation on Mac. No idea if it helps with modules compilation. Do you see problem with modules compilation on Linux?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:131,safety,modul,modules,131,"> Ok, I didn't see your PR. Is that PR solves this warning? My PR solves problem with compilation on Mac. No idea if it helps with modules compilation. Do you see problem with modules compilation on Linux?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:176,safety,modul,modules,176,"> Ok, I didn't see your PR. Is that PR solves this warning? My PR solves problem with compilation on Mac. No idea if it helps with modules compilation. Do you see problem with modules compilation on Linux?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:120,usability,help,helps,120,"> Ok, I didn't see your PR. Is that PR solves this warning? My PR solves problem with compilation on Mac. No idea if it helps with modules compilation. Do you see problem with modules compilation on Linux?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:336,interoperability,semant,semantic,336,"#2584 doesn't help this warning, maybe you can add forward decl in your PR? > pthread_setname_np() must be defined in <pthread.h> system include. If it is not there - it is not allowed to use it. If it's not there, it shouldn't take a branch of `#elif defined(_GNU_SOURCE) && defined(__GLIBC__)..` so adding forward decl doesn't change semantic, IMHO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:6,reliability,doe,doesn,6,"#2584 doesn't help this warning, maybe you can add forward decl in your PR? > pthread_setname_np() must be defined in <pthread.h> system include. If it is not there - it is not allowed to use it. If it's not there, it shouldn't take a branch of `#elif defined(_GNU_SOURCE) && defined(__GLIBC__)..` so adding forward decl doesn't change semantic, IMHO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:321,reliability,doe,doesn,321,"#2584 doesn't help this warning, maybe you can add forward decl in your PR? > pthread_setname_np() must be defined in <pthread.h> system include. If it is not there - it is not allowed to use it. If it's not there, it shouldn't take a branch of `#elif defined(_GNU_SOURCE) && defined(__GLIBC__)..` so adding forward decl doesn't change semantic, IMHO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:14,usability,help,help,14,"#2584 doesn't help this warning, maybe you can add forward decl in your PR? > pthread_setname_np() must be defined in <pthread.h> system include. If it is not there - it is not allowed to use it. If it's not there, it shouldn't take a branch of `#elif defined(_GNU_SOURCE) && defined(__GLIBC__)..` so adding forward decl doesn't change semantic, IMHO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:72,usability,minim,minimal,72,@linev @vgvassilev I explained Yuka situation and we are going to try a minimal reproducer for clang to see if it is false-positive warning,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:113,availability,error,errors,113,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb. I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:113,performance,error,errors,113,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb. I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:61,safety,test,testing,61,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb. I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:113,safety,error,errors,113,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb. I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:61,testability,test,testing,61,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb. I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2629:113,usability,error,errors,113,@oshadura @yamaguchi1024 . I from my side start more precise testing with civetweb. I see several other compiler errors and warnings - will try to fix them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2629
https://github.com/root-project/root/pull/2633:54,safety,test,tests,54,"Thank you @yamaguchi1024 for this fix for 3.3, do the tests still pass with 3.3 and you get rid of the deprecation warnings you had?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2633
https://github.com/root-project/root/pull/2633:54,testability,test,tests,54,"Thank you @yamaguchi1024 for this fix for 3.3, do the tests still pass with 3.3 and you get rid of the deprecation warnings you had?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2633
https://github.com/root-project/root/pull/2633:117,safety,test,tests,117,"No problem, this fixes the warning I got: https://gist.github.com/yamaguchi1024/5f1202ef0fbef0dc3ccbce09a83ba0ec and tests are fine on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2633
https://github.com/root-project/root/pull/2633:117,testability,test,tests,117,"No problem, this fixes the warning I got: https://gist.github.com/yamaguchi1024/5f1202ef0fbef0dc3ccbce09a83ba0ec and tests are fine on my machine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2633
https://github.com/root-project/root/pull/2634:266,integrability,queue,queue,266,"More than 60 comments, 10 new commits :1st_place_medal: . @Axel-Naumann killing me :). I fix most of comments. Several big ""stones"" I left for next PRs:. 1. use of `std::list<WebCommand>` in canvas painter. For me it really makes sense while here FIFO is used. And `queue` not very nice when I need to iterate over all items. 2. Use of `collection::erase` methods in `WebWindow::CheckInactiveConnections` or `TWebWindow::CheckWebKeys`. @Axel-Naumann approach is very inefficient, while makes 10000 copies of same vector again and again without any need. I want to keep `erase`. 3. C++ handle in WebWindowManager, which should be assigned with each started browser process. . Fully agree, next PRs. 4. WebWindowManager::Show() too big. Lets keep it for a while - it may change a lot, especially when solving point 3.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2634
https://github.com/root-project/root/pull/2634:266,performance,queue,queue,266,"More than 60 comments, 10 new commits :1st_place_medal: . @Axel-Naumann killing me :). I fix most of comments. Several big ""stones"" I left for next PRs:. 1. use of `std::list<WebCommand>` in canvas painter. For me it really makes sense while here FIFO is used. And `queue` not very nice when I need to iterate over all items. 2. Use of `collection::erase` methods in `WebWindow::CheckInactiveConnections` or `TWebWindow::CheckWebKeys`. @Axel-Naumann approach is very inefficient, while makes 10000 copies of same vector again and again without any need. I want to keep `erase`. 3. C++ handle in WebWindowManager, which should be assigned with each started browser process. . Fully agree, next PRs. 4. WebWindowManager::Show() too big. Lets keep it for a while - it may change a lot, especially when solving point 3.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2634
https://github.com/root-project/root/pull/2634:100,testability,simpl,simple,100,"Was this mean to go to https://github.com/root-project/root/pull/2603 ? 'Cause this one is nice and simple. Look, you get *way* fewer comments from me if you don't create PRs with 1400 lines changed in 32 files! You asked for it :-). Much of these comments are also style/pattern comments; I hope that we can move to applying them in future code even more than seeing it fixed here. But yes, apologies for killing you ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2634
https://github.com/root-project/root/pull/2634:100,usability,simpl,simple,100,"Was this mean to go to https://github.com/root-project/root/pull/2603 ? 'Cause this one is nice and simple. Look, you get *way* fewer comments from me if you don't create PRs with 1400 lines changed in 32 files! You asked for it :-). Much of these comments are also style/pattern comments; I hope that we can move to applying them in future code even more than seeing it fixed here. But yes, apologies for killing you ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2634
https://github.com/root-project/root/pull/2634:36,energy efficiency,load,loading,36,Changed picked up by other PRs; lib loading extracted into PR #2676,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2634
https://github.com/root-project/root/pull/2634:36,performance,load,loading,36,Changed picked up by other PRs; lib loading extracted into PR #2676,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2634
https://github.com/root-project/root/pull/2636:133,deployability,version,version,133,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:204,deployability,version,versions,204,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:133,integrability,version,version,133,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:204,integrability,version,versions,204,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:133,modifiability,version,version,133,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:204,modifiability,version,versions,204,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:280,usability,help,help,280,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:290,usability,command,command,290,"Damn, this is sad... The feature needed for this came only in CMake 3.8. @Axel-Naumann what is your call on this? What's the maximum version of CMake we can require? I will try to make it work with older versions, but I'm not sure it's possible, actually. https://cmake.org/cmake/help/v3.8/command/add_custom_command.html?highlight=command_expand_lists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:15,availability,avail,available,15,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:424,availability,avail,available,424,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:193,deployability,Version,Version,193,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:339,deployability,Instal,Installing,339,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:445,deployability,instal,install,445,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:458,deployability,releas,release,458,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:193,integrability,Version,Version,193,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:201,integrability,Repositor,Repository,201,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:201,interoperability,Repositor,Repository,201,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:180,modifiability,Pac,Package,180,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:193,modifiability,Version,Version,193,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:15,reliability,availab,available,15,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:424,reliability,availab,available,424,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:15,safety,avail,available,15,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:424,safety,avail,available,424,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:15,security,availab,available,15,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:424,security,availab,available,424,"This is what's available on CentOS 6, unfortunately:. ```. =======================================================================================================================. Package Arch Version Repository Size. =======================================================================================================================. Installing:. cmake3 x86_64 3.6.1-3.el6 epel 6.2 M. ```. On CentOS 7, CMake 3.12.1 is available after `yum install epel-release`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2636:36,performance,time,time,36,Starting again with one change at a time...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2636
https://github.com/root-project/root/pull/2637:42,usability,interact,interactive,42,We should still use colors when we are in interactive terminal mode https://gitlab.kitware.com/cmake/cmake/issues/17143,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:15,deployability,automat,automatically,15,"LLVM/Clang are automatically checking if we are in interactive terminal mode. The reason I added this flag at one point was because Ninja by default is buffering the output (e.g. not directly printing to the screen), so Clang disabled colors as it wasn't sure whether the output goes to a file or to a terminal. Technically a `if (CMAKE_GENERATOR STREQUAL ""Ninja"")` around this should do the trick too (as the servers anyway only run make IIRC) and keep the color diagnostics on ninja builds around too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:485,deployability,build,builds,485,"LLVM/Clang are automatically checking if we are in interactive terminal mode. The reason I added this flag at one point was because Ninja by default is buffering the output (e.g. not directly printing to the screen), so Clang disabled colors as it wasn't sure whether the output goes to a file or to a terminal. Technically a `if (CMAKE_GENERATOR STREQUAL ""Ninja"")` around this should do the trick too (as the servers anyway only run make IIRC) and keep the color diagnostics on ninja builds around too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:152,integrability,buffer,buffering,152,"LLVM/Clang are automatically checking if we are in interactive terminal mode. The reason I added this flag at one point was because Ninja by default is buffering the output (e.g. not directly printing to the screen), so Clang disabled colors as it wasn't sure whether the output goes to a file or to a terminal. Technically a `if (CMAKE_GENERATOR STREQUAL ""Ninja"")` around this should do the trick too (as the servers anyway only run make IIRC) and keep the color diagnostics on ninja builds around too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:464,reliability,diagno,diagnostics,464,"LLVM/Clang are automatically checking if we are in interactive terminal mode. The reason I added this flag at one point was because Ninja by default is buffering the output (e.g. not directly printing to the screen), so Clang disabled colors as it wasn't sure whether the output goes to a file or to a terminal. Technically a `if (CMAKE_GENERATOR STREQUAL ""Ninja"")` around this should do the trick too (as the servers anyway only run make IIRC) and keep the color diagnostics on ninja builds around too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:15,testability,automat,automatically,15,"LLVM/Clang are automatically checking if we are in interactive terminal mode. The reason I added this flag at one point was because Ninja by default is buffering the output (e.g. not directly printing to the screen), so Clang disabled colors as it wasn't sure whether the output goes to a file or to a terminal. Technically a `if (CMAKE_GENERATOR STREQUAL ""Ninja"")` around this should do the trick too (as the servers anyway only run make IIRC) and keep the color diagnostics on ninja builds around too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:464,testability,diagno,diagnostics,464,"LLVM/Clang are automatically checking if we are in interactive terminal mode. The reason I added this flag at one point was because Ninja by default is buffering the output (e.g. not directly printing to the screen), so Clang disabled colors as it wasn't sure whether the output goes to a file or to a terminal. Technically a `if (CMAKE_GENERATOR STREQUAL ""Ninja"")` around this should do the trick too (as the servers anyway only run make IIRC) and keep the color diagnostics on ninja builds around too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:51,usability,interact,interactive,51,"LLVM/Clang are automatically checking if we are in interactive terminal mode. The reason I added this flag at one point was because Ninja by default is buffering the output (e.g. not directly printing to the screen), so Clang disabled colors as it wasn't sure whether the output goes to a file or to a terminal. Technically a `if (CMAKE_GENERATOR STREQUAL ""Ninja"")` around this should do the trick too (as the servers anyway only run make IIRC) and keep the color diagnostics on ninja builds around too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:116,reliability,diagno,diagnostics,116,"I just tested this and. ```. - if(ccache). + if(CMAKE_GENERATOR STREQUAL ""Ninja""). ```. this gives Ninja with color diagnostics. I think this is more precise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:7,safety,test,tested,7,"I just tested this and. ```. - if(ccache). + if(CMAKE_GENERATOR STREQUAL ""Ninja""). ```. this gives Ninja with color diagnostics. I think this is more precise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:7,testability,test,tested,7,"I just tested this and. ```. - if(ccache). + if(CMAKE_GENERATOR STREQUAL ""Ninja""). ```. this gives Ninja with color diagnostics. I think this is more precise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:116,testability,diagno,diagnostics,116,"I just tested this and. ```. - if(ccache). + if(CMAKE_GENERATOR STREQUAL ""Ninja""). ```. this gives Ninja with color diagnostics. I think this is more precise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:5,modifiability,refact,refactoring,5,When refactoring please watch out for the `-Qunused-arguments` which really is for ccache (see the url in the comment).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:5,performance,refactor,refactoring,5,When refactoring please watch out for the `-Qunused-arguments` which really is for ccache (see the url in the comment).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:126,integrability,sub,subsequent,126,"I didn't have a chance to look at the last revision yet. The comment didn't get refactored correctly; could you fix this in a subsequent PR, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:80,modifiability,refact,refactored,80,"I didn't have a chance to look at the last revision yet. The comment didn't get refactored correctly; could you fix this in a subsequent PR, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2637:80,performance,refactor,refactored,80,"I didn't have a chance to look at the last revision yet. The comment didn't get refactored correctly; could you fix this in a subsequent PR, please?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2637
https://github.com/root-project/root/pull/2640:42,availability,operat,operator,42,@bluehood Do you have any idea about `<<` operator overloading for RVec?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2640
https://github.com/root-project/root/pull/2640:22,usability,close,close,22,@yamaguchi1024 can we close this given https://github.com/root-project/root/pull/2664 ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2640
https://github.com/root-project/root/pull/2641:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:11,deployability,fail,failing,11,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:50,deployability,fail,failing,50,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:26,performance,network,network,26,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:11,reliability,fail,failing,11,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:50,reliability,fail,failing,50,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:0,safety,Test,Tests,0,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:26,security,network,network,26,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2641:0,testability,Test,Tests,0,Tests were failing due to network or were already failing before my change.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2641
https://github.com/root-project/root/pull/2644:76,integrability,interfac,interface,76,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:290,integrability,interfac,interface,290,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:503,integrability,interfac,interface,503,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:76,interoperability,interfac,interface,76,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:290,interoperability,interfac,interface,290,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:503,interoperability,interfac,interface,503,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:76,modifiability,interfac,interface,76,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:290,modifiability,interfac,interface,290,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:503,modifiability,interfac,interface,503,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:206,performance,time,time,206,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:363,performance,time,time,363,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:259,usability,prefer,prefered,259,"Hi @bluehood ,. In #2201 and in #2591, we discussed what is the appropriate interface for asking Interpreter printing. Possible options were ""Use printValue and declare RuntimePrintValue.h at Cling startup time"" or to ""Use gInterpreter->Evaluate"", and people prefered latter. This Evaluate interface is a bit tedious than calling printValue, but it saves startup time as we don't have to declare one more header. So when you want to print something from Interpreter, it'll be nice if you could use this interface :). ```. auto value = gInterpreter->CreateTemporary();. ￼ if (gInterpreter->Evaluate(<something you want to print>, *value) == 1 /*success*/). ￼ str = value->ToTypeAndValueString().second;. ￼ delete value;. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:108,usability,help,helper,108,@yamaguchi1024 if this is a pattern that you would like to see applied in several places couldn't we have a helper function that makes it a one-liner again?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:119,integrability,wrap,wrapper,119,"Yeah, it'll be nice to have something like gInterpreter->Print(const char*) which already returns a string. It'll be a wrapper function of Evaluate and ToTypeAndValueString in TCling. What do you think @Axel-Naumann and @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:119,interoperability,wrapper,wrapper,119,"Yeah, it'll be nice to have something like gInterpreter->Print(const char*) which already returns a string. It'll be a wrapper function of Evaluate and ToTypeAndValueString in TCling. What do you think @Axel-Naumann and @vgvassilev ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:133,energy efficiency,current,currently,133,"I think Yuka is right, the `cling::printValue()` interface is too tempting to force people to go through `cling::Value::print()`. We currently do that to trigger the inclusion of the ""generic overloads"" header into cling. I proposed to Yuka to move the header inclusion of `cling::valuePrinterInternal::printValueInternal()` into a new function that will be called by `TCling()` (and `printValueInternal()`) to ensure ROOT has that header always included at startup. This will allow ROOT to invoke `cling::printValue()` directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:49,integrability,interfac,interface,49,"I think Yuka is right, the `cling::printValue()` interface is too tempting to force people to go through `cling::Value::print()`. We currently do that to trigger the inclusion of the ""generic overloads"" header into cling. I proposed to Yuka to move the header inclusion of `cling::valuePrinterInternal::printValueInternal()` into a new function that will be called by `TCling()` (and `printValueInternal()`) to ensure ROOT has that header always included at startup. This will allow ROOT to invoke `cling::printValue()` directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:49,interoperability,interfac,interface,49,"I think Yuka is right, the `cling::printValue()` interface is too tempting to force people to go through `cling::Value::print()`. We currently do that to trigger the inclusion of the ""generic overloads"" header into cling. I proposed to Yuka to move the header inclusion of `cling::valuePrinterInternal::printValueInternal()` into a new function that will be called by `TCling()` (and `printValueInternal()`) to ensure ROOT has that header always included at startup. This will allow ROOT to invoke `cling::printValue()` directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:49,modifiability,interfac,interface,49,"I think Yuka is right, the `cling::printValue()` interface is too tempting to force people to go through `cling::Value::print()`. We currently do that to trigger the inclusion of the ""generic overloads"" header into cling. I proposed to Yuka to move the header inclusion of `cling::valuePrinterInternal::printValueInternal()` into a new function that will be called by `TCling()` (and `printValueInternal()`) to ensure ROOT has that header always included at startup. This will allow ROOT to invoke `cling::printValue()` directly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
https://github.com/root-project/root/pull/2644:126,deployability,contain,contained,126,"@yamaguchi1024 how much does this improve the startup time and memory saving? As @bluehood says, I think that something more ""contained"" than the few lines could be the right solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/2644
